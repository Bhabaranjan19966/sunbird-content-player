function startProgressBar(w, setInter, name) {
    function frame() {
        width >= 100 ? clearInterval(id) : (width++, elem && elem.style && (elem.style.width = width + "%"), 
        jQuery("#progressCount").text(width + "%"));
    }
    jQuery("#loading").show(), jQuery("#progressBar").width(0), jQuery("#loadingText").text(name);
    var elem = document.getElementById("progressBar"), width = w ? w : 20, id = setInterval(frame, setInter ? setInter : .7);
}

function removeRecordingFiles(path) {
    _.each(RecorderManager.mediaFiles, function(path) {
        $cordovaFile.removeFile(cordova.file.dataDirectory, path).then(function(success) {
            console.log("success : ", success);
        }, function(error) {
            console.log("err : ", error);
        });
    });
}

function createCustomEvent(evtName, data) {
    new CustomEvent(evtName, data);
}

function getUrlParameter(sParam) {
    var sParameterName, i, sPageURL = decodeURIComponent(window.location.search.substring(1)), sURLVariables = sPageURL.split("&");
    for (i = 0; i < sURLVariables.length; i++) if (sParameterName = sURLVariables[i].split("="), 
    sParameterName[0] === sParam) return void 0 === sParameterName[1] || sParameterName[1];
}

function backbuttonPressed(pageId) {
    var data = Renderer.running || HTMLRenderer.running ? {
        type: "EXIT_CONTENT",
        stageId: Renderer.theme ? Renderer.theme._currentStage : ""
    } : {
        type: "EXIT_APP"
    };
    TelemetryService.interact("END", "DEVICE_BACK_BTN", "EXIT", data), "coverpage" == pageId && TelemetryService.end(), 
    AudioManager.stopAll();
}

function exitApp(pageId) {
    TelemetryService.interact("TOUCH", "gc_genie", "TOUCH", {
        stageId: "renderer" == pageId && "application/vnd.ekstep.content-collection" != GlobalContext.config.appInfo.mimeType ? Renderer.theme._currentStage : pageId
    });
    try {
        TelemetryService.exit();
    } catch (err) {
        console.error("End telemetry error:", err.message);
    }
    localStorage.clear(), localStorageGC = {}, genieservice.endGenieCanvas();
}

function startApp(app) {
    app || (app = geniePackageName), _.isUndefined(navigator) || _.isUndefined(navigator.startApp) || navigator.startApp.start(app, function(message) {
        exitApp(), TelemetryService.exit(packageName, version);
    }, function(error) {
        if (app == geniePackageName) alert("Unable to start Genie App."); else {
            var bool = confirm("App not found. Do you want to search on PlayStore?");
            bool && cordova.plugins.market.open(app);
        }
    });
}

function contentNotAvailable() {
    alert(AppMessages.NO_CONTENT_FOUND), exitApp();
}

function checkStage(showalert) {
    "application/vnd.ekstep.content-collection" == GlobalContext.config.appInfo.mimeType ? ("showAlert" == showalert && alert("No stage found, redirecting to collection list page"), 
    window.location.hash = "#/content/list/" + GlobalContext.previousContentId) : ("showAlert" == showalert && alert("No Stage found, existing canvas"), 
    exitApp()), Renderer.running = !1;
}

function objectAssign() {
    Object.assign = function(target) {
        if (void 0 === target || null === target) throw new TypeError("Cannot convert undefined or null to object");
        var output = Object(target);
        return _.each(arguments, function(argument) {
            if (void 0 !== argument && null !== argument) for (var nextKey in argument) argument.hasOwnProperty(nextKey) && (output[nextKey] = argument[nextKey]);
        }), output;
    };
}

function startTelemetry(id, ver) {
    localStorageGC.removeItem("telemetryService"), TelemetryService.init(GlobalContext.game, GlobalContext.user).then(function() {
        if (TelemetryService.start(id, ver), !_.isUndefined(TelemetryService.instance)) {
            var tsObj = _.clone(TelemetryService);
            tsObj._start = JSON.stringify(tsObj.instance._start), tsObj._end = JSON.stringify(tsObj.instance._end), 
            localStorageGC.setItem("telemetryService", tsObj), localStorageGC.save();
        }
    }).catch(function(error) {
        console.log("TelemetryService init failed"), alert("TelemetryService init failed."), 
        exitApp();
    });
}

function getAsseturl(content) {
    var content_type = "application/vnd.ekstep.html-archive" == content.mimeType ? "html/" : "ecml/", path = window.location.origin + AppConfig.S3_content_host + content_type;
    return path += "Live" == content.status ? content.identifier + "-latest" : content.identifier + "-snapshot";
}

function updateContentData($state) {
    return _.isUndefined($state) ? void console.warn("updateContentData($state) - $state is not defined.") : void (content && content.metadata && (content.metadata.identifier ? content.metadata.identifier = content.metadata.identifier : (console.warn("Content Id is missing. Sending default Id for TelemetryService init."), 
    content.metadata.identifier = defaultMetadata.identifier)));
}

function getContentObj(data) {
    if (_.isObject(data.body)) return data.body;
    var tempData = data, x2js = new X2JS({
        attributePrefix: "none"
    });
    return data = x2js.xml_str2json(tempData.body), data && !data.parsererror || (data = JSON.parse(tempData.body)), 
    data;
}

function launchInitialPage(appInfo, $state) {
    CONTENT_MIMETYPES.indexOf(appInfo.mimeType) > -1 ? $state.go("playContent", {
        itemId: GlobalContext.game.id
    }) : (COLLECTION_MIMETYPE == appInfo.mimeType || ANDROID_PKG_MIMETYPE == appInfo.mimeType && appInfo.code == packageName) && $state.go("contentList", {
        id: GlobalContext.game.id
    });
}

function telemetryError(e) {
    var $body = angular.element(document.body);
    $body.scope().$root;
    document.body.removeEventListener("logError");
}

GlobalContext = {
    user: {},
    game: {
        id: "",
        ver: ""
    },
    _params: {},
    config: {
        origin: "",
        contentId: "",
        flavor: "",
        appInfo: void 0
    },
    filter: void 0,
    init: function(gid, ver) {
        return new Promise(function(resolve, reject) {
            GlobalContext.game.id = gid, GlobalContext.game.ver = ver, GlobalContext._setGlobalContext(resolve, reject);
        });
    },
    _setGlobalContext: function(resolve, reject) {
        new Promise(function(resolve, reject) {
            if (window.plugins && window.plugins.webintent) {
                var promises = [];
                promises.push(GlobalContext._getIntentExtra("origin", GlobalContext.config)), promises.push(GlobalContext._getIntentExtra("contentId", GlobalContext.config)), 
                promises.push(GlobalContext._getIntentExtra("appInfo", GlobalContext.config)), promises.push(GlobalContext._getIntentExtra("language_info", GlobalContext.config)), 
                Promise.all(promises).then(function(result) {
                    GlobalContext.config.appInfo && _.isString(GlobalContext.config.appInfo) && (GlobalContext.config.appInfo = JSON.parse(GlobalContext.config.appInfo), 
                    GlobalContext.game.id = GlobalContext.config.appInfo.identifier, GlobalContext.game.ver = GlobalContext.config.appInfo.pkgVersion || "1", 
                    GlobalContext.filter = GlobalContext.config.appInfo.filter ? JSON.parse(GlobalContext.config.appInfo.filter) : GlobalContext.config.appInfo.filter);
                }).then(function() {
                    GlobalContext.config.appInfo && COLLECTION_MIMETYPE == GlobalContext.config.appInfo.mimeType && null == GlobalContext.filter ? genieservice.getContent(GlobalContext.config.appInfo.identifier).then(function(result) {
                        result.isAvailable ? (GlobalContext.config.appInfo = result.localData || result.serverData, 
                        resolve(GlobalContext.config)) : reject("CONTENT_NOT_FOUND");
                    }).catch(function(err) {
                        console.error(err), reject("CONTENT_NOT_FOUND");
                    }) : resolve(GlobalContext.config);
                });
            } else GlobalContext.config = {
                origin: "Genie",
                contentId: "org.ekstep.num.addition.by.grouping",
                appInfo: {
                    code: "org.ekstep.quiz.app",
                    mimeType: "application/vnd.android.package-archive",
                    identifier: "org.ekstep.quiz.app"
                }
            }, resolve(GlobalContext.config);
        }).then(function(config) {
            return console.log("Origin value is:::", config), config && "Genie" == config.origin ? genieservice.getCurrentUser() : void reject("INVALID_ORIGIN");
        }).then(function(result) {
            result && "success" == result.status && result.data.uid ? (GlobalContext.user = result.data, 
            GlobalContext._params.user = GlobalContext.user, resolve(!0)) : reject("INVALID_USER");
        }).catch(function(err) {
            reject(err);
        });
    },
    _getIntentExtra: function(param, contextObj) {
        return new Promise(function(resolve, reject) {
            window.plugins.webintent.getExtra(param, function(url) {
                console.log(param + " intent value: " + url), url && (contextObj[param] = url), 
                resolve(!0);
            }, function() {
                console.log("intent value not set for: " + param), resolve(!0);
            });
        });
    },
    setParam: function(param, value, incr, max) {
        if ("user" != param) {
            var fval = GlobalContext._params[param];
            incr ? (fval || (fval = 0), fval += incr) : fval = value, 0 > fval && (fval = 0), 
            "undefined" != typeof max && fval >= max && (fval = 0), GlobalContext._params[param] = fval;
        } else console.error("user param can not set");
    },
    getParam: function(param) {
        return GlobalContext._params[param];
    }
}, AppMessages = {
    NO_CONTENT_LIST_FOUND: "There are no stories or worksheets available in this collection. You can always download new ones !",
    NO_CONTENT_FOUND: "There is no content available. You can always download !",
    SUCCESS_GET_CONTENT_LIST: "Content list synced.",
    ERR_GET_CONTENT_LIST: "Error while getting content list. Please try again.",
    CONTENT_LOAD_MSG: "{0} downloaded to bookshelf",
    NO_NEW_CONTENT: "No new content available in the repository",
    DOWNLOADING_MSG: "Downloading {0} content items",
    NO_CONNECTION_ERROR: "Unable to connect to the content repository.<br/>Please check your internet connectivity and try again.",
    INTERNAL_ERROR: "Something went wrong.<br/>Please try again later or contact helpdesk if issue persists.",
    SYSTEM_ERROR: "System Error occured: {0}.<br/>Please try again later or contact helpdesk if issue persists.",
    DOWNLOAD_ERROR: "Error downloading content: {0}",
    DOWNLOAD_URL_ERROR: "Invalid download URL for content: {0}",
    EXTRACT_FILE_NOT_FOUND: "Error extracting content. File not found: {0}",
    EXTRACT_INVALID_OUPUT_DIR: "Error extracting content. Output directory not found: {0}",
    EXTRACT_INVALID_ARCHIVE: "Invalid Content Archive File",
    DIRECT_DOWNLOADING_MSG: "Content is downloading...",
    DIRECT_CONTENT_LOAD_MSG: "Content downloading complete",
    ERR_FETCHING_CONTENT_PATH: "Error while getting content. Please try again."
};

var AppErrors = {
    contentListFetch: "Error while fetching content list: ",
    contentListFilterFetch: "Error while fetching and filtering content list: ",
    contetnPathFetch: "Error while fetching content path: ",
    sendFeedbackStatus: "Unable to send feedback event"
}, packageName = "org.ekstep.quiz.app", version = AppConfig.version, packageNameDelhi = "org.ekstep.delhi.curriculum", geniePackageName = "org.ekstep.genieservices", CONTENT_MIMETYPES = [ "application/vnd.ekstep.ecml-archive", "application/vnd.ekstep.html-archive" ], COLLECTION_MIMETYPE = "application/vnd.ekstep.content-collection", ANDROID_PKG_MIMETYPE = "application/vnd.android.package-archive", localStorageGC = {
    isHtmlContent: !1,
    isCollection: !1,
    content: {},
    collection: {},
    telemetryService: {},
    setItem: function(param, data) {
        data && (this[param] = _.isString(data) ? data : JSON.stringify(data));
    },
    getItem: function(param) {
        if (param) {
            var paramVal = this[param];
            return paramVal = _.isEmpty(paramVal) ? {} : JSON.parse(paramVal);
        }
    },
    removeItem: function(param) {
        this[param] = {};
    },
    save: function() {
        var thisData = {};
        thisData.content = this.content, thisData.collection = this.collection, thisData.telemetryService = this.telemetryService, 
        thisData.isCollection = this.isCollection, thisData.isHtmlContent = this.isHtmlContent, 
        localStorage.setItem("canvasLS", JSON.stringify(thisData));
    },
    update: function() {
        var lsData = localStorage.getItem("canvasLS");
        if (lsData) {
            lsData = JSON.parse(lsData);
            var lsKeys = _.keys(lsData), instance = this;
            _.each(lsKeys, function(key) {
                instance.setItem(key, lsData[key]);
            });
        }
    }
}, stack = new Array(), collectionChildrenIds = new Array(), collectionPath = new Array(), collectionPathMap = {}, content = {}, collectionChildren = !0, defaultMetadata = {
    identifier: "org.ekstep.item.sample",
    mimeType: "application/vnd.ekstep.ecml-archive",
    name: "Content Preview ",
    author: "EkStep",
    localData: {
        questionnaire: null,
        appIcon: "fixture-stories/item_sample/logo.png",
        subject: "literacy_v2",
        description: "Ekstep Content App",
        name: "Content Preview ",
        downloadUrl: "",
        checksum: null,
        loadingMessage: "Without requirements or design, programming is the art of adding bugs to an empty text file. ...",
        concepts: [ {
            identifier: "LO1",
            name: "Receptive Vocabulary",
            objectType: "Concept"
        } ],
        identifier: "org.ekstep.item.sample",
        grayScaleAppIcon: null,
        pkgVersion: 1
    },
    isAvailable: !0,
    path: "fixture-stories/item_sample"
}, config = {
    showStartPage: !0,
    showEndPage: !0,
    showHTMLPages: !0
}, isbrowserpreview = getUrlParameter("webview"), isMobile = !!window.cordova, setContentDataCb = void 0;

window.setContentData = function(metadata, data, configuration) {
    _.isUndefined(metadata) || _.isNull(metadata) ? content.metadata = defaultMetadata : content.metadata = metadata, 
    _.isUndefined(data) || (content.body = data), _.map(configuration, function(val, key) {
        config[key] = val;
    }), config.showHTMLPages || (config.showEndPage = !1), localStorage.clear();
    var $state = angular.element(document.body).injector().get("$state");
    updateContentData($state);
}, document.body.addEventListener("logError", telemetryError, !1), angular.module("genie-canvas", [ "ionic", "ngCordova", "genie-canvas.services" ]).constant("appConstants", {
    contentId: "contentId",
    stateContentList: "contentList",
    stateShowContent: "showContent",
    statePlayContent: "playContent",
    stateShowContentEnd: "showContentEnd"
}).run(function($rootScope, $ionicPlatform, $location, $timeout, $state, $stateParams, appConstants, ContentService) {
    $rootScope.imageBasePath = "img/icons/", $rootScope.enableEval = !1, "undefined" != typeof localPreview && "local" == localPreview && ($rootScope.imageBasePath = serverPath + $rootScope.imageBasePath), 
    $rootScope.languageSupport = {
        languageCode: "en",
        home: "Home",
        title: "TITLE",
        submit: "SUBMIT",
        image: "Image",
        voice: "Voice",
        audio: "Audio",
        author: "Author",
        instructions: "NOTES TO TEACHER",
        replay: "Replay",
        feedback: "Feedback",
        collection: "COLLECTION",
        noCreditsAvailable: "There are no credits available",
        congratulations: "Congratulations! You just completed",
        credit: "Credits",
        next: "Next",
        scores: "SCORES AND RATING",
        lastPage: "GO TO LAST PAGE",
        nextContent: "NEXT CONTENT",
        comment: "write your comment..."
    }, $rootScope.safeApply = function(fn) {
        var phase = this.$root.$$phase;
        "$apply" == phase || "$digest" == phase ? fn && "function" == typeof fn && fn() : this.$apply(fn);
    }, $timeout(function() {
        $ionicPlatform.ready(function() {
            console.log("ionic platform is ready..."), "undefined" == typeof Promise && (alert("Your device isn’t compatible with this version of Genie."), 
            exitApp()), window.cordova && window.cordova.plugins.Keyboard ? cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0) : AppConfig.recorder = "android", 
            window.StatusBar && StatusBar.styleDefault(), $ionicPlatform.onHardwareBackButton(function() {
                backbuttonPressed($rootScope.pageId);
            }), $ionicPlatform.on("pause", function() {
                Renderer.pause();
            }), $ionicPlatform.on("resume", function() {
                Renderer.resume();
            }), $rootScope.getContentMetadata = function(id, cb) {
                console.info("i came here"), ContentService.getContent(id).then(function(data) {
                    $rootScope.setContentMetadata(data), _.isUndefined(cb) || cb();
                }).catch(function(err) {
                    console.info("contentNotAvailable : ", err), contentNotAvailable();
                });
            }, $rootScope.getDataforPortal = function(id, cb) {
                ContentService.getContentMetadata(id, cb).then(function(data) {
                    $rootScope.setContentMetadata(data), _.isUndefined(cb) || cb();
                }).catch(function(err) {
                    console.info("contentNotAvailable : ", err), contentNotAvailable();
                });
            }, $rootScope.setContentMetadata = function(contentData) {
                var data = _.clone(contentData);
                content.metadata = data, GlobalContext.currentContentId = data.identifier, GlobalContext.currentContentMimeType = data.mimeType, 
                _.isUndefined(data.localData) ? data.localData = _.clone(contentData) : data = data.localData, 
                $rootScope.safeApply(function() {
                    $rootScope.content = data;
                });
            }, $rootScope.getContentBody = function(id) {
                ContentService.getContentBody(id).then(function(data) {
                    content.body = data.body, launchInitialPage(content.metadata, $state);
                }).catch(function(err) {
                    console.info("contentNotAvailable : ", err), contentNotAvailable();
                });
            }, $rootScope.deviceRendrer = function() {
                $state.current.name == appConstants.stateShowContentEnd ? $rootScope.$broadcast("loadEndPage") : isMobile ? $rootScope.getContentMetadata(GlobalContext.game.id, function() {
                    $state.go("playContent", {
                        itemId: $rootScope.content.identifier
                    });
                }) : launchInitialPage(GlobalContext.config.appInfo, $state);
            }, $rootScope.browserRenderer = function() {
                genieservice.api.setBaseUrl(AppConfig[AppConfig.flavor]);
                var urlContentId = getUrlParameter("id");
                urlContentId ? $rootScope.getDataforPortal(urlContentId, function() {
                    $rootScope.getContentBody(urlContentId);
                }) : ($rootScope.setContentMetadata(content.metadata), $state.go("playContent", {
                    itemId: content.metadata.identifier
                }));
            }, genieservice.getMetaData().then(function(data) {
                var flavor = data.flavor;
                void 0 == AppConfig[flavor] && (flavor = "sandbox"), GlobalContext.config.flavor = flavor;
            }), GlobalContext.init(packageName, version).then(function(appInfo) {
                "undefined" != typeof localPreview && "local" == localPreview || (isbrowserpreview ? $rootScope.browserRenderer() : $rootScope.deviceRendrer());
            }).catch(function(res) {
                console.log("Error Globalcontext.init:", res), alert(res.errors), exitApp();
            });
        });
    }, 0);
}).config(function($stateProvider, $urlRouterProvider) {
    $stateProvider.state("contentList", {
        cache: !1,
        url: "/content/list/:id",
        templateUrl: "templates/content-list.html",
        controller: "ContentListCtrl"
    }).state("showContentEnd", {
        cache: !1,
        url: "/content/end/:contentId",
        templateUrl: "templates/end.html",
        controller: "EndPageCtrl"
    }).state("playContent", {
        cache: !1,
        url: "/play/content/:itemId",
        templateUrl: "templates/renderer.html",
        controller: "ContentCtrl"
    });
}).controller("BaseCtrl", function($scope, $rootScope, $state, $stateParams, ContentService, appConstants) {
    $rootScope.replayContent = function() {
        $rootScope.content || $rootScope.getContentMetadata($stateParams.itemId), startProgressBar(40, .6, $rootScope.content.name), 
        TelemetryService.interact("TOUCH", "gc_replay", "TOUCH", {
            stageId: "endpage" == $rootScope.pageId ? "endpage" : $rootScope.stageData.currentStage
        }), EventBus.dispatch("actionReplay"), $state.current.name == appConstants.stateShowContentEnd ? $state.go(appConstants.statePlayContent, {
            itemId: $rootScope.content.identifier
        }) : (Renderer.theme.removeHtmlElements(), Renderer.theme.reRender());
    };
}).controller("ContentListCtrl", function($scope, $rootScope, $state, $stateParams, ContentService) {
    $rootScope.pageId = "ContentApp-Collection", $scope.version = GlobalContext.game.ver, 
    $scope.flavor = GlobalContext.config.flavor, $scope.currentUser = GlobalContext.user, 
    $rootScope.stories = [], $rootScope.showMessage = !1, $rootScope.$on("show-message", function(event, data) {
        data.message && "" != data.message && $rootScope.$apply(function() {
            $rootScope.showMessage = !0, $rootScope.message = data.message;
        }), data.timeout && setTimeout(function() {
            $rootScope.$apply(function() {
                $rootScope.showMessage = !1;
            }), data.callback && data.callback();
        }, data.timeout);
    }), $rootScope.renderMessage = function(message, timeout, reload) {
        $rootScope.$broadcast("show-message", {
            message: message,
            timeout: timeout
        });
    }, $scope.resetContentListCache = function() {
        jQuery("#loading").hide();
        var collectionContentId = $stateParams.id;
        $rootScope.renderMessage("", 0), ContentService.getContent(collectionContentId).then(function(content) {
            if (GlobalContext.previousContentId = content.identifier, _.findWhere(collectionPath, {
                identifier: collectionContentId
            }) || collectionPath.push({
                identifier: content.identifier,
                mediaType: "Collection"
            }), collectionPathMap[content.identifier]) {
                var pathArr = collectionPathMap[content.identifier];
                "content" == pathArr[pathArr.length - 1].mediaType.toLowerCase() ? (collectionPath = pathArr, 
                collectionPath.pop()) : collectionPath = pathArr;
            }
            _.contains(stack, content.identifier) || stack.push(content.identifier), COLLECTION_MIMETYPE == content.mimeType ? ($rootScope.title = content.name, 
            $rootScope.collection = content, localStorageGC.setItem("collection", $rootScope.collection), 
            TelemetryService.start(content.identifier, content.pkgVersion)) : $rootScope.collection = {};
            var childrenIds = content.children ? _.pluck(_.sortBy(content.children, function(child) {
                return child.index;
            }), "identifier") : null;
            childrenIds && (collectionChildrenIds = childrenIds), collectionChildren = !0;
            var filter = content.filter ? JSON.parse(content.filter) : content.filter;
            return ContentService.getContentList(filter, childrenIds);
        }).then(function(result) {
            $rootScope.$apply(function() {
                $rootScope.stories = result;
            }), $rootScope.stories && $rootScope.stories.length <= 0 && $rootScope.renderMessage(AppMessages.NO_CONTENT_LIST_FOUND);
        }).catch(function(err) {
            $rootScope.$apply(function() {
                $rootScope.stories = [];
            }), console.error(err), $rootScope.renderMessage(AppMessages.ERR_GET_CONTENT_LIST, 3e3);
        });
    }, $scope.playContent = function(content) {
        $rootScope.content = content, content.mimeType == COLLECTION_MIMETYPE ? ($state.go("contentList", {
            id: content.identifier
        }), GlobalContext.previousContentMimeType = content.mimeType, GlobalContext.previousContentId = content.identifier) : (GlobalContext.currentContentId = content.identifier, 
        GlobalContext.currentContentMimeType = content.mimeType, collectionPath.push({
            identifier: content.identifier,
            mediaType: "Content"
        }), $state.go("playContent", {
            itemId: content.identifier
        }));
    }, $scope.simulateCrash = function(fatal) {
        navigator.crashlytics ? (fatal === !0 ? (console.log("Simulating fatal crash for Crashlytics"), 
        navigator.crashlytics.simulateCrash("Simulated crash")) : (console.log("Simulating non-fatal error for Crashlytics"), 
        navigator.crashlytics.logException("Simulated non-fatal error")), console.log("Simulation sent to Crashlytics")) : console.log("Crashlytics not available for reporting");
    }, $scope.exitApp = function() {
        exitApp();
    }, $scope.init = function() {
        $rootScope.title = GlobalContext.config.appInfo ? GlobalContext.config.appInfo.name : "", 
        $scope.resetContentListCache();
    }, $scope.init();
}).controller("ContentCtrl", function($scope, $rootScope, $state, $stateParams, ContentService) {
    $rootScope.pageId = "renderer", $scope.init = function() {
        $scope.renderContent();
    }, $scope.callStartTelemetry = function(content) {
        var identifier = content && content.identifier ? content.identifier : null, pkgVersion = _.isUndefined(content.pkgVersion) ? null : content.pkgVersion.toString(), version = content && pkgVersion ? pkgVersion : "1";
        startTelemetry(identifier, version);
    }, $scope.renderContent = function() {
        if ($stateParams.itemId && $rootScope.content) if (localStorageGC.setItem("content", $rootScope.content), 
        startProgressBar(40, .6, $rootScope.content.name), $scope.callStartTelemetry($rootScope.content), 
        $scope.item = $rootScope.content, $scope.item && $scope.item.mimeType && "application/vnd.ekstep.html-archive" == $scope.item.mimeType) {
            var isMobile = !!window.cordova, envHTML = isMobile ? "app" : "portal", launchData = {
                env: envHTML,
                envpath: AppConfig[AppConfig.flavor]
            }, prefix_url = isbrowserpreview ? getAsseturl($rootScope.content) : $scope.item.baseDir, path = prefix_url + "/index.html?contentId=" + $stateParams.itemId + "&launchData=" + JSON.stringify(launchData) + "&appInfo=" + JSON.stringify(GlobalContext.config.appInfo);
            $scope.item.config && (path += "&config=" + JSON.stringify($scope.item.config)), 
            isbrowserpreview && (path += "&flavor=" + AppConfig.flavor + "t=" + getTime()), 
            isMobile ? (console.log("Opening through cordova custom webview."), cordova.InAppBrowser.open(path, "_self", "location=no,hardwareback=no")) : (console.log("Opening through window.open"), 
            window.open(path, "_self"));
        } else if (isbrowserpreview) {
            Renderer.start("", "gameCanvas", $scope.item, getContentObj(content), !0);
        } else _.isUndefined($scope.item) ? console.warn("Content not found") : Renderer.start($scope.item.baseDir, "gameCanvas", $scope.item); else alert("Name or Launch URL not found."), 
        exitApp();
    }, $scope.gotToEndPage = function() {
        $state.go("showEndPage", {});
    }, $scope.reloadStage = function() {
        reloadStage();
    }, $scope.$on("$destroy", function() {}), $rootScope.showMessage = !1, $rootScope.$on("show-message", function(event, data) {
        data.message && "" != data.message && $rootScope.$apply(function() {
            $rootScope.showMessage = !0, $rootScope.message = data.message;
        }), data && setTimeout(function() {
            $rootScope.$apply(function() {
                $rootScope.showMessage = !1;
            });
        }, 5e3);
    }), setTimeout(function() {
        $scope.init();
    }, 0);
}).controller("EndPageCtrl", function($scope, $rootScope, $state, ContentService, $stateParams) {
    function epKeyboardShowHandler() {
        jQuery("#gcFbPopup").addClass("gc-fc-popup-keyboard");
    }
    function epKeyboardHideHandler() {
        jQuery("#gcFbPopup").removeClass("gc-fc-popup-keyboard");
    }
    $scope.showFeedbackArea = !0, $scope.commentModel = "", $scope.showFeedbackPopup = !1, 
    $scope.userRating = 0, $scope.popUserRating = 0, $scope.stringLeft = 130, $scope.selectedRating = 0, 
    $rootScope.pageId = "endpage", $scope.creditsBody = '<div class="gc-popup-new credit-popup"><div class="gc-popup-title-new"> {{languageSupport.credit}}</div> <div class="gc-popup-body-new"><div class="font-baloo credit-body-icon-font"><div class="content-noCredits" ng-show="content.imageCredits == null && content.voiceCredits == null && content.soundCredits == null">{{languageSupport.noCreditsAvailable}}</div><table style="width:100%; table-layout: fixed;"><tr ng-hide="content.imageCredits==null"><td class="credits-title">{{languageSupport.image}}</td><td class="credits-data">{{content.imageCredits}}</td></tr><tr ng-hide="content.voiceCredits==null"><td class="credits-title">{{languageSupport.voice}}</td><td class="credits-data">{{content.voiceCredits}}</td></tr><tr ng-hide="content.soundCredits==null"><td class="credits-title">{{languageSupport.audio}}</td><td class="credits-data">{{content.soundCredits}}</td></tr></table></div></div></div>', 
    $scope.arrayToString = function(array) {
        return _.isString(array) ? array : !_.isEmpty(array) && _.isArray(array) ? array.join(", ") : "";
    }, $scope.setCredits = function(key) {
        $scope.content[key] ? $scope.content[key] = $scope.arrayToString($scope.content[key]) : $scope.content[key] = null;
    }, $scope.showCredits = function(key) {
        null == $scope.content.imageCredits && null == $scope.content.voiceCredits && null == $scope.content.soundCredits && console.warn("No metadata imageCredits,voiceCredites and soundCredits"), 
        jQuery("#creditsPopup").show(), TelemetryService.interact("TOUCH", "gc_credit", "TOUCH", {
            stageId: "ContentApp-CreditsScreen",
            subtype: "ContentID"
        });
    }, $scope.showFeedback = function(param) {
        $scope.userRating = param, $scope.popUserRating = param, TelemetryService.interact("TOUCH", "gc_feedback", "TOUCH", {
            stageId: "ContnetApp-FeedbackScreen",
            subtype: "ContentID"
        }), $scope.showFeedbackPopup = !0, $scope.enableFeedbackSubmit();
    }, $scope.updatePopUserRating = function(param) {
        $scope.popUserRating = param, $scope.enableFeedbackSubmit();
    }, $scope.enableFeedbackSubmit = function() {
        $scope.popUserRating > 0 || $scope.stringLeft < 130 ? jQuery("#feedbackSubmitBtn").removeClass("icon-opacity") : jQuery("#feedbackSubmitBtn").addClass("icon-opacity");
    }, $scope.submitFeedback = function() {
        $scope.userRating = $scope.popUserRating, $scope.selectedRating = $scope.userRating, 
        $scope.hideFeedback();
        var eks = {
            type: "RATING",
            rating: $scope.userRating,
            context: {
                type: "Content",
                id: $rootScope.content.identifier,
                stageid: $rootScope.pageId
            },
            comments: jQuery("#commentText").val()
        };
        TelemetryService.sendFeedback(eks);
    }, $scope.hideFeedback = function() {
        $scope.showFeedbackPopup = !1, $scope.stringLeft = 130, $scope.userRating = $scope.selectedRating;
    }, $scope.setTotalTimeSpent = function() {
        var startTime = TelemetryService && TelemetryService.instance && TelemetryService.instance._end[TelemetryService.instance._end.length - 1] ? TelemetryService.instance._end[TelemetryService.instance._end.length - 1].startTime : 0;
        if (startTime) {
            var totalTime = Math.round((new Date().getTime() - startTime) / 1e3), mm = Math.floor(totalTime / 60), ss = Math.floor(totalTime % 60);
            $scope.totalTimeSpent = (mm > 9 ? mm : "0" + mm) + ":" + (ss > 9 ? ss : "0" + ss);
        } else $scope.showFeedbackArea = !1;
    }, $scope.getTotalScore = function(id) {
        "undefined" != typeof cordova ? ContentService.getLearnerAssessment(TelemetryService._user.uid, id).then(function(score) {
            score && score.total_questions ? ($scope.showScore = !0, $scope.$apply(function() {
                $scope.totalScore = score.total_correct + "/" + score.total_questions;
            })) : $scope.showScore = !1;
        }) : $scope.showScore = !1;
    }, $scope.commentLength = function() {
        $("#commentText").val().length > 130 && $("#commentText").val($("#commentText").val().slice(0, 130)), 
        $scope.stringLeft = 130 - $("#commentText").val().length, $scope.enableFeedbackSubmit();
    }, $scope.init = function() {
        if (_.isUndefined($rootScope.content) && (localStorageGC.update(), content = localStorageGC.getItem("content"), 
        $rootScope.content = content), _(TelemetryService.instance).isUndefined()) {
            var tsObj = localStorageGC.getItem("telemetryService");
            TelemetryService.init(tsObj._gameData, tsObj._user);
        }
        TelemetryService.interact("TOUCH", $stateParams.contentId, "TOUCH", {
            stageId: "ContentApp-EndScreen",
            subtype: "ContentID"
        }), $scope.$broadcast("getRelatedContentEvent");
        var creditsPopup = angular.element(jQuery("popup[id='creditsPopup']"));
        creditsPopup.trigger("popupUpdate", {
            content: $rootScope.content
        }), setTimeout(function() {
            $rootScope.$apply();
        }, 1e3), $scope.setCredits("imageCredits"), $scope.setCredits("soundCredits"), $scope.setCredits("voiceCredits"), 
        window.addEventListener("native.keyboardshow", epKeyboardShowHandler, !0), window.addEventListener("native.keyboardhide", epKeyboardHideHandler, !0), 
        jQuery("#loading").hide(), $scope.setTotalTimeSpent(), $scope.getTotalScore($stateParams.contentId), 
        $scope.showFeedback(0);
    }, setTimeout(function() {
        $scope.init();
    }, 0), $rootScope.$on("loadEndPage", function() {
        _.isUndefined($rootScope.content) && $scope.init();
    });
}).controller("OverlayCtrl", function($scope, $rootScope, $stateParams) {
    $rootScope.isItemScene = !1, $rootScope.menuOpened = !1, EventBus.addEventListener("sceneEnter", function(data) {
        $rootScope.stageData = data.target, $rootScope.stageData.currentStage = $rootScope.stageData._id;
    }), $scope.state_off = "off", $scope.state_on = "on", $scope.state_disable = "disable", 
    $scope.showOverlayNext = !0, $scope.showOverlayPrevious = !0, $scope.showOverlaySubmit = !1, 
    $scope.showOverlayGoodJob = !1, $scope.showOverlayTryAgain = !1, $scope.overlayEvents = [ "overlayNext", "overlayPrevious", "overlaySubmit", "overlayMenu", "overlayReload", "overlayGoodJob", "overlayTryAgain" ], 
    $rootScope.defaultSubmit = function() {
        EventBus.dispatch("actionDefaultSubmit");
    }, $scope.navigate = function(navType) {
        $rootScope.content || $rootScope.getContentMetadata($stateParams.itemId), TelemetryService.interact("TOUCH", navType, null, {
            stageId: $rootScope.stageData.currentStage
        }), GlobalContext.currentContentId = $rootScope.content.identifier, GlobalContext.currentContentMimeType = $rootScope.content.mimeType, 
        "next" === navType ? EventBus.dispatch("actionNavigateNext", navType) : "previous" === navType && EventBus.dispatch("actionNavigatePrevious", navType);
    }, $scope.init = function() {
        if (GlobalContext.config.language_info) {
            console.log("Language updated", GlobalContext.config.language_info);
            var languageInfo = JSON.parse(GlobalContext.config.language_info);
            for (key in languageInfo) $rootScope.languageSupport[key] = languageInfo[key];
        }
        var evtLenth = $scope.overlayEvents.length;
        for (i = 0; i < evtLenth; i++) {
            var eventName = $scope.overlayEvents[i];
            EventBus.addEventListener(eventName, $scope.overlayEventHandler, $scope);
        }
    }, $scope.overlayEventHandler = function(event) {
        switch (event.type) {
          case "overlayNext":
            $scope.showOverlayNext = event.target;
            break;

          case "overlayPrevious":
            $scope.showOverlayPrevious = event.target;
            break;

          case "overlaySubmit":
            "off" === event.target ? $scope.showOverlaySubmit = !1 : ($scope.showOverlaySubmit = !0, 
            "disable" === event.target ? $rootScope.enableEval = !1 : $rootScope.enableEval = !0);
            break;

          case "overlayMenu":
            break;

          case "overlayReload":
            break;

          case "overlayGoodJob":
            $scope.showOverlayGoodJob = event.target;
            break;

          case "overlayTryAgain":
            $scope.showOverlayTryAgain = event.target;
            break;

          default:
            console.log("Default case got called..");
        }
        $rootScope.safeApply();
    }, $scope.openMenu = function() {
        return "block" == jQuery(".menu-overlay").css("display") ? void $scope.hideMenu() : ($scope.menuOpened = !0, 
        TelemetryService.interact("TOUCH", "gc_menuopen", "TOUCH", {
            stageId: $rootScope.stageData.currentStage
        }), jQuery(".menu-overlay").css("display", "block"), jQuery(".gc-menu").show(), 
        void jQuery(".gc-menu").animate({
            marginLeft: [ "0%", "easeOutExpo" ]
        }, 700, function() {}));
    }, $scope.hideMenu = function() {
        $scope.menuOpened = !1, TelemetryService.interact("TOUCH", "gc_menuclose", "TOUCH", {
            stageId: $rootScope.stageData.currentStage
        }), jQuery(".menu-overlay").css("display", "none"), jQuery(".gc-menu").animate({
            marginLeft: [ "-31%", "easeOutExpo" ]
        }, 700, function() {});
    }, $scope.init();
}).controller("RelatedContentCtrl", function($scope, $rootScope, $state, $stateParams, ContentService) {
    $scope.showRelatedContent = !1, $scope.contentShowMore = !1, $scope.showRelatedContentHeader = !0, 
    $scope.relatedContents = [], $scope.relatedContentPath = [], $scope.playRelatedContent = function(content) {
        $scope.showRelatedContent = !1, $scope.contentShowMore = !1, $scope.showRelatedContentHeader = !1, 
        collectionPath = $scope.relatedContentPath, TelemetryService.interact("TOUCH", "gc_relatedcontent", "TOUCH", {
            stageId: "endpage",
            subtype: " "
        }), TelemetryService.end(), jQuery("#endPageLoader").show(), GlobalContext.game.id = content.identifier, 
        GlobalContext.game.pkgVersion = content.pkgVersion, content.isAvailable ? $rootScope.getContentMetadata(GlobalContext.game.id, function() {
            $state.go("playContent", {
                itemId: $rootScope.content.identifier
            });
        }) : window.open("ekstep://c/" + content.identifier, "_system");
    }, $scope.getRelatedContent = function(list) {
        ContentService.getRelatedContent(TelemetryService._user.uid, list).then(function(item) {
            if (!_.isEmpty(item)) {
                var list = [];
                _.isEmpty(item.collection) ? _.isEmpty(item.content) || ($scope.showRelatedContent = !0, 
                $scope.contentShowMore = !0, list = _.first(_.isArray(item.content) ? item.content : [ item.content ], 2)) : ($scope.showRelatedContent = !0, 
                $scope.relatedContentPath = item.collection, list = [ item.collection[item.collection.length - 1] ], 
                list[0].appIcon = list[0].path + "/" + list[0].appIcon), _.isEmpty(list) ? ($scope.showRelatedContentHeader = !1, 
                jQuery("#endPageLoader").hide()) : $scope.$apply(function() {
                    $scope.relatedContents = list, jQuery("#endPageLoader").hide();
                });
            }
        });
    }, $scope.renderRelatedContent = function(id) {
        var list = [];
        $rootScope.collection = !0, _.isUndefined($rootScope.collection) ? "undefined" != typeof cordova && (list = [ {
            identifier: id,
            mediaType: "Content"
        } ], $scope.getRelatedContent(list)) : (console.info("COOLECTION RELATED CONTENT LOGIC IS NOT IMPLEMENTED.."), 
        list = [ {
            identifier: "do_10095878",
            mediaType: "collection"
        }, {
            identifier: "do_11218758816983449619",
            mediaType: "content"
        } ], $scope.getRelatedContent(list));
    }, $scope.init = function() {
        "undefined" != typeof cordova ? $scope.renderRelatedContent($stateParams.contentId) : (jQuery("#endPageLoader").hide(), 
        $scope.showRelatedContentHeader = !1);
    }, $scope.$on("getRelatedContentEvent", function(event) {
        $scope.init();
    });
}).directive("menu", function($rootScope, $sce) {
    return {
        restrict: "E",
        templateUrl: "undefined" != typeof localPreview && "local" == localPreview ? $sce.trustAsResourceUrl(serverPath + "templates/menu.html") : "templates/menu.html"
    };
}).directive("collection", function($rootScope, $state) {
    return {
        restrict: "E",
        template: '<a ng-click="goToCollection();" href="javascript:void(0);"><img  ng-class="{\'icon-opacity\': isCollec == false}" ng-src="{{imgSrc}}"/></a>',
        scope: {
            isCollec: "="
        },
        link: function(scope, state) {
            scope.imgSrc = $rootScope.imageBasePath + "icn_collections.png";
            var pageId = $rootScope.pageId;
            scope.goToCollection = function() {
                scope.isCollec && (collectionPath.pop(), TelemetryService.interact("TOUCH", "gc_collection", "TOUCH", {
                    stageId: "renderer" == pageId ? $rootScope.stageData.currentStage : pageId
                }), Renderer.running ? Renderer.cleanUp() : TelemetryService.end(), $state.go("contentList", {
                    id: $rootScope.collection.identifier
                }));
            };
        }
    };
}).directive("home", function($rootScope, $state) {
    return {
        restrict: "E",
        scope: {
            disableHome: "=info"
        },
        template: '<a ng-click="goToHome();" href="javascript:void(0);"><img ng-src="{{imgSrc}}"/></a>',
        link: function(scope, state) {
            scope.imgSrc = $rootScope.imageBasePath + "icn_square_home.png", scope.showHome = !1, 
            1 == scope.disableHome && (scope.showHome = !0);
            var pageId = $rootScope.pageId;
            scope.goToHome = function() {
                TelemetryService.interact("TOUCH", "gc_home", "TOUCH", {
                    stageId: "renderer" == pageId ? $rootScope.stageData.currentStage : pageId
                }), Renderer.running ? Renderer.cleanUp() : TelemetryService.end(), $state.go("playContent", {
                    itemId: $rootScope.content.identifier
                });
            };
        }
    };
}).directive("genie", function($rootScope) {
    return {
        scope: {
            icon: "@"
        },
        restrict: "E",
        template: '<a href="javascript:void(0)" ng-class="enableGenie ? \'icon-opacity\' : \'\'" ng-click="goToGenie()"><img ng-src="{{imgSrc}}"/></a>',
        link: function(scope) {
            scope.enableGenie = "undefined" == typeof cordova, scope.imgSrc = $rootScope.imageBasePath + scope.icon, 
            scope.goToGenie = function() {
                var pageId = $rootScope.pageId;
                exitApp(pageId);
            };
        }
    };
}).directive("stageInstructions", function($rootScope) {
    return {
        restrict: "E",
        template: '<a href="javascript:void(0)"  ng-class="{\'icon-opacity\' : !stageData.params.instructions}" ng-click="showInstructions()"><img ng-src="{{imageBasePath}}teacher_instructions.png" style="z-index:2;"/></a>',
        controller: function($scope, $rootScope) {
            $scope.stageInstMessage = "", $scope.showInst = !1, $scope.showInstructions = function() {
                $scope.stageInstMessage = $rootScope.stageData && $rootScope.stageData.params && $rootScope.stageData.params.instructions ? $rootScope.stageData.params.instructions : null, 
                $scope.showInst = null != $scope.stageInstMessage, $scope.logIntract("gc_showInst");
            }, $scope.closeInstructions = function() {
                $scope.showInst = !1, $scope.logIntract("gc_closeInst");
            }, $scope.logIntract = function(eleId) {
                TelemetryService.interact("TOUCH", eleId, "TOUCH", {
                    stageId: Renderer.theme._currentStage
                });
            }, $scope.$watch("menuOpened", function() {
                $rootScope.menuOpened || ($scope.showInst = !1);
            });
        }
    };
}).directive("mute", function($rootScope) {
    return {
        restrict: "E",
        template: '<a href="javascript:void(0)" ng-click="mute()"><img id="mute_id" ng-src="{{imageBasePath}}mute.png" style="position: absolute;margin: 3%;width: 10%;z-index: 1;margin-left: 40%;" /><img id="unmute_id" ng-src="{{unmuteIcon}}"  style="position: absolute;margin: 3% 3% 3% 40%;display: list-item;width: 12%;z-index: 1;"/> </a>',
        link: function(scope, url) {
            scope.mutestatus = "mute.png", AudioManager.muted && (scope.unmuteIcon = $rootScope.imageBasePath + "unmute.png", 
            document.getElementById("unmute_id").style.visibility = "visible"), scope.mute = function() {
                AudioManager.muted ? (AudioManager.unmute(), delete scope.unmuteIcon, document.getElementById("unmute_id").removeAttribute("src"), 
                document.getElementById("unmute_id").style.visibility = "hidden") : (AudioManager.mute(), 
                scope.unmuteIcon = $rootScope.imageBasePath + "unmute.png", document.getElementById("unmute_id").style.visibility = "visible"), 
                TelemetryService.interact("TOUCH", AudioManager.muted ? "gc_mute" : "gc_unmute", "TOUCH", {
                    stageId: Renderer.theme._currentStage
                });
            };
        }
    };
}).directive("restart", function($rootScope, $state, $stateParams) {
    return {
        restrict: "E",
        template: '<a href="javascript:void(0)" ng-click="restartContent()"><img src="{{imageBasePath}}icn_replay.png"/></a>',
        link: function(scope) {
            scope.restartContent = function() {
                $rootScope.replayContent(), AudioManager.unmute(), !_.isUndefined(scope.hideMenu) && scope.menuOpened && scope.hideMenu();
            };
        }
    };
}).directive("reloadStage", function($rootScope) {
    return {
        restrict: "E",
        template: '<a href="javascript:void(0)" onclick="EventBus.dispatch(\'actionReload\')"><img id="reload_id" src="{{imageBasePath}}speaker_icon.png" style="width:100%;"/></a>'
    };
}).directive("popup", function($rootScope, $compile) {
    return {
        restrict: "E",
        scope: {
            popupBody: "=popupBody"
        },
        template: '<div class="popup"><div class="popup-overlay" ng-click="hidePopup()"></div><div class="popup-full-body"></div></div>',
        link: function(scope, element) {
            scope.icons = $rootScope.icons, scope.languageSupport = $rootScope.languageSupport, 
            scope.content = $rootScope.content, element.bind("popupUpdate", function(event, data) {
                if (data) for (key in data) scope[key] = data[key];
            });
            var body = $compile(scope.popupBody)(scope);
            element.find("div.popup-full-body").html(), element.find("div.popup-full-body").append(body), 
            element.hide(), scope.retryAssessment = function(id, e) {
                scope.hidePopup(id);
            }, scope.hidePopup = function(id) {
                element.hide(), TelemetryService.interact("TOUCH", id ? id : "gc_popupclose", "TOUCH", {
                    stageId: "endpage" == $rootScope.pageId ? "endpage" : $rootScope.stageData.currentStage
                });
            }, scope.moveToNextStage = function(navType) {
                EventBus.dispatch("actionNavigateSkip", navType);
            };
        }
    };
}).directive("goodJob", function($rootScope) {
    return {
        restrict: "E",
        template: '<div class="popup"><div class="popup-overlay" ng-click="hidePopup()"></div><div class="popup-full-body"><div class="font-baloo assess-popup assess-goodjob-popup"><img class="popup-bg-img" ng-src="{{imageBasePath}}img_popup_next.png"/><div class="goodjob_next_div gc-popup-icons-div"><a href="javascript:void(0);" ng-click="hidePopup()"><img class="popup-goodjob-next " ng-src="{{ imageBasePath }}icn_bg_next.png" ng-click="moveToNextStage(\'next\')" /></a><p>{{languageSupport.next}}</p></div></div></div></div>',
        controller: function($scope, $rootScope, $timeout) {
            $scope.retryAssessment = function(id, e) {
                $scope.hidePopup(id);
            }, $scope.hidePopup = function(id) {
                TelemetryService.interact("TOUCH", id ? id : "gc_popupclose", "TOUCH", {
                    stageId: "endpage" == $rootScope.pageId ? "endpage" : $rootScope.stageData.currentStage
                }), $scope.showOverlayGoodJob = !1, $scope.showOverlayTryAgain = !1;
            }, $scope.moveToNextStage = function(navType) {
                EventBus.dispatch("actionNavigateSkip", navType);
            };
        }
    };
}).directive("tryAgain", function($rootScope) {
    return {
        restrict: "E",
        template: '<div class="popup"><div class="popup-overlay" ng-click="hidePopup()"></div><div class="popup-full-body"><div class="font-baloo assess-popup assess-tryagain-popup"><img class="popup-bg-img" ng-src="{{imageBasePath}}img_popup.png"/><div class="tryagain-retry-div gc-popup-icons-div"><a ng-click="retryAssessment(\'gc_retry\', $event);" href="javascript:void(0);"><img class="popup-retry" ng-src="{{imageBasePath}}icn_bg_replay.png" /></a><p class="gc-popup-retry-replay">{{languageSupport.replay}}</p></div><div class="tryagian-next-div gc-popup-icons-div"><a href="javascript:void(0);" ng-click="hidePopup()"><img class="popup-retry-next" ng-src="{{ imageBasePath }}icn_sml_next.png" ng-click="moveToNextStage(\'next\')" /></a><p>{{languageSupport.next}}</p></div></div></div></div></div></div>',
        controller: function($scope, $rootScope, $timeout) {}
    };
}).directive("assess", function($rootScope) {
    return {
        restrict: "E",
        scope: {
            image: "=",
            show: "="
        },
        template: '<a class="assess" ng-show="show" ng-class="assessStyle" href="javascript:void(0);" ng-click="onSubmit()"> <!-- enabled --><img ng-src="{{image}}"/></a>',
        link: function(scope, element) {
            scope.labelSubmit = $rootScope.languageSupport.submit;
        },
        controller: function($scope, $rootScope, $timeout) {
            $scope.isEnabled = !1, $scope.assessStyle = "assess-disable", $rootScope.$watch("enableEval", function() {
                $scope.isEnabled = $rootScope.enableEval, $scope.isEnabled ? $timeout(function() {
                    $scope.assessStyle = "assess-enable", $scope.image = $rootScope.imageBasePath + "icn_submit.png";
                }, 100) : ($scope.assessStyle = "assess-disable", $scope.image = $rootScope.imageBasePath + "icn_submit_inactive.png");
            }), $scope.onSubmit = function() {
                $scope.isEnabled && $rootScope.defaultSubmit();
            };
        }
    };
}).directive("starRating", function($rootScope) {
    return {
        scope: {
            rating: "=",
            maxRating: "@",
            readOnly: "@",
            click: "&",
            mouseHover: "&",
            mouseLeave: "&",
            emptyRating: "@",
            selectedRating: "@"
        },
        restrict: "EA",
        template: "<div style='display: inline-block; padding: 1%; cursor:pointer; width:12%; height:45%;' ng-repeat='idx in maxRatings track by $index'>                     <img ng-src='{{((hoverValue + _rating) <= $index) && rating_empty || rating_selected }}'                     ng-Click='isolatedClick($index + 1)' style='height:100%;' ></img>             </div>",
        compile: function(element, attrs) {
            (!attrs.maxRating || Number(attrs.maxRating) <= 0) && (attrs.maxRating = "5");
        },
        controller: function($scope, $element, $attrs, $rootScope) {
            $scope.maxRatings = [], $scope.rating_empty = $rootScope.imageBasePath + $scope.emptyRating, 
            $scope.rating_selected = $rootScope.imageBasePath + $scope.selectedRating;
            for (var i = 1; i <= $scope.maxRating; i++) $scope.maxRatings.push({});
            $scope._rating = $scope.rating, $scope.isolatedClick = function(param) {
                "true" != $scope.readOnly && ($scope.rating = $scope._rating = param, $scope.hoverValue = 0, 
                $scope.click({
                    param: param
                }));
            };
        }
    };
}).directive("lastPage", function($rootScope) {
    return {
        restrict: "E",
        template: '<a href="javascript:void(0)" ng-click="goToLastPage()"><img ng-src="{{imageBasePath}}icn_back_page.png"/></a>',
        link: function(scope) {}
    };
});