function X2JS(t) {
    "use strict";
    function e() {
        void 0 === t.escapeMode && (t.escapeMode = !0), t.attributePrefix = t.attributePrefix || "_", 
        "none" === t.attributePrefix && (t.attributePrefix = ""), t.arrayAccessForm = t.arrayAccessForm || "none", 
        t.emptyNodeForm = t.emptyNodeForm || "text", void 0 === t.enableToStringFunc && (t.enableToStringFunc = !0), 
        t.arrayAccessFormPaths = t.arrayAccessFormPaths || [], void 0 === t.skipEmptyTextNodesForObj && (t.skipEmptyTextNodesForObj = !0), 
        void 0 === t.stripWhitespaces && (t.stripWhitespaces = !0), t.datetimeAccessFormPaths = t.datetimeAccessFormPaths || [], 
        void 0 === t.coerce && (t.coerce = !0);
    }
    function r() {
        function t(t) {
            var e = String(t);
            return 1 === e.length && (e = "0" + e), e;
        }
        "function" != typeof String.prototype.trim && (String.prototype.trim = function() {
            return this.replace(/^\s+|^\n+|(\s|\n)+$/g, "");
        }), "function" != typeof Date.prototype.toISOString && (Date.prototype.toISOString = function() {
            return this.getUTCFullYear() + "-" + t(this.getUTCMonth() + 1) + "-" + t(this.getUTCDate()) + "T" + t(this.getUTCHours()) + ":" + t(this.getUTCMinutes()) + ":" + t(this.getUTCSeconds()) + "." + String((this.getUTCMilliseconds() / 1e3).toFixed(3)).slice(2, 5) + "Z";
        });
    }
    function n(t) {
        var e = t.localName;
        return null == e && (e = t.baseName), (null == e || "" == e) && (e = t.nodeName), 
        e;
    }
    function i(t) {
        return t.prefix;
    }
    function a(t) {
        return "string" == typeof t ? t.replace(/&/g, "&").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;") : t;
    }
    function s(t) {
        return t.toString().replace(/&/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&#x2F;/g, "/");
    }
    function o(e, r, n) {
        switch (t.arrayAccessForm) {
          case "property":
            e[r + "_asArray"] = e[r] instanceof Array ? e[r] : [ e[r] ];
        }
        if (!(e[r] instanceof Array) && t.arrayAccessFormPaths.length > 0) {
            for (var i = 0; i < t.arrayAccessFormPaths.length; i++) {
                var a = t.arrayAccessFormPaths[i];
                if ("string" == typeof a) {
                    if (a == n) break;
                } else if (a instanceof RegExp) {
                    if (a.test(n)) break;
                } else if ("function" == typeof a && a(e, r, n)) break;
            }
            i != t.arrayAccessFormPaths.length && (e[r] = [ e[r] ]);
        }
    }
    function c(t) {
        var e = t.split(/[-T:+Z]/g), r = new Date(e[0], e[1] - 1, e[2]), n = e[5].split(".");
        if (r.setHours(e[3], e[4], n[0]), n.length > 1 && r.setMilliseconds(n[1]), e[6] && e[7]) {
            var i = 60 * e[6] + Number(e[7]), a = /\d\d-\d\d:\d\d$/.test(t) ? "-" : "+";
            i = 0 + ("-" == a ? -1 * i : i), r.setMinutes(r.getMinutes() - i - r.getTimezoneOffset());
        } else -1 !== t.indexOf("Z", t.length - 1) && (r = new Date(Date.UTC(r.getFullYear(), r.getMonth(), r.getDate(), r.getHours(), r.getMinutes(), r.getSeconds(), r.getMilliseconds())));
        return r;
    }
    function l(e, r, n) {
        if (t.datetimeAccessFormPaths.length > 0) {
            for (var i = n.split(".#")[0], a = 0; a < t.datetimeAccessFormPaths.length; a++) {
                var s = t.datetimeAccessFormPaths[a];
                if ("string" == typeof s) {
                    if (s == i) break;
                } else if (s instanceof RegExp) {
                    if (s.test(i)) break;
                } else if ("function" == typeof s && s(obj, r, i)) break;
            }
            return a != t.datetimeAccessFormPaths.length ? c(e) : e;
        }
        return e;
    }
    function u(e, r) {
        if (e.nodeType == A.DOCUMENT_NODE) {
            for (var a = new Object(), c = e.childNodes, _ = 0; _ < c.length; _++) {
                var p = c.item(_);
                if (p.nodeType == A.ELEMENT_NODE) {
                    var g = n(p);
                    a[g] = u(p, g);
                }
            }
            return a;
        }
        if (e.nodeType == A.ELEMENT_NODE) {
            var a = new Object();
            a.__cnt = 0;
            for (var c = e.childNodes, _ = 0; _ < c.length; _++) {
                var p = c.item(_), g = n(p);
                p.nodeType != A.COMMENT_NODE && (a.__cnt++, null == a[g] ? (a[g] = u(p, r + "." + g), 
                o(a, g, r + "." + g)) : (null != a[g] && (a[g] instanceof Array || (a[g] = [ a[g] ], 
                o(a, g, r + "." + g))), a[g][a[g].length] = u(p, r + "." + g)));
            }
            for (var d = 0; d < e.attributes.length; d++) {
                var x = e.attributes.item(d);
                a.__cnt++, a[t.attributePrefix + x.name] = f(x.value);
            }
            var h = i(e);
            return null != h && "" != h && (a.__cnt++, a.__prefix = h), null != a["#text"] && (a.__text = a["#text"], 
            a.__text instanceof Array && (a.__text = a.__text.join("\n")), t.escapeMode && (a.__text = s(a.__text)), 
            t.stripWhitespaces && (a.__text = a.__text.trim()), delete a["#text"], "property" == t.arrayAccessForm && delete a["#text_asArray"], 
            a.__text = l(a.__text, g, r + "." + g)), null != a["#cdata-section"] && (a.__cdata = a["#cdata-section"], 
            delete a["#cdata-section"], "property" == t.arrayAccessForm && delete a["#cdata-section_asArray"]), 
            1 == a.__cnt && null != a.__text ? a = a.__text : 0 == a.__cnt && "text" == t.emptyNodeForm ? a = "" : a.__cnt > 1 && null != a.__text && t.skipEmptyTextNodesForObj && (t.stripWhitespaces && "" == a.__text || "" == a.__text.trim()) && delete a.__text, 
            delete a.__cnt, !t.enableToStringFunc || null == a.__text && null == a.__cdata || (a.toString = function() {
                return (null != this.__text ? this.__text : "") + (null != this.__cdata ? this.__cdata : "");
            }), a;
        }
        return e.nodeType == A.TEXT_NODE || e.nodeType == A.CDATA_SECTION_NODE ? f(e.nodeValue) : void 0;
    }
    function f(e) {
        if (!t.coerce || "" === e.trim()) return e;
        var r = Number(e);
        if (!isNaN(r)) return r;
        var n = e.toLowerCase();
        return "true" == n ? !0 : "false" == n ? !1 : e;
    }
    function _(e, r, n, i) {
        var s = "<" + (null != e && null != e.__prefix ? e.__prefix + ":" : "") + r;
        if (null != n) for (var o = 0; o < n.length; o++) {
            var c = n[o], l = e[c];
            t.escapeMode && (l = a(l)), s += " " + c.substr(t.attributePrefix.length) + "='" + l + "'";
        }
        return s += i ? "/>" : ">";
    }
    function p(t, e) {
        return "</" + (null != t.__prefix ? t.__prefix + ":" : "") + e + ">";
    }
    function g(t, e) {
        return -1 !== t.indexOf(e, t.length - e.length);
    }
    function d(e, r) {
        return "property" == t.arrayAccessForm && g(r.toString(), "_asArray") || 0 == r.toString().indexOf(t.attributePrefix) || 0 == r.toString().indexOf("__") || e[r] instanceof Function ? !0 : !1;
    }
    function x(t) {
        var e = 0;
        if (t instanceof Object) for (var r in t) d(t, r) || e++;
        return e;
    }
    function h(e) {
        var r = [];
        if (e instanceof Object) for (var n in e) -1 == n.toString().indexOf("__") && 0 == n.toString().indexOf(t.attributePrefix) && r.push(n);
        return r;
    }
    function m(e) {
        var r = "";
        return null != e.__cdata && (r += "<![CDATA[" + e.__cdata + "]]>"), null != e.__text && (r += t.escapeMode ? a(e.__text) : e.__text), 
        r;
    }
    function y(e) {
        var r = "";
        return e instanceof Object ? r += m(e) : null != e && (r += t.escapeMode ? a(e) : e), 
        r;
    }
    function v(t, e, r) {
        var n = "";
        if (0 == t.length) n += _(t, e, r, !0); else for (var i = 0; i < t.length; i++) n += _(t[i], e, h(t[i]), !1), 
        n += O(t[i]), n += p(t[i], e);
        return n;
    }
    function O(t) {
        var e = "", r = x(t);
        if (r > 0) for (var n in t) if (!d(t, n)) {
            var i = t[n], a = h(i);
            if (null == i || void 0 == i) e += _(i, n, a, !0); else if (i instanceof Object) if (i instanceof Array) e += v(i, n, a); else if (i instanceof Date) e += _(i, n, a, !1), 
            e += i.toISOString(), e += p(i, n); else {
                var s = x(i);
                s > 0 || null != i.__text || null != i.__cdata ? (e += _(i, n, a, !1), e += O(i), 
                e += p(i, n)) : e += _(i, n, a, !0);
            } else e += _(i, n, a, !1), e += y(i), e += p(i, n);
        }
        return e += y(t);
    }
    var T = "1.1.5";
    t = t || {}, e(), r();
    var A = {
        ELEMENT_NODE: 1,
        TEXT_NODE: 3,
        CDATA_SECTION_NODE: 4,
        COMMENT_NODE: 8,
        DOCUMENT_NODE: 9
    };
    this.parseXmlString = function(t) {
        var e = window.ActiveXObject || "ActiveXObject" in window;
        if (void 0 === t) return null;
        var r;
        if (window.DOMParser) {
            var n = new window.DOMParser(), i = null;
            if (!e) try {
                i = n.parseFromString("INVALID", "text/xml").childNodes[0].namespaceURI;
            } catch (a) {
                i = null;
            }
            try {
                r = n.parseFromString(t, "text/xml"), null != i && r.getElementsByTagNameNS(i, "parsererror").length > 0 && (r = null);
            } catch (a) {
                r = null;
            }
        } else 0 == t.indexOf("<?") && (t = t.substr(t.indexOf("?>") + 2)), r = new ActiveXObject("Microsoft.XMLDOM"), 
        r.async = "false", r.loadXML(t);
        return r;
    }, this.asArray = function(t) {
        return t instanceof Array ? t : [ t ];
    }, this.toXmlDateTime = function(t) {
        return t instanceof Date ? t.toISOString() : "number" == typeof t ? new Date(t).toISOString() : null;
    }, this.asDateTime = function(t) {
        return "string" == typeof t ? c(t) : t;
    }, this.xml2json = function(t) {
        return u(t);
    }, this.xml_str2json = function(t) {
        var e = this.parseXmlString(t);
        return null != e ? this.xml2json(e) : null;
    }, this.json2xml_str = function(t) {
        return O(t);
    }, this.json2xml = function(t) {
        var e = this.json2xml_str(t);
        return this.parseXmlString(e);
    }, this.getVersion = function() {
        return T;
    };
}

PluginManager = {
    defaultResWidth: 1920,
    defaultResHeight: 1200,
    pluginMap: {},
    pluginObjMap: {},
    registerPlugin: function(id, plugin) {
        org.ekstep.pluginframework.pluginManager._registerPlugin(id, undefined, plugin);
        if (typeof createjs !== "undefined") createjs.EventDispatcher.initialize(plugin.prototype);
    },
    isPlugin: function(id) {
        return org.ekstep.pluginframework.pluginManager.isPluginDefined(id);
    },
    invoke: function(id, data, parent, stage, theme) {
        return org.ekstep.pluginframework.pluginManager.invokeRenderer(id, data, parent, stage, theme);
    },
    registerPluginObject: function(pluginObj) {
        PluginManager.pluginObjMap[pluginObj.id] = pluginObj;
        org.ekstep.pluginframework.pluginManager.addPluginInstance(pluginObj);
    },
    getPluginObject: function(id) {
        return org.ekstep.pluginframework.pluginManager.getPluginInstance(id);
    },
    addError: function(error) {
        org.ekstep.pluginframework.pluginManager.addError(error);
    },
    getErrors: function() {
        return org.ekstep.pluginframework.pluginManager.getErrors();
    },
    cleanUp: function() {
        org.ekstep.pluginframework.pluginManager.cleanUp();
    },
    getPlugins: function() {
        return org.ekstep.pluginframework.pluginManager.getPlugins();
    }
};

window.PluginManager = PluginManager;

ControllerManager = {
    controllerMap: {},
    instanceMap: {},
    errors: [],
    reset: function() {
        ControllerManager.instanceMap = {};
    },
    registerController: function(type, controller) {
        ControllerManager.controllerMap[type] = controller;
    },
    isController: function(type) {
        if (ControllerManager.controllerMap[type]) {
            return true;
        } else {
            return false;
        }
    },
    get: function(c, baseDir) {
        var d, controllerMap = ControllerManager.controllerMap;
        if (c.type && c.id) {
            if (!controllerMap[c.type]) {
                ControllerManager.addError("No Controller found for - " + c.type);
            } else {
                var controllerId = c.type + "." + c.id;
                d = ControllerManager.getControllerInstance(controllerId);
                if (!d) {
                    d = new controllerMap[c.type](c, baseDir);
                }
            }
        }
        return d;
    },
    registerControllerInstance: function(id, instance) {
        ControllerManager.instanceMap[id] = instance;
    },
    getControllerInstance: function(id) {
        return ControllerManager.instanceMap[id];
    },
    addError: function(error) {
        ControllerManager.errors.push(error);
    },
    getErrors: function() {
        return ControllerManager.errors;
    }
};

AudioManager = {
    instances: {},
    MAX_INSTANCES: 10,
    muted: false,
    uniqueId: function(action) {
        return action.stageId + ":" + action.asset;
    },
    play: function(action, instance) {
        if ("undefined" != typeof action && "undefined" != typeof action.asset && null != action.asset) {
            instance = instance || AudioManager.instances[AudioManager.uniqueId(action)] || {};
            if (instance.object) {
                instance.object.volume = 1;
                if (instance.object.paused) {
                    instance.object.paused = false;
                } else if ([ createjs.Sound.PLAY_FINISHED, createjs.Sound.PLAY_INTERRUPTED, createjs.Sound.PLAY_FAILED ].indexOf(instance.object.playState) !== -1) {
                    instance.object.play();
                }
                instance.object.muted = this.muted;
            } else {
                AudioManager.reclaim();
                instance.object = createjs.Sound.play(action.asset, {
                    interrupt: createjs.Sound.INTERRUPT_ANY
                });
                instance.object.muted = this.muted;
                instance._data = {
                    id: AudioManager.uniqueId(action)
                };
                AudioManager.instances[AudioManager.uniqueId(action)] = instance;
                AssetManager.addStageAudio(Renderer.theme._currentStage, action.asset);
            }
            if (createjs.Sound.PLAY_FAILED != instance.object.playState) {
                EventManager.processAppTelemetry(action, "LISTEN", instance, {
                    subtype: "PLAY"
                });
                instance.object.on("complete", function() {
                    if ("undefined" != typeof action.cb) action.cb({
                        status: "success"
                    });
                }, action);
            } else {
                delete AudioManager.instances[AudioManager.uniqueId(action)];
                console.info("Audio with 'id :" + action.asset + "' is not found..");
            }
            return instance;
        } else {
            console.warn("Asset is not given to play.", action);
            return {};
        }
    },
    togglePlay: function(action) {
        if ("undefined" != typeof action && "undefined" != typeof action.asset && null != action.asset) {
            var instance = AudioManager.instances[AudioManager.uniqueId(action)] || {};
            if (instance && instance.object) {
                if (instance.object.playState === createjs.Sound.PLAY_FINISHED || instance.object.paused) {
                    AudioManager.play(action, instance);
                } else if (!instance.object.paused) {
                    AudioManager.pause(action, instance);
                }
            } else {
                AudioManager.play(action, instance);
            }
        } else {
            console.warn("Asset is not given to toggle play.", action);
        }
    },
    pause: function(action, instance) {
        if ("undefined" != typeof action && "undefined" != typeof action.asset && null != action.asset) {
            instance = instance || AudioManager.instances[AudioManager.uniqueId(action)];
            if (instance && instance.object && instance.object.playState === createjs.Sound.PLAY_SUCCEEDED) {
                instance.object.paused = true;
                EventManager.processAppTelemetry(action, "LISTEN", instance, {
                    subtype: "PAUSE"
                });
            }
        } else {
            console.warn("Asset is not given to toggle pause.", action);
        }
    },
    stop: function(action) {
        var instance = AudioManager.instances[AudioManager.uniqueId(action)] || {};
        if (instance && instance.object && instance.object.playState !== createjs.Sound.PLAY_FINISHED) {
            instance.object.volume = 0;
            instance.object.stop();
            EventManager.processAppTelemetry(action, "LISTEN", instance, {
                subtype: "STOP"
            });
        }
    },
    stopAll: function(action) {
        for (var data in AudioManager.instances) {
            AudioManager.instances[data].object.volume = 0;
        }
        createjs.Sound.stop();
        if (action) {
            EventManager.processAppTelemetry(action, "LISTEN", "", {
                subtype: "STOP_ALL"
            });
        }
    },
    reclaim: function() {
        var keys = _.keys(AudioManager.instances);
        if (keys.length > AudioManager.MAX_INSTANCES) {
            for (index in keys) {
                var key = keys[index];
                var instance = AudioManager.instances[key];
                if (instance && instance.object.playState != createjs.Sound.PLAY_INITED && instance.object.playState != createjs.Sound.PLAY_SUCCEEDED) {
                    AudioManager.destroyObject(instance, key);
                    break;
                }
            }
        }
    },
    destroy: function(stageId, assetId) {
        var soundId = AudioManager.uniqueId({
            stageId: stageId,
            asset: assetId
        });
        var instance = AudioManager.instances[soundId] || {};
        AudioManager.destroyObject(instance, soundId);
    },
    destroyObject: function(instance, soundId) {
        if (instance.object) {
            try {
                instance.object.destroy();
            } catch (err) {
                console.log("Error", err);
            }
            instance.object = undefined;
            instance.state = undefined;
            delete AudioManager.instances[soundId];
        }
    },
    cleanUp: function() {
        AudioManager.instances = {};
    },
    mute: function() {
        this.muted = true;
        if (!_.isEmpty(AudioManager.instances)) {
            _.map(_.pluck(_.values(AudioManager.instances), "object"), function(obj) {
                obj.muted = true;
                return obj;
            });
        }
    },
    unmute: function() {
        this.muted = false;
        if (!_.isEmpty(AudioManager.instances)) {
            _.map(_.pluck(_.values(AudioManager.instances), "object"), function(obj) {
                obj.muted = false;
                return obj;
            });
        }
    }
};

var Controller = Class.extend({
    _id: "",
    _data: undefined,
    _type: undefined,
    _model: undefined,
    _repeat: 0,
    _index: -1,
    _loaded: false,
    _error: false,
    init: function(c, baseDir) {
        this._type = c.type;
        this._id = c.type + "." + c.id;
        this.initController(c, baseDir);
    },
    initController: function(c, baseDir) {
        ControllerManager.addError("Subclasses of Controller should implement initController()");
    },
    onLoad: function(data, model) {
        ControllerManager.addError("Subclasses of Controller should implement onLoad()");
    },
    reset: function() {
        this._index = -1;
    },
    setIndex: function(idx) {
        if (this._loaded) {
            if (idx) {
                this._index = idx;
            }
            if (this._index < -1) {
                this._index = -1;
            }
            if (this._index >= this._repeat) {
                this._index = this._repeat - 1;
            }
        }
    },
    incrIndex: function(incr) {
        if (this._loaded) {
            if (!incr) {
                incr = 1;
            }
            this._index = this._index + incr;
            if (this._index >= this._repeat) {
                this._index = this._repeat - 1;
            }
        }
    },
    decrIndex: function(decr) {
        if (this._loaded) {
            if (!decr) {
                decr = 1;
            }
            this._index = this._index - decr;
            if (this._index < -1) {
                this._index = -1;
            }
        }
    },
    getModel: function() {
        var m;
        if (_.isArray(this._model)) {
            var index = this._index;
            if (index < 0) {
                index = 0;
            }
            m = this._model[index];
        } else {
            m = this._model;
        }
        return m;
    },
    getTemplate: function() {
        var t;
        if (this._model) {
            var m = this.getModel();
            if (m && m.template) {
                t = m.template;
            }
        }
        return t;
    },
    getModelValue: function(param) {
        var val;
        if (this._model && param) {
            var m = this.getModel();
            if (m) {
                try {
                    val = eval("m." + param);
                } catch (e) {}
                if (!val && m.model) {
                    m = m.model;
                    try {
                        val = eval("m." + param);
                    } catch (e) {}
                }
            }
        } else if (this._model) {
            val = this.getModel();
        }
        return val;
    },
    setModelValue: function(name, val, param) {
        if (name) {
            var m = this.getModel();
            if (m) {
                var o = eval("m." + name);
                if (!o && m.model) {
                    m = m.model;
                }
                var expr = "m." + name;
                if (param) {
                    expr += "." + param;
                }
                expr += " = " + JSON.stringify(val);
                try {
                    eval(expr);
                } catch (e) {}
            }
        }
    },
    getCount: function() {
        return this._repeat;
    },
    hasNext: function() {
        if (this._loaded) {
            if (this._index < this._repeat - 1) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    },
    hasPrevious: function() {
        if (this._loaded) {
            if (this._index > 0) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    },
    next: function() {
        var d;
        if (this.hasNext()) {
            this._index += 1;
            d = this._getCurrentModelItem();
        }
        return d;
    },
    previous: function() {
        var d;
        if (this.hasPrevious()) {
            this._index -= 1;
            d = this._getCurrentModelItem();
        }
        return d;
    },
    current: function() {
        var d;
        if (this._loaded && this._index >= 0 && this._index <= this._repeat - 1) {
            d = this._getCurrentModelItem();
        }
        return d;
    },
    evalItem: function() {
        ControllerManager.addError("evalItem() is not supported by this Controller");
    },
    feedback: function() {
        ControllerManager.addError("feedback() is not supported by this Controller");
    },
    _getCurrentModelItem: function() {
        var item;
        if (_.isArray(this._model)) {
            item = this._model[this._index];
        } else {
            item = this._model;
        }
        if (item && item.model) {
            item = item.model;
        }
        return item;
    }
});

var DataController = Controller.extend({
    initController: function(dc, baseDir) {
        if (dc.__cdata) {
            var data = _.isString(dc.__cdata) ? JSON.parse(dc.__cdata) : dc.__cdata;
            this.onLoad(data);
        } else {
            DataGenerator.loadData(baseDir, dc.type, dc.id, this);
        }
    },
    onLoad: function(data) {
        if (data) {
            ControllerManager.registerControllerInstance(this._id, this);
            this._data = data;
            this._loaded = true;
            if (data.model) {
                this._model = data.model;
            } else {
                this._model = data;
            }
            if (_.isArray(this._model)) {
                this._repeat = this._model.length;
            } else {
                this._repeat = 1;
            }
        } else {
            this._error = true;
        }
    }
});

ControllerManager.registerController("data", DataController);

var ItemController = Controller.extend({
    assessStartEvent: undefined,
    initController: function(ic, baseDir) {
        if (ic.__cdata) {
            var data = _.isString(ic.__cdata) ? JSON.parse(ic.__cdata) : ic.__cdata;
            ItemDataGenerator._onLoad(data, this);
        } else {
            ItemDataGenerator.loadData(baseDir, ic.type, ic.id, this);
        }
    },
    onLoad: function(data, model) {
        if (_.isObject(data) && _.isArray(model)) {
            ControllerManager.registerControllerInstance(this._id, this);
            this._data = data;
            this._loaded = true;
            this._model = model;
            this._repeat = this._model.length;
        } else {
            this._error = true;
        }
    },
    next: function() {
        var d;
        try {
            if (this.hasNext()) {
                this._index += 1;
                var item = this._model[this._index];
                if (item) {
                    this.resetItem(item);
                    if ("undefined" == typeof item.model || null == item.model) item.model = {};
                    d = item.model;
                    item.qid = _.isString(item.qid) && !_.isEmpty(item.qid) ? item.qid : "na";
                    try {
                        this.assessStartEvent = TelemetryService.assess(_.isString(item.identifier) && !_.isEmpty(item.identifier) ? item.identifier : item.qid.trim(), this._data.subject, item.qlevel, {
                            maxscore: item.max_score
                        }).start();
                    } catch (e) {
                        EkstepRendererAPI.logErrorEvent(e, {
                            type: "content",
                            severity: "fatal",
                            action: "transitionTo",
                            objectId: item.identifier,
                            objectType: "question"
                        });
                        ControllerManager.addError("ItemController.next() - OE_ASSESS_START error: " + e);
                    }
                }
            } else {
                this.resetItem(this._model[this._index]);
            }
            return d;
        } catch (e) {
            EkstepRendererAPI.logErrorEvent(e, {
                type: "content",
                severity: "fatal",
                action: "transitionTo"
            });
            showToaster("error", "Invalid questions");
            console.warn("Item controller have some issue due to", e);
        }
    },
    resetItem: function(item) {
        if (item) {
            if (item.type.toLowerCase() == "ftb") {
                FTBEvaluator.reset(item);
            } else if (item.type.toLowerCase() == "mcq" || item.type.toLowerCase() == "mmcq") {
                MCQEvaluator.reset(item);
            } else if (item.type.toLowerCase() == "mtf") {
                MTFEvaluator.reset(item);
            }
        }
    },
    evalItem: function() {
        try {
            var instance = this;
            var item = this.getModel();
            var result;
            var pass = false;
            if (GlobalContext.registerEval[item.type.toLowerCase()]) {
                var customEvalInstance = GlobalContext.registerEval[item.type.toLowerCase()];
                result = customEvalInstance.evaluate(item);
            } else {
                if (item.type.toLowerCase() == "ftb") {
                    result = FTBEvaluator.evaluate(item);
                } else if (item.type.toLowerCase() == "mcq" || item.type.toLowerCase() == "mmcq") {
                    result = MCQEvaluator.evaluate(item);
                } else if (item.type.toLowerCase() == "mtf") {
                    result = MTFEvaluator.evaluate(item);
                }
            }
            if (result) {
                pass = result.pass;
                item.score = result.score;
            }
            if (!_.isUndefined(item.concepts)) var concepts = !_.isArray(item.concepts) || !_.isObject(item.concepts) ? JSON.parse(item.concepts) : item.concepts;
            var data = {
                pass: result.pass,
                score: item.score,
                res: result.res,
                mmc: instance.getMMC(item, result),
                qindex: item.qindex,
                mc: _.without(_.pluck(concepts, "identifier"), undefined),
                qtitle: item.title || item.name,
                qdesc: item.description ? item.description : ""
            };
            EkstepRendererAPI.dispatchEvent("renderer:assesment:eval", this.assessStartEvent);
            TelemetryService.assessEnd(this.assessStartEvent, data);
        } catch (e) {
            console.warn("Item controller failed due to", e);
            EkstepRendererAPI.logErrorEvent(e, {
                type: "content",
                severity: "error",
                action: "eval",
                objectId: item.identifier,
                objectType: "question"
            });
            showToaster("error", "Evaluation Fails");
            ControllerManager.addError("ItemController.evalItem() - OE_ASSESS_END error: " + e);
        }
        console.info("Item Eval result:", result);
        return result;
    },
    getMMC: function(item, result) {
        try {
            var mmc = [], obj = {};
            _.each(result.res, function(each) {
                Object.assign(obj, each);
            });
            if (typeof item.responses === "string") item.responses = JSON.parse(item.responses);
            _.each(item.responses, function(each) {
                var truthValue = compareObject(obj, each.values);
                if (truthValue) {
                    mmc = each.mmc;
                }
            });
            return mmc;
        } catch (e) {
            console.warn("Item controller failed due to", e);
            EkstepRendererAPI.logErrorEvent(e, {
                type: "content",
                severity: "error",
                action: "eval",
                objectId: item.identifier,
                objectType: "question"
            });
            showToaster("error", "Evaluation Fails");
            ControllerManager.addError("ItemController.evalItem() - OE_ASSESS_END error: " + e);
        }
    },
    feedback: function() {
        var message;
        var feedback = this._data.feedback;
        if (feedback) {
            var score = 0;
            if (this._model) {
                if (_.isArray(this._model)) {
                    this._model.forEach(function(item) {
                        if (item.score) {
                            score += item.score;
                        }
                    });
                } else {
                    if (this._model.score) {
                        score = this._model.score;
                    }
                }
            }
            var percent = parseInt(score / this._data.max_score * 100);
            feedback.forEach(function(range) {
                var min = 0;
                var max = 100;
                if (range.range) {
                    if (range.range.min) {
                        min = range.range.min;
                    }
                    if (range.range.max) {
                        max = range.range.max;
                    }
                }
                if (percent >= min && percent <= max) {
                    message = range.message;
                }
            });
        }
        return message;
    }
});

ControllerManager.registerController("items", ItemController);

MCQEvaluator = {
    evaluate: function(item) {
        var result = {};
        var pass = true;
        var score = 0;
        var res = [];
        if (item) {
            var options = item.options;
            if (_.isArray(options)) {
                var isMCQ = false;
                var answersCount = 0;
                options.forEach(function(opt) {
                    if (opt.answer == true) {
                        answersCount++;
                    }
                });
                if (answersCount > 1) {
                    isMCQ = false;
                } else if (answersCount == 1) {
                    isMCQ = true;
                } else {
                    console.warn("Its not MCQ and MMCQ");
                    return;
                }
                options.forEach(function(opt) {
                    if (opt.selected) {
                        var tuple = {};
                        tuple[opt.value.resvalue] = "true";
                        res.push(tuple);
                    }
                    if (opt.answer === true) {
                        if (!opt.selected) {
                            pass = false;
                        } else {
                            score += _.isNumber(opt.score) ? opt.score : 1;
                        }
                    } else {
                        if (opt.selected === true) {
                            pass = false;
                            if (isMCQ == true) delete opt.selected;
                        }
                    }
                });
            }
            if (!pass) {
                result.feedback = item.feedback;
                if (!item.partial_scoring) {
                    score = 0;
                }
            }
        }
        result.pass = pass;
        result.score = score;
        result.res = res;
        return result;
    },
    reset: function(item) {
        if (item) {
            var options = item.options;
            if (_.isArray(options)) {
                options.forEach(function(opt) {
                    opt.selected = undefined;
                });
            }
        }
    }
};

FTBEvaluator = {
    evaluate: function(item) {
        var result = {};
        var pass = true;
        var score = 0;
        var res = [];
        if (item) {
            var answer = item.answer;
            var passCount = 0;
            var model = item.model || {};
            for (var ans in answer) {
                if (model[ans]) {
                    var obj = {};
                    obj[ans] = model[ans];
                    res.push(obj);
                }
                if ("undefined" != typeof model[ans] && "undefined" != typeof answer[ans] && "undefined" != typeof answer[ans].value) {
                    var isCorrect = this._isCorrectAnswer(answer[ans].value, model[ans]);
                    console.info(isCorrect, "isCorrect");
                    if (isCorrect) {
                        var s = answer[ans].score;
                        score += _.isNumber(s) ? s : 1;
                        passCount++;
                    } else {
                        passCount--;
                    }
                    if (passCount == res.length) {
                        pass = true;
                    } else {
                        pass = false;
                    }
                } else {
                    console.warn("Answer is undefined", answer);
                    pass = false;
                }
            }
            if (!pass) {
                result.feedback = item.feedback;
                if (!item.partial_scoring) {
                    score = 0;
                }
            }
        }
        result.pass = pass;
        result.score = score;
        result.res = res;
        return result;
    },
    _isCorrectAnswer: function(actual, given) {
        var isCorrect = false;
        actual = _.isString(actual) ? actual.toLowerCase() : actual;
        given = _.isString(given) ? given.toLowerCase() : given;
        if (_.isString(actual)) {
            if (-1 < actual.indexOf(",")) {
                var actualList = actual.split(",");
                for (var index in actualList) {
                    if (actualList[index] == given) {
                        isCorrect = true;
                        break;
                    }
                }
            } else {
                isCorrect = actual == given ? true : false;
            }
        } else {
            isCorrect = actual == given ? true : false;
        }
        return isCorrect;
    },
    reset: function(item) {
        if (item) {
            var answer = item.answer;
            var model = item.model || {};
            for (var ans in answer) {
                if (model[ans]) {
                    model[ans] = "";
                }
            }
        }
    }
};

MTFEvaluator = {
    evaluate: function(item) {
        var result = {};
        var pass = true;
        var score = 0;
        var res = [];
        if (item) {
            var options = item.rhs_options;
            var selectedOptions = [];
            if (_.isArray(options)) {
                _.each(options, function(opt) {
                    if (typeof opt.selected != "undefined") {
                        var obj = {};
                        obj[opt.value.resvalue] = opt.value.mapped;
                        res.push(obj);
                        selectedOptions.push(opt);
                    }
                    if (typeof opt.answer != "undefined") {
                        if (opt.answer == opt.selected) {
                            score += _.isNumber(opt.score) ? opt.score : 1;
                        }
                    } else {
                        if (typeof opt.selected != "undefined") {
                            pass = false;
                        }
                    }
                });
            }
            if (pass) {
                var ansMatched = _.isEqual(_.pluck(selectedOptions, "selected"), _.pluck(selectedOptions, "answer")) && item.lhs_options.length == selectedOptions.length || false;
                pass = ansMatched;
            }
            if (!pass) {
                result.feedback = item.feedback;
                if (!item.partial_scoring) {
                    score = 0;
                }
            }
        }
        result.pass = pass;
        result.score = score;
        result.res = res;
        return result;
    },
    reset: function(item) {
        if (item) {
            var options = item.rhs_options;
            if (_.isArray(options)) {
                options.forEach(function(opt) {
                    opt.selected = undefined;
                    delete opt.value.mapped;
                });
            }
        }
    }
};

AnimationManager = {
    animationsCache: {},
    pluginMap: {},
    pluginObjMap: {},
    handle: function(action) {
        var instance;
        if (action && action.asset) {
            instance = PluginManager.getPluginObject(action.asset);
        } else {
            return;
        }
        if (action.parent === true && instance._parent) {
            instance = instance._parent;
        }
        for (k in action) {
            if (AnimationManager.isPlugin(k)) {
                var data = action[k];
                var pluginObj = undefined;
                if (data.id) {
                    pluginObj = AnimationManager.getPluginObject(data.id);
                }
                if ("undefined" == typeof pluginObj) {
                    pluginObj = AnimationManager.invokePlugin(k, action[k], instance);
                } else {
                    console.info("Playing from cache...");
                }
                pluginObj.animate(instance, action.cb);
            }
        }
    },
    widthHandler: function(event, plugin) {
        var sb = plugin.getBounds();
        plugin.scaleY = plugin.height / sb.height;
        plugin.scaleX = plugin.width / sb.width;
    },
    isPlugin: function(id) {
        if (AnimationManager.pluginMap[id]) {
            return true;
        } else {
            return false;
        }
    },
    registerPlugin: function(id, plugin) {
        AnimationManager.pluginMap[id] = plugin;
        createjs.EventDispatcher.initialize(plugin.prototype);
    },
    invokePlugin: function(id, data, plugin) {
        var p, pluginMap = AnimationManager.pluginMap;
        if (!pluginMap[id]) {
            AnimationManager.addError("No plugin found for - " + id);
        } else {
            if (_.isArray(data)) {
                data.forEach(function(d) {
                    new pluginMap[id](d, plugin);
                });
            } else {
                p = new pluginMap[id](data, plugin);
            }
        }
        return p;
    },
    registerPluginObject: function(pluginObj) {
        AnimationManager.pluginObjMap[pluginObj._id] = pluginObj;
    },
    getPluginObject: function(id) {
        return AnimationManager.pluginObjMap[id];
    },
    cleanUp: function() {
        AnimationManager.pluginObjMap = {};
    }
};

AssetManager = {
    strategy: undefined,
    stageAudios: {},
    init: function(themeData, basePath) {
        AssetManager.strategy = new LoadByStageStrategy(themeData, basePath);
    },
    getAsset: function(stageId, assetId) {
        return AssetManager.strategy.getAsset(stageId, assetId);
    },
    initStage: function(stageId, nextStageId, prevStageId, cb) {
        if (nextStageId) {
            AssetManager.stopStageAudio(nextStageId);
        }
        if (prevStageId) {
            AssetManager.stopStageAudio(prevStageId);
        }
        AssetManager.strategy.initStage(stageId, nextStageId, prevStageId, cb);
    },
    destroy: function() {
        if (!_.isUndefined(AssetManager.strategy)) {
            AssetManager.strategy.destroy();
            AssetManager.strategy = undefined;
        }
        AssetManager.stageAudios = {};
    },
    stopStageAudio: function(stageId) {
        if (AssetManager.stageAudios[stageId] && AssetManager.stageAudios[stageId].length > 0) {
            AssetManager.stageAudios[stageId].forEach(function(audioAsset) {
                AudioManager.stop({
                    stageId: stageId,
                    asset: audioAsset,
                    disableTelemetry: true
                });
            });
        }
    },
    addStageAudio: function(stageId, audioId) {
        if (AssetManager.stageAudios[stageId]) {
            AssetManager.stageAudios[stageId].push(audioId);
        }
    },
    loadAsset: function(stageId, assetId, path) {
        if (AssetManager.strategy) AssetManager.strategy.loadAsset(stageId, assetId, path); else console.info("asset not loaded because AssetManager not initialised or failed to initialize.");
    },
    getManifest: function(content) {
        var manifest = {};
        manifest.media = [];
        _.each(content.stage, function(stage) {
            if (!_.isUndefined(stage.manifest) && !_.isUndefined(stage.manifest.media)) {
                if (!_.isArray(stage.manifest.media)) stage.manifest.media = [ stage.manifest.media ];
                _.each(stage.manifest.media, function(media) {
                    manifest.media.push(media);
                });
            }
        });
        return manifest;
    }
};

CommandManager = {
    commandMap: {},
    registerCommand: function(id, command) {
        CommandManager.commandMap[id] = command;
    },
    handle: function(action) {
        try {
            action.stageInstanceId = _.clone(Renderer.theme._currentScene._stageInstanceId);
            if (action.delay) {
                TimerManager.start(action);
            } else {
                var c, cId = "";
                if (this._canHandle(action)) {
                    this._setAnimationAsCommand(action);
                    this._setActionAsset(action);
                    if (_.isString(action.command)) cId = action.command.toUpperCase();
                    var command = CommandManager.commandMap[cId];
                    if (command) {
                        c = new command(action);
                    } else {
                        console.warn("No command registered with name: ", cId);
                    }
                } else {
                    console.info("action ev-if failed. So, it is not called.");
                }
            }
        } catch (e) {
            EkstepRendererAPI.logErrorEvent(e, {
                type: "asset",
                action: action.command,
                asset: action.asset,
                objectId: action.id
            });
            _.isUndefined(action) ? showToaster("error", "Command failed") : showToaster("error", action.command + ": Command failed");
            console.warn(action + "Failed due to", e);
        }
    },
    _setAnimationAsCommand: function(action) {
        if (action.type === "animation") {
            action.type = "command";
            action.command = "ANIMATE";
        }
    },
    _setDataAttributes: function(action) {
        var dataAttributes = {};
        var keys = _.keys(action);
        keys.forEach(function(key) {
            var lowerKey = key.toLowerCase();
            if (lowerKey.substring(0, 5) == "data-") {
                dataAttributes[lowerKey.replace("data-", "")] = action[key];
            }
        });
        action.dataAttributes = dataAttributes;
        action.stageId = Renderer.theme._currentStage;
    },
    _setActionAsset: function(action) {
        var plugin = PluginManager.getPluginObject(action.pluginId);
        var stage = plugin._stage;
        if (!stage || stage == null) {
            stage = plugin;
        }
        if (stage && stage._type === "stage") {
            if (action.param) {
                action.value = stage.getParam(action.param) || "";
            }
            if (action.asset || action.asset_param || action.asset_model) {
                if (action.asset_param) {
                    action.asset = stage.getParam(action.asset_param) || "";
                } else if (action.asset_model) {
                    action.asset = stage.getModelValue(action.asset_model) || "";
                }
            } else {
                action.asset = plugin._id;
            }
        }
    },
    _canHandle: function(action) {
        var handle = true;
        var plugin = PluginManager.getPluginObject(action.pluginId);
        if (action["ev-if"]) {
            var expr = action["ev-if"].trim();
            if (!(expr.substring(0, 2) == "${")) expr = "${" + expr;
            if (!(expr.substring(expr.length - 1, expr.length) == "}")) expr = expr + "}";
            handle = plugin.evaluateExpr(expr);
        }
        return handle;
    },
    displayAllHtmlElements: function(visibility) {
        var elements = jQuery("#" + Renderer.divIds.gameArea).children();
        elements.each(function() {
            if (!jQuery(this).is("canvas")) {
                if (visibility) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            }
        });
    }
};

EventManager = {
    registerEvents: function(plugin, data) {
        try {
            var events = undefined;
            if (data.events) {
                if (_.isArray(data.events)) {
                    events = [];
                    data.events.forEach(function(e) {
                        events.push.apply(events, e.event);
                    });
                } else {
                    events = data.events.event;
                }
            } else {
                events = data.event;
            }
            if (_.isArray(events)) {
                events.forEach(function(e) {
                    EventManager.registerEvent(e, plugin);
                });
            } else if (events) {
                EventManager.registerEvent(events, plugin);
            }
        } catch (e) {
            showToaster("error", "Event fails to register");
            console.warn("Event fails to register due to", e);
        }
    },
    registerEvent: function(evt, plugin) {
        var register = true;
        if (evt["ev-if"]) {
            var expr = evt["ev-if"].trim();
            var modelExpr = expr = plugin.replaceExpressions(expr);
            if (!(expr.substring(0, 2) == "${")) expr = "${" + expr;
            if (!(expr.substring(expr.length - 1, expr.length) == "}")) expr = expr + "}";
            register = plugin.evaluateExpr(expr);
            if (typeof register == "undefined" && plugin._stage) {
                register = plugin._stage.getModelValue(modelExpr);
            }
        }
        if (register) {
            plugin.events.push(evt.type);
            if (_.contains(createjs.DisplayObject._MOUSE_EVENTS, evt.type)) {
                var element = plugin._self;
                if (element) {
                    if (plugin instanceof HTMLPlugin || plugin._div) {
                        element = plugin._self.htmlElement;
                        element.style.cursor = "pointer";
                    } else {
                        element.cursor = "pointer";
                    }
                    element.addEventListener(evt.type, function(event) {
                        EventManager.processMouseTelemetry(evt, event, plugin);
                        EventManager.handleActions(evt, plugin);
                    });
                }
            } else {
                plugin.on(evt.type, function() {
                    EventManager.handleActions(evt, plugin);
                });
            }
        }
    },
    dispatchEvent: function(id, event) {
        var plugin = PluginManager.getPluginObject(id);
        if (_.contains(createjs.DisplayObject._MOUSE_EVENTS, event)) {
            plugin._self.dispatchEvent(event);
        } else {
            plugin.dispatchEvent(event);
        }
    },
    handleActions: function(evt, plugin) {
        try {
            var disableTelemetry = false;
            EventManager._setPluginId(evt.action, plugin._id);
            var unmuteActions = _.clone(evt.action);
            evt.action = EventManager._chainActions(evt.action, unmuteActions);
            if (evt.type !== "click") disableTelemetry = true;
            if (_.isArray(evt.action)) {
                var data = JSON.parse(JSON.stringify(evt.action));
                delete evt.action;
                evt.action = data;
                evt.action.forEach(function(a) {
                    a.disableTelemetry = disableTelemetry;
                    var action = _.clone(a);
                    action.pluginId = plugin._id;
                    CommandManager.handle(action);
                });
            } else if (evt.action) {
                evt.action.disableTelemetry = disableTelemetry;
                var action = _.clone(evt.action);
                action.pluginId = plugin._id;
                CommandManager.handle(action);
            }
        } catch (e) {
            _.isUndefined(evt) ? showToaster("error", "Event failed") : showToaster("error", evt.type + ": Event failed");
            EkstepRendererAPI.logErrorEvent(e, {
                type: "asset",
                objectId: evt.action.id,
                asset: evt.action.asset,
                action: evt.action ? evt.action.command : ""
            });
            console.warn("Event fails to handle due to", e);
        }
    },
    _setPluginId: function(actions, pluginId) {
        if (_.isArray(actions)) {
            actions.forEach(function(action) {
                action.pluginId = pluginId;
            });
        } else if (actions) {
            actions.pluginId = pluginId;
        }
    },
    _chainActions: function(actions, unmuteActions) {
        if (_.isArray(actions)) {
            var filter = _.filter(actions, function(action) {
                return action.with || action.after;
            });
            if (filter.length > 0) {
                var action = filter[0];
                var parentId = action.after || action.with;
                var p = _.findWhere(unmuteActions, {
                    id: parentId
                });
                if (p) {
                    if (action.after) {
                        if (!p.children) p.children = [];
                        p.children.push(action);
                    }
                    if (action.with) {
                        if (!p.siblings) p.siblings = [];
                        p.siblings.push(action);
                    }
                    actions = _.without(actions, action);
                } else {
                    console.warn("Didn't find action with id:", parentId);
                }
                delete action.after;
                delete action.with;
                return EventManager._chainActions(actions, unmuteActions);
            } else {
                return actions;
            }
        } else {
            return actions;
        }
    },
    processMouseTelemetry: function(action, event, plugin) {
        var data = {
            type: event.type,
            x: event.stageX,
            y: event.stageY
        };
        var type = TelemetryService.getMouseEventMapping()[action.type];
        EventManager.processAppTelemetry(action, type, plugin, data);
    },
    processAppTelemetry: function(action, type, plugin, data) {
        if (!plugin) {
            plugin = {
                _data: {
                    id: "",
                    asset: ""
                }
            };
        }
        if (!action) {
            action = {
                disableTelemetry: true
            };
        }
        if (action.disableTelemetry !== true) {
            if (type) {
                var id = plugin._data.id || plugin._data.asset;
                if (!id) {
                    id = action.asset;
                }
                if (!id) {
                    var actionObj = action.action;
                    if (_.isArray(actionObj) && actionObj.length >= 1) {
                        actionObj = actionObj[0];
                    }
                    if (actionObj) id = actionObj.asset;
                }
                if (!id) {
                    id = plugin._type || "none";
                }
                if (id) {
                    var stageId = Renderer.theme ? Renderer.theme._currentStage : "";
                    if (data) data.stageId = stageId;
                    TelemetryService.interact(type, id, type, data ? data : {
                        stageId: stageId
                    });
                }
            }
        }
    }
};

OverlayManager = {
    _constants: {
        overlayNext: "overlayNext",
        overlayPrevious: "overlayPrevious",
        overlaySubmit: "overlaySubmit",
        overlayMenu: "overlayMenu",
        overlayReload: "overlayReload",
        overlayGoodJob: "overlayGoodJob",
        overlayTryAgain: "overlayTryAgain"
    },
    _eventsArray: [],
    _reloadInProgress: false,
    _contentConfig: {},
    _stageConfig: {},
    init: function() {
        this.clean();
        this._reloadInProgress = false;
        this._eventsArray = [ this._constants.overlayNext, this._constants.overlayPrevious, this._constants.overlaySubmit, this._constants.overlayMenu, this._constants.overlayReload, this._constants.overlayGoodJob, this._constants.overlayTryAgain ];
        this.setContentConfig();
        EventBus.addEventListener("actionNavigateSkip", this.skipAndNavigateNext, this);
        EventBus.addEventListener("actionNavigateNext", this.navigateNext, this);
        EventBus.addEventListener("actionNavigatePrevious", this.navigatePrevious, this);
        EventBus.addEventListener("actionDefaultSubmit", this.defaultSubmit, this);
        EventBus.addEventListener("actionReload", this.actionReload, this);
        if (_.isUndefined(EventBus.listeners.actionReplay) || _.isArray(EventBus.listeners.actionReplay) && EventBus.listeners.actionReplay.length == 0) EventBus.addEventListener("actionReplay", this.actionReplay, this);
    },
    setStageData: function() {
        if (!_.isUndefined(Renderer.theme)) {
            EventBus.dispatch("sceneEnter", Renderer.theme._currentScene);
        }
    },
    setContentConfig: function() {
        var evtLenth = this._eventsArray.length;
        for (i = 0; i < evtLenth; i++) {
            var eventName = this._eventsArray[i];
            var val;
            if (!_.isUndefined(Renderer.theme) && !_.isUndefined(Renderer.theme._currentScene)) {
                val = Renderer.theme.getParam(eventName);
            }
            if (!_.isUndefined(val)) {
                this._contentConfig[eventName] = val;
            }
        }
        this.setStageConfig();
    },
    setStageConfig: function() {
        this._stageConfig = _.clone(this._contentConfig);
        var evtLenth = this._eventsArray.length;
        for (i = 0; i < evtLenth; i++) {
            var eventName = this._eventsArray[i];
            var val;
            if (!_.isUndefined(Renderer.theme) && !_.isUndefined(Renderer.theme._currentScene)) {
                val = Renderer.theme._currentScene.getParam(eventName);
            }
            if (_.isUndefined(val)) {
                if (!_.isUndefined(this._contentConfig[eventName])) val = this._contentConfig[eventName];
            }
            if (!_.isUndefined(val)) this._stageConfig[eventName] = val;
        }
        this.setStageData();
        this.handleNext();
        this.handlePrevious();
        this.handleSubmit();
    },
    handleNext: function() {
        var eventName = this._constants.overlayNext;
        var val = this._stageConfig[eventName];
        EventBus.dispatch(eventName, val);
        this.handleEcmlElements(eventName, val);
    },
    handlePrevious: function() {
        if (_.isUndefined(Renderer.theme._currentScene)) return;
        var eventName = this._constants.overlayPrevious;
        var val = this._stageConfig[eventName];
        var navigateToStage = this.getNavigateTo("previous");
        if (val == "on") {
            if (_.isUndefined(navigateToStage)) {
                val = "disable";
                if (Renderer.theme._currentScene.isItemScene() && Renderer.theme._currentScene._stageController.hasPrevious()) {
                    val = "enable";
                }
            } else {
                val = "enable";
            }
        }
        EventBus.dispatch(eventName, val);
        this.handleEcmlElements(eventName, val);
    },
    handleSubmit: function() {
        var eventName = this._constants.overlaySubmit;
        var val = this._stageConfig[eventName];
        if (!_.isUndefined(Renderer.theme) && _.isUndefined(Renderer.theme.getParam(eventName)) && _.isUndefined(Renderer.theme._currentScene.getParam(eventName))) {
            var globalConfig = EkstepRendererAPI.getGlobalConfig();
            val = globalConfig.overlay.showSubmit ? "on" : "off";
        }
        if (!_.isUndefined(Renderer.theme) && !_.isUndefined(Renderer.theme._currentScene) && Renderer.theme._currentScene.isItemScene()) {
            if (val == "on") {
                var enableEval = Renderer.theme._currentScene.isReadyToEvaluate();
                val = enableEval === true ? "enable" : "disable";
            }
            EventBus.dispatch(eventName, val);
            this.handleEcmlElements(eventName, val);
        } else {
            EventBus.dispatch(eventName, "off");
        }
    },
    showFeeback: function(showOverlayGoodJob) {
        var returnVal = true;
        if (showOverlayGoodJob) {
            returnVal = this._stageConfig.overlayGoodJob == "off" ? false : true;
            this.showGoodJobFb(returnVal);
        } else {
            returnVal = this._stageConfig.overlayTryAgain == "off" ? false : true;
            this.showTryAgainFb(returnVal);
        }
        return returnVal;
    },
    showGoodJobFb: function(value) {
        if (value == true) {
            AudioManager.play({
                stageId: Renderer.theme._currentStage,
                asset: "goodjob_sound"
            });
            EventBus.dispatch(this._constants.overlayGoodJob, "on");
        } else {
            EventBus.dispatch(this._constants.overlayGoodJob, "off");
        }
    },
    showTryAgainFb: function(value) {
        if (value == true) {
            AudioManager.play({
                stageId: Renderer.theme._currentStage,
                asset: "tryagain_sound"
            });
            EventBus.dispatch(this._constants.overlayTryAgain, "on");
        } else {
            EventBus.dispatch(this._constants.overlayTryAgain, "off");
        }
    },
    navigateNext: function() {
        try {
            if (_.isUndefined(Renderer.theme) || _.isUndefined(Renderer.theme._currentScene)) return;
            var isItemScene = Renderer.theme._currentScene.isItemScene();
            if (isItemScene) {
                this.defaultSubmit();
                return;
            }
            this.skipAndNavigateNext({
                target: "next"
            });
        } catch (e) {
            showToaster("error", "Current scene having some issue");
            EkstepRendererAPI.logErrorEvent(e, {
                severity: "fatal",
                type: "content",
                action: "transitionTo"
            });
            console.warn("Fails to navigate to next due to", e);
        }
    },
    skipAndNavigateNext: function(param) {
        try {
            var actionType = param ? param.target : "skip";
            this.clean();
            var navigateTo = this.getNavigateTo("next");
            if ("undefined" == typeof navigateTo) {
                if (_.isUndefined(Renderer.theme._currentScene)) return;
                var isItemScene = Renderer.theme._currentScene.isItemScene();
                if (isItemScene && !_.isUndefined(Renderer.theme._currentScene._stageController) && Renderer.theme._currentScene._stageController.hasNext()) {
                    this.defaultNavigation(actionType, navigateTo);
                } else {
                    this.moveToEndPage();
                }
            } else {
                this.defaultNavigation(actionType, navigateTo);
            }
        } catch (e) {
            showToaster("error", "Current scene having some issue");
            EkstepRendererAPI.logErrorEvent(e, {
                severity: "fatal",
                type: "content",
                action: "transitionTo"
            });
            console.warn("Fails to skip and navigate due to", e);
        }
    },
    moveToEndPage: function() {
        console.info("redirecting to endpage.");
        Renderer.theme._currentStage = undefined;
        EkstepRendererAPI.dispatchEvent("renderer:telemetry:end");
        EkstepRendererAPI.dispatchEvent("renderer:content:end");
        var stage = Renderer.theme._currentScene;
        Renderer.theme.setParam(stage.getStagestateKey(), stage._currentState);
        EkstepRendererAPI.removeHtmlElements();
        AudioManager.stopAll();
    },
    clean: function() {
        EventBus.removeEventListener("actionNavigateSkip", this.skipAndNavigateNext, this);
        EventBus.removeEventListener("actionNavigateNext", this.navigateNext, this);
        EventBus.removeEventListener("actionNavigatePrevious", this.navigatePrevious, this);
        EventBus.removeEventListener("actionDefaultSubmit", this.defaultSubmit, this);
    },
    reset: function() {
        this.clean();
        this._contentConfig = {};
        this._stageConfig = {};
    },
    navigatePrevious: function() {
        try {
            if (_.isUndefined(Renderer.theme) || _.isUndefined(Renderer.theme._currentScene)) return;
            var navigateToStage = this.getNavigateTo("previous");
            if (_.isUndefined(navigateToStage)) {
                if (!(Renderer.theme._currentScene.isItemScene() && Renderer.theme._currentScene._stageController.hasPrevious())) {
                    var rendererData = EkstepRendererAPI.getContentData(), currentStage = getCurrentStageId();
                    if (rendererData.startStage === currentStage) contentExitCall();
                    return;
                }
            }
            var navigateTo = this.getNavigateTo("previous");
            if (_.isUndefined(Renderer.theme._currentScene)) return;
            this.defaultNavigation("previous", navigateTo);
        } catch (e) {
            EkstepRendererAPI.logErrorEvent(e, {
                severity: "fatal",
                type: "content",
                action: "transitionTo"
            });
            showToaster("error", "Stage having some issue");
            console.warn("Fails to navigate to previous due to", e);
        }
    },
    showOrHideEcmlElement: function(id, showEle) {
        var plugin = PluginManager.getPluginObject(id);
        if (plugin) {
            showEle == "off" ? plugin.show() : plugin.hide();
        }
    },
    handleEcmlElements: function(eventName, val) {
        if (!_.isUndefined(Renderer.theme) && !_.isUndefined(Renderer.theme._currentScene)) {
            var stage_data = Renderer.theme.getStagesToPreLoad(Renderer.theme._currentScene._data);
            var nextStageId = stage_data.next;
            var prevStageId = stage_data.prev;
        }
        switch (eventName) {
          case "overlayNext":
            this.showOrHideEcmlElement("next", val);
            this.showOrHideEcmlElement("nextContainer", val);
            break;

          case "overlayPrevious":
            this.showOrHideEcmlElement("previous", val);
            this.showOrHideEcmlElement("previousContainer", val);
            break;

          case "overlaySubmit":
            this.showOrHideEcmlElement("validate", val);
            break;

          case "overlayMenu":
            break;

          case "overlayReload":
            break;

          case "overlayGoodJob":
            break;

          case "overlayTryAGain":
            break;

          default:
            console.log("Default case got called..");
            break;
        }
    },
    getNavigateTo: function(navType) {
        var stageParams = [];
        var stageId = undefined;
        if (!_.isUndefined(Renderer.theme) && !_.isUndefined(Renderer.theme._currentScene) && !_.isEmpty(Renderer.theme._currentScene._data.param)) {
            stageParams = _.isArray(Renderer.theme._currentScene._data.param) ? Renderer.theme._currentScene._data.param : [ Renderer.theme._currentScene._data.param ];
            var navParam = _.findWhere(stageParams, {
                name: navType
            });
            if (navParam) stageId = navParam.value;
        }
        return stageId;
    },
    defaultSubmit: function() {
        var action = {
            type: "command",
            command: "eval",
            asset: Renderer.theme._currentStage,
            pluginId: Renderer.theme._currentStage
        };
        action.success = "correct_answer";
        action.failure = "wrong_answer";
        CommandManager.handle(action);
    },
    defaultNavigation: function(navType, navigateTo) {
        var action = {
            asset: Renderer.theme._id,
            command: "transitionTo",
            duration: "100",
            ease: "linear",
            effect: "fadeIn",
            type: "command",
            pluginId: Renderer.theme._id,
            value: navigateTo
        };
        navType = navType === "skip" ? "next" : navType;
        action.transitionType = navType;
        CommandManager.handle(action);
    },
    actionReload: function() {
        if (this._reloadInProgress) {
            return;
        }
        var currentStage = Renderer.theme._currentStage, plugin;
        this._reloadInProgress = true;
        setTimeout(function() {
            plugin = PluginManager.getPluginObject(currentStage);
            if (plugin) plugin.reload({
                type: "command",
                command: "reload",
                duration: "100",
                ease: "linear",
                effect: "fadeIn",
                asset: currentStage
            });
        }, 500);
        TelemetryService.interact("TOUCH", "gc_reload", "TOUCH", {
            stageId: currentStage
        });
    },
    actionReplay: function(data) {
        var version = TelemetryService.getGameVer();
        if (GlobalContext.currentContentId && version) {
            startTelemetry(GlobalContext.currentContentId, version);
        }
        EkstepRendererAPI.removeHtmlElements();
        Renderer.theme.reRender();
    }
};

LoadByStageStrategy = Class.extend({
    MAX_CONNECTIONS: 50,
    assetMap: {},
    spriteSheetMap: {},
    commonAssets: [],
    templateAssets: [],
    loaders: {},
    commonLoader: undefined,
    templateLoader: undefined,
    stageManifests: {},
    init: function(themeData, basePath) {
        var instance = this;
        createjs.Sound.registerPlugins([ createjs.CordovaAudioPlugin, createjs.WebAudioPlugin, createjs.HTMLAudioPlugin ]);
        createjs.Sound.alternateExtensions = [ "mp3" ];
        this.destroy();
        this.loadAppAssets();
        if (!_.isUndefined(themeData.manifest) && !_.isUndefined(themeData.manifest.media)) {
            if (!_.isArray(themeData.manifest.media)) themeData.manifest.media = [ themeData.manifest.media ];
            themeData.manifest.media.forEach(function(media) {
                if (media && media.src) {
                    if (media.src.substring(0, 4) != "http") {
                        if (isbrowserpreview) {
                            var globalConfig = EkstepRendererAPI.getGlobalConfig();
                            media.src = globalConfig.host + media.src;
                        } else {
                            media.src = basePath + media.src;
                        }
                    }
                    if (createjs.CordovaAudioPlugin.isSupported()) {
                        if (media.type !== "sound" && media.type !== "audiosprite") {
                            media.src = "file:///" + media.src;
                        }
                    }
                    if (media.type == "json") {
                        instance.commonAssets.push(_.clone(media));
                    } else if (media.type == "spritesheet") {
                        var imgId = media.id + "_image";
                        instance.commonAssets.push({
                            id: imgId,
                            src: media.src,
                            type: "image"
                        });
                        media.images = [];
                        var animations = {};
                        if (media.animations) {
                            for (k in media.animations) {
                                animations[k] = JSON.parse(media.animations[k]);
                            }
                        }
                        media.animations = animations;
                        instance.spriteSheetMap[media.id] = media;
                    } else {
                        if (media.type == "audiosprite") {
                            if (!_.isArray(media.data.audioSprite)) media.data.audioSprite = [ media.data.audioSprite ];
                        }
                        if (media.preload === "true" || media.preload === true) {
                            instance.commonAssets.push(_.clone(media));
                        }
                        instance.assetMap[media.id] = media;
                    }
                }
            });
        } else {
            console.log("==== manifest media not defined ====");
        }
        var stages = themeData.stage;
        if (!_.isArray(stages)) stages = [ stages ];
        stages.forEach(function(stage) {
            instance.stageManifests[stage.id] = [];
            AssetManager.stageAudios[stage.id] = [];
            instance.populateAssets(stage, stage.id, stage.preload, themeData.startStage);
        });
        instance.loadCommonAssets();
        var templates = themeData.template;
        if (!_.isArray(templates)) templates = [ templates ];
        templates.forEach(function(template) {
            instance.populateTemplateAssets(template);
        });
        instance.loadTemplateAssets();
    },
    loadAppAssets: function() {
        var localPath = "undefined" == typeof cordova ? "" : "file:///android_asset/www/";
        this.commonAssets.push({
            id: "goodjob_sound",
            src: localPath + "assets/sounds/goodjob.mp3"
        });
        this.commonAssets.push({
            id: "tryagain_sound",
            src: localPath + "assets/sounds/letstryagain.mp3"
        });
    },
    populateAssets: function(data, stageId, preload, startStageId) {
        var instance = this;
        for (k in data) {
            var plugins = data[k];
            if (!_.isArray(plugins)) plugins = [ plugins ];
            if (PluginManager.isPlugin(k) && k == "g" || k == "manifest") {
                plugins.forEach(function(plugin) {
                    instance.populateAssets(plugin, stageId, preload, startStageId);
                });
            } else {
                plugins.forEach(function(plugin) {
                    if (!_.isNull(plugin)) {
                        var assetId = plugin.asset || plugin.audio || plugin.assetId;
                        if (assetId) {
                            var asset = instance.assetMap[assetId];
                            if (asset) {
                                if (preload === true && stageId !== startStageId) {
                                    instance.commonAssets.push(_.clone(asset));
                                }
                                instance.stageManifests[stageId].push(_.clone(asset));
                            }
                        }
                    }
                });
            }
        }
    },
    populateTemplateAssets: function(data) {
        var instance = this;
        for (k in data) {
            var plugins = data[k];
            if (!_.isArray(plugins)) plugins = [ plugins ];
            if (PluginManager.isPlugin(k) && k == "g") {
                plugins.forEach(function(plugin) {
                    instance.populateTemplateAssets(plugin);
                });
            } else {
                plugins.forEach(function(plugin) {
                    if (plugin && plugin.asset) {
                        var asset = instance.assetMap[plugin.asset];
                        if (asset) {
                            instance.templateAssets.push(_.clone(asset));
                        }
                    }
                });
            }
        }
    },
    getAsset: function(stageId, assetId) {
        var asset = undefined;
        if (this.loaders[stageId]) asset = this.loaders[stageId].getResult(assetId);
        if (!asset) asset = this.commonLoader.getResult(assetId);
        if (!asset) asset = this.templateLoader.getResult(assetId);
        if (!asset) asset = this.spriteSheetMap[assetId];
        if (!asset) {
            if (this.assetMap[assetId]) {
                console.error("Asset not found. Returning - " + this.assetMap[assetId].src);
                return this.assetMap[assetId].src;
            } else console.error('"' + assetId + '" Asset not found. Please check index.ecml.');
            EkstepRendererAPI.logErrorEvent({
                message: "Asset not found. Please check index.ecml"
            }, {
                type: "content",
                severity: "error",
                action: "play",
                asset: assetId,
                objectId: assetId
            });
        }
        return asset;
    },
    initStage: function(stageId, nextStageId, prevStageId, cb) {
        var instance = this;
        this.loadStage(stageId, cb);
        var deleteStages = _.difference(_.keys(instance.loaders), [ stageId, nextStageId, prevStageId ]);
        if (deleteStages.length > 0) {
            deleteStages.forEach(function(stageId) {
                instance.destroyStage(stageId);
            });
        }
        if (nextStageId) {
            instance.loadStage(nextStageId);
        }
        if (prevStageId) {
            instance.loadStage(prevStageId);
        }
        instance.loaders = _.pick(instance.loaders, stageId, nextStageId, prevStageId);
    },
    loadStage: function(stageId, callback) {
        var instance = this;
        if (!instance.loaders[stageId]) {
            var mediaList = JSON.parse(JSON.stringify(instance.stageManifests[stageId]));
            mediaList = _.uniq(mediaList, function(media) {
                return media.assetId || media.id;
            });
            mediaList = instance.filterMedia(mediaList, "video");
            if (_.isArray(mediaList) && mediaList.length > 0) {
                var loader = this._createLoader();
                loader.stageLoaded = false;
                loader.on("complete", function() {
                    loader.stageLoaded = true;
                }, null, true);
                loader.on("error", function(evt) {
                    console.error("StageLoader Asset preload error", evt);
                });
                loader.setMaxConnections(instance.MAX_CONNECTIONS);
                loader.installPlugin(createjs.Sound);
                loader.loadManifest(mediaList, true);
                instance.loaders[stageId] = loader;
            }
        }
        this.handleStageCallback(stageId, callback);
    },
    handleStageCallback: function(stageId, cb) {
        var instance = this;
        if (cb) {
            if (!_.isUndefined(this.loaders[stageId]) && !this.loaders[stageId].stageLoaded) {
                this.loaders[stageId].on("complete", function() {
                    instance.loaders[stageId].stageLoaded = true;
                    var data = Renderer.theme && Renderer.theme._currentStage ? Renderer.theme._currentStage : stageId;
                    if (stageId == data) {
                        EventBus.dispatch(data + "_assetsLoaded");
                        cb();
                    }
                }, null, true);
            } else {
                var data = Renderer.theme && Renderer.theme._currentStage ? Renderer.theme._currentStage : stageId;
                if (stageId == data) {
                    EventBus.dispatch(data + "_assetsLoaded");
                    cb();
                }
            }
        }
    },
    filterMedia: function(list, mediaType) {
        list = _.filter(list, function(obj) {
            return obj.type != mediaType;
        });
        return list;
    },
    loadCommonAssets: function() {
        var loader = this._createLoader();
        loader.setMaxConnections(this.MAX_CONNECTIONS);
        loader.installPlugin(createjs.Sound);
        this.commonAssets = this.filterMedia(this.commonAssets, "video");
        loader.loadManifest(this.commonAssets, true);
        loader.on("error", function(evt) {
            console.error("CommonLoader - asset preload error", evt);
        });
        this.commonLoader = loader;
    },
    loadTemplateAssets: function() {
        var loader = this._createLoader();
        loader.setMaxConnections(this.MAX_CONNECTIONS);
        this.templateAssets = this.filterMedia(this.templateAssets, "video");
        loader.installPlugin(createjs.Sound);
        loader.loadManifest(this.templateAssets, true);
        loader.on("error", function(evt) {
            console.error("TemplateLoader - asset preload error", evt);
        });
        this.templateLoader = loader;
    },
    loadAsset: function(stageId, assetId, path, cb) {
        if (_.isUndefined(assetId) || _.isUndefined(path)) {
            console.warn("Asset can't be loaded: AssetId - " + assetId + ",  Path - " + path);
            return;
        }
        var loader = this.loaders[stageId];
        if (loader) {
            loader.installPlugin(createjs.Sound);
            loader.on("complete", function() {
                loader.stageLoaded = true;
                if (cb) {
                    cb();
                }
            }, this);
            loader.loadFile({
                id: assetId,
                src: path
            });
            loader.stageLoaded = false;
        } else {
            loader = this._createLoader();
            var instance = this;
            loader.on("complete", function(event) {
                if (_.isUndefined(instance.loaders)) {
                    instance.loaders = {};
                }
                instance.loaders[stageId] = event.target;
                instance.loaders[stageId].stageLoaded = true;
                if (cb) {
                    cb();
                }
            }, this);
            loader.on("error", function(evt) {
                console.error("AssetLoader - asset preload error", evt);
            });
            loader.loadFile({
                id: assetId,
                src: path
            });
            loader.stageLoaded = false;
        }
    },
    destroy: function() {
        var instance = this;
        for (k in instance.loaders) {
            instance.destroyStage(k);
        }
        instance.commonAssets = [];
        instance.assetMap = {};
        instance.loaders = {};
        instance.stageManifests = {};
        try {
            createjs.Sound.removeAllSounds();
        } catch (err) {}
    },
    destroyStage: function(stageId) {
        if (this.loaders[stageId]) {
            this.loaders[stageId].destroy();
            AssetManager.stageAudios[stageId].forEach(function(audioAsset) {
                AudioManager.destroy(stageId, audioAsset);
            });
        }
    },
    _createLoader: function() {
        return "undefined" == typeof cordova ? new createjs.LoadQueue(true, null, true) : new createjs.LoadQueue(false);
    },
    isStageAssetsLoaded: function(stageId) {
        var manifest = JSON.parse(JSON.stringify(this.stageManifests[stageId]));
        if (!_.isUndefined(this.loaders[stageId]) && this.loaders[stageId].stageLoaded) {
            return true;
        } else if (_.isUndefined(this.loaders[stageId])) {
            return true;
        }
        return false;
    }
});

RecorderManager = {
    mediaInstance: undefined,
    recording: false,
    appDataDirectory: undefined,
    mediaFiles: [],
    _autostop: {
        default_success: "rec_stopped",
        default_failure: "rec_stop_failed",
        method: undefined,
        action: undefined
    },
    _root: undefined,
    init: function() {
        document.addEventListener("deviceready", function() {
            window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
                RecorderManager._root = fileSystem.root;
            }, function(e) {
                console.log("[ERROR] Problem setting up root filesystem for running! Error to follow.");
                console.log(JSON.stringify(e));
            });
            RecorderManager.appDataDirectory = cordova.file.externalDataDirectory || cordova.file.dataDirectory;
        });
    },
    startRecording: function(action) {
        AudioManager.stopAll();
        var plugin = PluginManager.getPluginObject(action.asset);
        var stagePlugin = plugin._stage || plugin;
        var stageId = stagePlugin._id;
        var path = RecorderManager._getFilePath(stageId);
        if (!RecorderManager.recording) {
            speech.startRecording(path, function(response) {
                if ("success" == response.status && action.success) {
                    stagePlugin.dispatchEvent(action.success);
                } else if ("error" == response.status && action.failure) {
                    stagePlugin.dispatchEvent(action.failure);
                }
            });
            RecorderManager._setAutostopAction(action);
            RecorderManager._autostop.method = setTimeout(function() {
                RecorderManager.stopRecording(RecorderManager._autostop.action);
            }, action.timeout ? action.timeout : 1e4);
        }
        RecorderManager.recording = true;
    },
    stopRecording: function(action) {
        if (RecorderManager.recording == true) {
            speech.stopRecording(function(response) {
                RecorderManager.recording = false;
                if ("success" == response.status) {
                    RecorderManager._cleanRecording();
                }
                if ("undefined" != typeof action && action.asset) {
                    var plugin = PluginManager.getPluginObject(action.asset);
                    var stagePlugin = plugin._stage || plugin;
                    var stageId = stagePlugin._id;
                    if ("success" == response.status) {
                        var currentRecId = "current_rec";
                        AssetManager.loadAsset(stageId, currentRecId, response.filePath);
                        AudioManager.destroy(stageId, currentRecId);
                        if (action.success) stagePlugin.dispatchEvent(action.success);
                    } else if ("error" == response.status && action.failure) {
                        stagePlugin.dispatchEvent(action.failure);
                    }
                }
            });
        }
    },
    processRecording: function(action) {
        var plugin = PluginManager.getPluginObject(action.asset);
        var stagePlugin = plugin._stage || plugin;
        var lineindex = stagePlugin.evaluateExpr(action.dataAttributes.lineindex);
        speech.processRecording(lineindex, null, function(response) {
            if ("success" == response.status && response.result) {
                console.info("Processed recording result:", JSON.stringify(response));
                if (response.result.totalScore == 1) {
                    if (action.success) {
                        stagePlugin.dispatchEvent(action.success);
                    }
                } else {
                    if (action.failure) {
                        stagePlugin.dispatchEvent(action.failure);
                    }
                }
            } else {
                console.info("Error while processing audio:", JSON.stringify(response));
                if (action.failure) {
                    stagePlugin.dispatchEvent(action.failure);
                }
            }
        });
    },
    _getFilePath: function(stageId) {
        var currentDate = new Date();
        var path = "";
        if (RecorderManager.appDataDirectory) path = path + RecorderManager.appDataDirectory;
        if (GlobalContext && GlobalContext.user && GlobalContext.user.uid) path = path + GlobalContext.user.uid + "_";
        if (TelemetryService && TelemetryService._gameData && TelemetryService._gameData.id) path = path + TelemetryService._gameData.id + "_";
        path = path + stageId + "_" + currentDate.getTime() + ".wav";
        RecorderManager.mediaFiles.push(path);
        return path;
    },
    _getTimeoutEventName: function(status, action) {
        var eventName = "";
        if ("undefined" != typeof action["timeout-" + status]) {
            eventName = action["timeout-" + status];
        } else {
            if (Renderer.theme._currentScene.appEvents.indexOf(RecorderManager._autostop["default_" + status]) > -1) {
                eventName = RecorderManager._autostop["default_" + status];
            } else {
                console.error("Invalid stopRecord events for timeout:", Renderer.theme._currentScene.appEvents);
            }
        }
        return eventName;
    },
    _setAutostopAction: function(startAction) {
        var stopAction = _.clone(startAction);
        stopAction["success"] = RecorderManager._getTimeoutEventName("success", stopAction);
        stopAction["failure"] = RecorderManager._getTimeoutEventName("failure", stopAction);
        RecorderManager._autostop.action = stopAction;
    },
    _cleanRecording: function() {
        clearTimeout(RecorderManager._autostop.method);
        RecorderManager._autostop.method = undefined;
        RecorderManager._autostop.action = undefined;
    }
};

TimerManager = {
    instances: {},
    start: function(action) {
        var delay = action.delay || 0;
        var stageId = Renderer.theme._currentStage;
        var instance = setTimeout(function() {
            if (stageId == Renderer.theme._currentStage) {
                CommandManager.handle(_.omit(action, "delay"));
            }
        }, delay);
        console.info("action: " + (action.command || action.type) + " delayed by " + action.delay + "ms.");
        if (TimerManager.instances[stageId]) {
            TimerManager.instances[stageId].push({
                timeout: instance,
                action: action
            });
        } else {
            TimerManager.instances[stageId] = [ {
                timeout: instance,
                action: action
            } ];
        }
    },
    stop: function() {},
    pause: function() {},
    resume: function() {},
    stopAll: function(stageId) {
        var timoutInsts = TimerManager.instances[stageId];
        if (timoutInsts && _.isArray(timoutInsts)) {
            timoutInsts.forEach(function(inst) {
                clearTimeout(inst.timeout);
            });
            delete TimerManager.instances[stageId];
        }
    },
    destroy: function() {
        var instances = TimerManager.instances;
        for (stageId in instances) {
            TimerManager.stopAll(stageId);
        }
        TimerManager.instances = {};
    }
};

var DataGenerator = {
    _loaderMap: {},
    loadData: function(baseDir, type, id, controller, dataType) {
        var folder = type;
        dataType ? dataType = dataType.toLowerCase() : dataType = "json";
        var filename = id + "." + dataType;
        var fullPath = baseDir + "/" + folder + "/" + filename;
        jQuery.getJSON(fullPath, function(data) {
            DataGenerator._onLoad(data, controller);
        }).fail(function() {
            console.error("error while fetching json: " + fullPath);
        });
    },
    _onLoad: function(data, controller) {
        controller.onLoad(data);
    }
};

var ItemDataGenerator = {
    _loaderMap: {},
    loadData: function(baseDir, type, id, controller) {
        var folder = type;
        var filename = id + ".json";
        var fullPath = baseDir + "/" + folder + "/" + filename;
        jQuery.getJSON(fullPath, function(data) {
            ItemDataGenerator._onLoad(data, controller);
        }).fail(function() {
            console.error("error while fetching json: " + fullPath);
        });
    },
    _onLoad: function(data, controller) {
        var model = ItemDataGenerator._getItems(data);
        data = _.omit(data, "items");
        controller.onLoad(data, model);
    },
    _getItems: function(data) {
        var list = [];
        if (_.isObject(data)) {
            var total_items = data.total_items;
            var item_sets = data.item_sets;
            var items = data.items;
            var shuffle = true;
            var optionShuffle = true;
            if (typeof data.shuffle != "undefined") shuffle = data.shuffle;
            if (typeof data.optionShuffle != "undefined") optionShuffle = data.optionShuffle;
            if (item_sets && items) {
                var cumulativeIndex = 0;
                item_sets.forEach(function(map, setidx) {
                    if (items[map.id]) {
                        list = ItemDataGenerator._addItems(map.id, map.count, items, list, shuffle, optionShuffle, cumulativeIndex);
                        cumulativeIndex += items[map.id].length;
                    }
                });
                if (total_items && list.length > total_items) {
                    list = _.first(list, total_items);
                }
            }
        }
        return list;
    },
    _addItems: function(id, count, items, list, shuffle, optionShuffle, cumulativeIndex) {
        var set = items[id];
        if (_.isArray(set)) {
            var indexArr = [];
            for (var i = 0; i < set.length; i++) indexArr[i] = i;
            if (set.length < count) count = set.length;
            var pick = [];
            var qindex = 0;
            for (var i = 0; i < count; i++) {
                if (shuffle) {
                    var randNum = _.random(0, indexArr.length - 1);
                    pick[i] = set[indexArr[randNum]];
                    qindex = indexArr[randNum];
                    indexArr[randNum] = indexArr[indexArr.length - 1];
                    indexArr.splice(indexArr.length - 1, 1);
                } else {
                    pick[i] = set[indexArr[i]];
                    qindex = i;
                }
                var item = pick[i];
                if (item.type.toLowerCase() == "mcq" || item.type.toLowerCase() == "mmcq") {
                    if (optionShuffle) item.options = _.shuffle(item.options);
                    ItemDataGenerator._registerResValues(item.options);
                } else if (item.type.toLowerCase() == "mtf") {
                    if (optionShuffle) item.rhs_options = _.shuffle(item.rhs_options);
                    ItemDataGenerator._registerResValues(item.lhs_options);
                    ItemDataGenerator._registerResValues(item.rhs_options);
                }
                pick[i].qindex = cumulativeIndex + qindex + 1;
            }
            list = _.union(list, pick);
        }
        return list;
    },
    _registerResValues: function(options) {
        _.each(options, function(option, index) {
            if (typeof option.value.resvalue == "undefined") {
                option.value.resvalue = option.value.asset || option.value.text || option.value.image || option.value.count || option.value.audio || "option" + index;
            }
            option.value.resindex = index;
        });
    }
};

var Command = Class.extend({
    _name: undefined,
    _methodName: undefined,
    _action: undefined,
    _isPluginAction: true,
    _isAsync: false,
    init: function(action) {
        this._action = action;
        CommandManager._setDataAttributes(action);
        this._action.cb = this._callBack.bind(this);
        this.invoke(this._action);
        this._invokeRelatedActions("siblings");
        if (!this._isAsync) {
            this._action.cb({
                status: "success"
            });
        }
    },
    getPluginObject: function() {
        var plugin = PluginManager.getPluginObject(this._action.asset);
        if (this._action.parent === true && plugin && plugin._parent) {
            plugin = plugin._parent;
        }
        if (!plugin) {
            plugin = this._action.pluginObj;
        }
        return plugin;
    },
    invoke: function(action) {
        var plugin = this.getPluginObject();
        plugin[this._methodName](action);
    },
    _invokeRelatedActions: function(relation) {
        if (!_.isUndefined(this._action.stageInstanceId) && this._action.stageInstanceId != Renderer.theme._currentScene._stageInstanceId) {
            return;
        }
        if (this._action[relation] && this._action[relation].length > 0) {
            _.each(this._action[relation], function(action) {
                CommandManager.handle(action);
            });
        }
    },
    _callBack: function(response) {
        if (!_(Renderer.theme).isUndefined()) {
            if ("undefined" != typeof response && "success" == response.status) {
                this._invokeRelatedActions("children");
            }
        }
    }
});

var AnimateCommand = Command.extend({
    _name: "ANIMATE",
    _isAsync: true,
    invoke: function(action) {
        AnimationManager.handle(action);
    }
});

CommandManager.registerCommand("ANIMATE", AnimateCommand);

var BlurCommand = Command.extend({
    _name: "BLUR",
    _methodName: "blur"
});

CommandManager.registerCommand("BLUR", BlurCommand);

var CustomCommand = Command.extend({
    _name: "CUSTOM",
    _isPluginAction: false,
    invoke: function(action) {
        var plugin = this.getPluginObject();
        if (plugin && action.invoke) plugin[action.invoke](action);
    }
});

CommandManager.registerCommand("CUSTOM", CustomCommand);

var DefaultNextCommand = Command.extend({
    _name: "DEFAULTNEXT",
    _methodName: "defaultNext",
    invoke: function(action) {
        console.log("Theme : action", action);
        EventBus.dispatch("actionNavigateNext", action);
    }
});

CommandManager.registerCommand("DEFAULTNEXT", DefaultNextCommand);

var EraseCommand = Command.extend({
    _name: "ERASE",
    _methodName: "clear",
    initCommand: function(action) {}
});

CommandManager.registerCommand("ERASE", EraseCommand);

var EvalCommand = Command.extend({
    _name: "EVAL",
    _methodName: "evaluate",
    invoke: function(action) {
        var plugin = this.getPluginObject();
        plugin.evaluate(action);
    }
});

CommandManager.registerCommand("EVAL", EvalCommand);

var EventCommand = Command.extend({
    _name: "EVENT",
    _isPluginAction: false,
    initCommand: function(action) {},
    invoke: function(action) {
        EventManager.dispatchEvent(action.asset, action.value);
    }
});

CommandManager.registerCommand("EVENT", EventCommand);

var ExternalCommand = Command.extend({
    _name: "EXTERNAL",
    _isPluginAction: false,
    invoke: function(action) {
        action.href ? window.open(action.href, "_system") : startApp(action.app);
    }
});

CommandManager.registerCommand("EXTERNAL", ExternalCommand);

var HideCommand = Command.extend({
    _name: "HIDE",
    _methodName: "hide",
    initCommand: function(action) {}
});

CommandManager.registerCommand("HIDE", HideCommand);

var HideHTMLElementsCommand = Command.extend({
    _name: "HIDEHTMLELEMENTS",
    _isPluginAction: false,
    invoke: function(action) {
        CommandManager.displayAllHtmlElements(false);
    }
});

CommandManager.registerCommand("HIDEHTMLELEMENTS", HideHTMLElementsCommand);

var PauseCommand = Command.extend({
    _name: "PAUSE",
    _methodName: "pause",
    invoke: function(action) {
        var plugin = this.getPluginObject();
        if ("undefined" == typeof plugin) {
            plugin = AudioManager;
        }
        plugin[this._methodName](action);
    }
});

CommandManager.registerCommand("PAUSE", PauseCommand);

var PlayCommand = Command.extend({
    _name: "PLAY",
    _methodName: "play",
    _isAsync: true,
    invoke: function(action) {
        var plugin = this.getPluginObject();
        if ("undefined" == typeof plugin) {
            plugin = AudioManager;
        }
        plugin[this._methodName](action);
    }
});

CommandManager.registerCommand("PLAY", PlayCommand);

var ProcessRecordCommand = Command.extend({
    _name: "PROCESSRECORD",
    _isPluginAction: false,
    invoke: function(action) {
        RecorderManager.processRecording(action);
    }
});

CommandManager.registerCommand("PROCESSRECORD", ProcessRecordCommand);

var RefreshCommand = Command.extend({
    _name: "REFRESH",
    _methodName: "refresh",
    initCommand: function(action) {}
});

CommandManager.registerCommand("REFRESH", RefreshCommand);

var ReloadCommand = Command.extend({
    _name: "RELOAD",
    _methodName: "reload",
    initCommand: function(action) {}
});

CommandManager.registerCommand("RELOAD", ReloadCommand);

var ResetCommand = Command.extend({
    _name: "RESET",
    _isPluginAction: false,
    invoke: function(action) {
        var c = ControllerManager.instanceMap[action.cType + "." + action.controller];
        if ("undefined" != typeof c) {
            c.reset();
        } else {
            console.warn("No controller find with id:", action.controller);
        }
    }
});

CommandManager.registerCommand("RESET", ResetCommand);

var RestartCommand = Command.extend({
    _name: "RESTART",
    _methodName: "restart",
    initCommand: function(action) {}
});

CommandManager.registerCommand("RESTART", RestartCommand);

var SetCommand = Command.extend({
    _name: "SET",
    invoke: function(action) {
        var plugin = this.getPluginObject();
        if (plugin && plugin._type == "set") {
            plugin.setParamValue(action);
        } else if (plugin) {
            plugin.setPluginParamValue(action);
        }
    }
});

CommandManager.registerCommand("SET", SetCommand);

var ShowCommand = Command.extend({
    _name: "SHOW",
    _methodName: "show",
    initCommand: function(action) {}
});

CommandManager.registerCommand("SHOW", ShowCommand);

var ShowHTMLElementsCommand = Command.extend({
    _name: "SHOWHTMLELEMENTS",
    _isPluginAction: false,
    invoke: function(action) {
        CommandManager.displayAllHtmlElements(true);
    }
});

CommandManager.registerCommand("SHOWHTMLELEMENTS", ShowHTMLElementsCommand);

var StartGenieCommand = Command.extend({
    _name: "STARTGENIE",
    _isPluginAction: false,
    invoke: function(action) {
        if (TelemetryService._gameData.id != packageName && TelemetryService._gameData.id != packageNameDelhi) {
            TelemetryService.end(TelemetryService._gameData.id);
            setTimeout(function() {
                exitApp();
            }, 500);
        } else {
            exitApp();
        }
    }
});

CommandManager.registerCommand("STARTGENIE", StartGenieCommand);

var StartRecordCommand = Command.extend({
    _name: "STARTRECORD",
    _isPluginAction: false,
    invoke: function(action) {
        RecorderManager.startRecording(action);
    }
});

CommandManager.registerCommand("STARTRECORD", StartRecordCommand);

var StopCommand = Command.extend({
    _name: "STOP",
    _stopMethod: "stop",
    _stopAllMethod: "stopAll",
    invoke: function(action) {
        var plugin = this.getPluginObject();
        if ("undefined" == typeof plugin) {
            plugin = AudioManager;
        }
        if (action.sound === true) {
            AudioManager[this._stopAllMethod](action);
        } else {
            plugin[this._stopMethod](action);
        }
    }
});

CommandManager.registerCommand("STOP", StopCommand);

var StopRecordCommand = Command.extend({
    _name: "STOPRECORD",
    _isPluginAction: false,
    invoke: function(action) {
        RecorderManager.stopRecording(action);
    }
});

CommandManager.registerCommand("STOPRECORD", StopRecordCommand);

var TogglePlayCommand = Command.extend({
    _name: "TOGGLEPLAY",
    _methodName: "togglePlay",
    _isAsync: true,
    invoke: function(action) {
        var plugin = this.getPluginObject();
        if ("undefined" == typeof plugin) {
            plugin = AudioManager;
        }
        plugin[this._methodName](action);
    }
});

CommandManager.registerCommand("TOGGLEPLAY", TogglePlayCommand);

var ToggleShadowCommand = Command.extend({
    _name: "TOGGLESHADOW",
    _methodName: "toggleShadow",
    initCommand: function(action) {}
});

CommandManager.registerCommand("TOGGLESHADOW", ToggleShadowCommand);

var ToggleShowCommand = Command.extend({
    _name: "TOGGLESHOW",
    _methodName: "toggleShow",
    initCommand: function(action) {}
});

CommandManager.registerCommand("TOGGLESHOW", ToggleShowCommand);

var TransitionToCommand = Command.extend({
    _name: "TRANSITIONTO",
    _methodName: "transitionTo",
    initCommand: function(action) {}
});

CommandManager.registerCommand("TRANSITIONTO", TransitionToCommand);

var UnblurCommand = Command.extend({
    _name: "UNBLUR",
    _methodName: "unblur",
    initCommand: function(action) {}
});

CommandManager.registerCommand("UNBLUR", UnblurCommand);

var WindowEventCommand = Command.extend({
    _name: "WINDOWEVENT",
    _isPluginAction: false,
    invoke: function(action) {
        var mimeType = GlobalContext.previousContentMimeType ? GlobalContext.previousContentMimeType : GlobalContext.currentContentMimeType;
        if (GlobalContext.previousContentMimeType || COLLECTION_MIMETYPE == mimeType) {
            window.location.hash = "#/content/list/" + GlobalContext.previousContentId;
        } else if (CONTENT_MIMETYPES.indexOf(mimeType) > -1) {
            window.location.hash = "#/show/content/" + GlobalContext.currentContentId;
        } else {
            console.warn("Invalid mimeType to handle WINDOWEVENT:", mimeType);
        }
    }
});

CommandManager.registerCommand("WINDOWEVENT", WindowEventCommand);

var HTMLPlugin = Plugin.extend({
    _div: undefined,
    _isContainer: false,
    _render: true
});

AnimationPlugin = Class.extend({
    _data: undefined,
    init: function(data, plugin) {
        this._data = data;
        this._id = data.id || _.uniqueId("animation");
        this.initPlugin(data, plugin);
        AnimationManager.registerPluginObject(this);
    },
    initPlugin: function(data, plugin) {
        PluginManager.addError("Subclasses of AnimationPlugin should implement this function");
    },
    animate: function(plugin) {
        PluginManager.addError("Subclasses of AnimationPlugin should implement play()");
    }
});

var LayoutPlugin = Plugin.extend({
    _isContainer: true,
    _render: true,
    _cells: [],
    _cellsCount: 0,
    _iterateModel: undefined,
    initPlugin: function(data) {
        this._cells = [];
        this._cellsCount = 0;
        this._self = new createjs.Container();
        var dims = this.relativeDims();
        this._self.x = dims.x;
        this._self.y = dims.y;
        if (_.isUndefined(data.iterate) && _.isUndefined(data.count)) {
            console.warn("LayoutPlugin require iterate or count", data);
            return;
        }
        if ("undefined" != typeof data.count) this._cellsCount = data.count;
        var model = data.iterate;
        model = this._iterateModel = this.replaceExpressions(model);
        var dataObjs = this._stage.getModelValue(model);
        if (dataObjs) {
            var length = dataObjs.length;
            this._cellsCount = length < this._cellsCount || this._cellsCount == 0 ? length : this._cellsCount;
        }
        this.generateLayout();
        this.renderLayout();
        this._enableEvents = false;
    },
    generateLayout: function() {
        PluginManager.addError("Subclasses of layout plugin should implement generateLayout()");
    },
    renderLayout: function() {
        var instance = this;
        var index = 0;
        this._cells.forEach(function(data) {
            var cellECML = instance.getInnerECML();
            var cellEvents = instance.getCellEvents();
            instance._stage._templateVars[instance._data["var"]] = instance._iterateModel + "[" + index + "]";
            instance._addCellAttributes(data);
            if (Object.assign) Object.assign(data, cellECML);
            var resolvedEvents = instance.resolveActionModelValues(cellEvents);
            if (Object.assign) Object.assign(data, resolvedEvents);
            PluginManager.invoke("g", data, instance, instance._stage, instance._theme);
            index++;
        });
    },
    _addCellAttributes: function(data) {
        data.padX = this._data.padX || 0;
        data.padY = this._data.padY || 0;
        data.snapX = this._data.snapX;
        data.snapY = this._data.snapY;
        data.stroke = this._data.stroke;
        data["stroke-width"] = this._data["stroke-width"];
        data.events = this._data.events;
        data.event = this._data.event;
        if (this._data.shadow) {
            data.shadowColor = this._data.shadow;
        }
        if (this._data.highlight) {
            data.highlight = this._data._highlight;
        }
        if (_.isFinite(this._data.blur)) {
            data.blur = this._data.blur;
        }
        if (_.isFinite(this._data.offsetX)) {
            data.offsetX = this._data.offsetX;
        }
        if (_.isFinite(this._data.offsetY)) {
            data.offsetY = this._data.offsetY;
        }
        if (this._data.opacity) data.opacity = this._data.opacity;
    },
    getCellEvents: function() {
        var events = undefined;
        var instance = this;
        if (instance._data.events) {
            if (_.isArray(instance._data.events)) {
                events = [];
                instance._data.events.forEach(function(e) {
                    events.push.apply(events, e.event);
                });
            } else {
                events = instance._data.events.event;
            }
        } else {
            events = instance._data.event;
        }
        return events;
    },
    resolveActionModelValues: function(events) {
        var returnEvents = undefined;
        var instance = this;
        var updateAction = function(tempAction) {
            var action = _.clone(tempAction);
            if (action.asset_model) {
                var model = action.asset_model;
                var val = instance._stage.getModelValue(model);
                action.asset = val;
                delete action.asset_model;
            }
            if (action["ev-model"]) {
                var model = action["ev-model"];
                var val = instance._stage.getModelValue(model);
                action["value"] = val;
                action["param-value"] = val;
                delete action["ev-model"];
            }
            return action;
        };
        var updateEvent = function(evt) {
            var returnEvent = {
                type: evt.type
            };
            if (_.isArray(evt.action)) {
                returnEvent.action = [];
                evt.action.forEach(function(action) {
                    returnEvent.action.push(updateAction(action));
                });
            } else if (evt.action) {
                returnEvent.action = updateAction(evt.action);
            }
            return returnEvent;
        };
        if (_.isArray(events)) {
            returnEvents = {
                events: [],
                hitArea: true
            };
            events.forEach(function(e) {
                returnEvents.events.push(updateEvent(e));
            });
        } else if (events) {
            returnEvents = {
                hitArea: true
            };
            returnEvents.event = updateEvent(events);
        }
        return returnEvents;
    }
});

var ShapePlugin = Plugin.extend({
    _type: "shape",
    _isContainer: false,
    _render: true,
    initPlugin: function(data) {
        this._self = new createjs.Shape();
        var graphics = this._self.graphics;
        var dims = this.relativeDims();
        if (data.fill) {
            graphics.beginFill(data.fill);
        }
        if (data.stroke) {
            graphics.beginStroke(data.stroke);
        }
        if (data["strokeWidth"]) {
            data["stroke-width"] = data["strokeWidth"];
        }
        if (data["stroke-width"]) {
            graphics.setStrokeStyle(data["stroke-width"]);
        }
        var radius = data.radius || 10;
        data.type = data.type ? data.type.toLowerCase() : "rect";
        switch (data.type) {
          case "rect":
            graphics.dr(0, 0, dims.w, dims.h);
            if (data.hitArea) {
                var hit = new createjs.Shape();
                hit.graphics.beginFill("#000").r(0, 0, dims.w, dims.h);
                this._self.hitArea = hit;
            }
            break;

          case "roundrect":
            graphics.drawRoundRect(0, 0, dims.w, dims.h, radius);
            if (data.hitArea) {
                var hit = new createjs.Shape();
                hit.graphics.beginFill("#000").r(0, 0, dims.w, dims.h);
                this._self.hitArea = hit;
            }
            break;

          case "circle":
            graphics.dc(0, 0, dims.r || dims.w);
            if (data.hitArea) {
                var hit = new createjs.Shape();
                hit.graphics.beginFill("#000").dc(0, 0, dims.w);
                this._self.hitArea = hit;
            }
            break;

          case "ellipse":
            graphics.de(0, 0, dims.w, dims.h);
            if (data.hitArea) {
                var hit = new createjs.Shape();
                hit.graphics.beginFill("#000").de(0, 0, dims.w, dims.h);
                this._self.hitArea = hit;
            }
            break;

          default:
            this.drawPolygon(data, dims, graphics);
        }
        graphics.cp();
        this._self.x = dims.x;
        this._self.y = dims.y;
        if (!_.isUndefined(data.opacity)) this._self.alpha = data.opacity;
    },
    drawBorder: function() {},
    drawPolygon: function(data, dims, graphics) {
        var points = this.getPoints(data);
        if (!points) {
            console.log("Unsupported shape");
            return;
        }
        var end = points[points.length - 1];
        var x = dims.w * (end.x || 0) / 100;
        var y = dims.h * (end.y || 0) / 100;
        graphics.moveTo(x, y);
        points.forEach(function(point) {
            x = dims.w * (point.x || 0) / 100;
            y = dims.h * (point.y || 0) / 100;
            graphics.lineTo(x, y);
        });
    },
    getPoints: function(data) {
        var shape = data.type;
        var sides = data.sides;
        var corners = data.corners;
        if (shape != "trapezium") {
            if (sides) {
                shape = sides + "polygon";
            } else if (corners) {
                shape = corners + "star";
            }
        }
        var points;
        if (this.shapes.hasOwnProperty(shape)) {
            points = this.shapes[shape];
        } else if (data.config.__cdata) {
            try {
                var config = JSON.parse(data.config.__cdata);
                points = config.points;
            } catch (err) {
                console.log("Points array not available");
            }
        }
        return points;
    },
    shapes: {
        "4star": [ {
            x: 100,
            y: 50
        }, {
            x: 62.7,
            y: 62.7
        }, {
            x: 50,
            y: 100
        }, {
            x: 37.3,
            y: 62.7
        }, {
            x: 0,
            y: 50
        }, {
            x: 37.3,
            y: 37.3
        }, {
            x: 50,
            y: 0
        }, {
            x: 62.7,
            y: 37.3
        } ],
        "5star": [ {
            x: 50,
            y: 0
        }, {
            x: 60.9,
            y: 35
        }, {
            x: 100,
            y: 35
        }, {
            x: 67.6,
            y: 60
        }, {
            x: 79.4,
            y: 100
        }, {
            x: 50,
            y: 72
        }, {
            x: 20.6,
            y: 100
        }, {
            x: 32.4,
            y: 60
        }, {
            x: 0,
            y: 35
        }, {
            x: 39.1,
            y: 35
        } ],
        "6star": [ {
            x: 50,
            y: 100
        }, {
            x: 35,
            y: 76
        }, {
            x: 0,
            y: 75
        }, {
            x: 20,
            y: 50
        }, {
            x: 0,
            y: 25
        }, {
            x: 35,
            y: 24
        }, {
            x: 50,
            y: 0
        }, {
            x: 65,
            y: 24
        }, {
            x: 100,
            y: 25
        }, {
            x: 80,
            y: 50
        }, {
            x: 100,
            y: 75
        }, {
            x: 65,
            y: 76
        } ],
        "7star": [ {
            x: 100,
            y: 59.8
        }, {
            x: 74,
            y: 68
        }, {
            x: 72.9,
            y: 100
        }, {
            x: 50.8,
            y: 80
        }, {
            x: 29.6,
            y: 100
        }, {
            x: 27.1,
            y: 69.4
        }, {
            x: 0,
            y: 62.5
        }, {
            x: 20.6,
            y: 44.1
        }, {
            x: 10,
            y: 19.9
        }, {
            x: 36.2,
            y: 23.3
        }, {
            x: 48.6,
            y: 0
        }, {
            x: 62.3,
            y: 22.6
        }, {
            x: 88.2,
            y: 17.7
        }, {
            x: 79,
            y: 42.5
        } ],
        "8star": [ {
            x: 100,
            y: 50
        }, {
            x: 82.3,
            y: 63.4
        }, {
            x: 85.4,
            y: 85.4
        }, {
            x: 63.4,
            y: 82.3
        }, {
            x: 50,
            y: 100
        }, {
            x: 36.6,
            y: 82.3
        }, {
            x: 14.6,
            y: 85.4
        }, {
            x: 17.7,
            y: 63.4
        }, {
            x: 0,
            y: 50
        }, {
            x: 17.7,
            y: 36.6
        }, {
            x: 14.6,
            y: 14.6
        }, {
            x: 36.6,
            y: 17.7
        }, {
            x: 50,
            y: 0
        }, {
            x: 63.4,
            y: 17.7
        }, {
            x: 85.4,
            y: 14.6
        }, {
            x: 82.3,
            y: 36.6
        } ],
        "9star": [ {
            x: 100,
            y: 40.2
        }, {
            x: 84.6,
            y: 55.3
        }, {
            x: 93.8,
            y: 74
        }, {
            x: 73.1,
            y: 76.3
        }, {
            x: 68.1,
            y: 100
        }, {
            x: 50.8,
            y: 85
        }, {
            x: 33.9,
            y: 100
        }, {
            x: 28.1,
            y: 77.3
        }, {
            x: 7.3,
            y: 75.9
        }, {
            x: 15.7,
            y: 56.8
        }, {
            x: 0,
            y: 42.4
        }, {
            x: 19.3,
            y: 33.2
        }, {
            x: 17,
            y: 12.4
        }, {
            x: 37.3,
            y: 17.4
        }, {
            x: 48.9,
            y: 0
        }, {
            x: 61.3,
            y: 16.9
        }, {
            x: 81.3,
            y: 11
        }, {
            x: 79.9,
            y: 31.8
        } ],
        "10star": [ {
            x: 100,
            y: 65.5
        }, {
            x: 78.3,
            y: 70.6
        }, {
            x: 79.4,
            y: 90.5
        }, {
            x: 60.8,
            y: 83.3
        }, {
            x: 50,
            y: 100
        }, {
            x: 39.2,
            y: 83.3
        }, {
            x: 20.6,
            y: 90.5
        }, {
            x: 21.7,
            y: 70.6
        }, {
            x: 0,
            y: 65.5
        }, {
            x: 15,
            y: 50
        }, {
            x: 0,
            y: 34.5
        }, {
            x: 21.7,
            y: 29.4
        }, {
            x: 20.6,
            y: 9.5
        }, {
            x: 39.2,
            y: 16.7
        }, {
            x: 50,
            y: 0
        }, {
            x: 60.8,
            y: 16.7
        }, {
            x: 79.4,
            y: 9.5
        }, {
            x: 78.3,
            y: 29.4
        }, {
            x: 100,
            y: 34.5
        }, {
            x: 85,
            y: 50
        } ],
        "3polygon": [ {
            x: 50,
            y: 0
        }, {
            x: 100,
            y: 100
        }, {
            x: 0,
            y: 100
        } ],
        "4polygon": [ {
            x: 50,
            y: 0
        }, {
            x: 100,
            y: 50
        }, {
            x: 50,
            y: 100
        }, {
            x: 0,
            y: 50
        } ],
        "5polygon": [ {
            x: 50,
            y: 0
        }, {
            x: 100,
            y: 34.5
        }, {
            x: 79.4,
            y: 100
        }, {
            x: 20.6,
            y: 100
        }, {
            x: 0,
            y: 34.5
        } ],
        "6polygon": [ {
            x: 100,
            y: 50
        }, {
            x: 75,
            y: 100
        }, {
            x: 25,
            y: 100
        }, {
            x: 0,
            y: 50
        }, {
            x: 25,
            y: 0
        }, {
            x: 75,
            y: 0
        } ],
        "7polygon": [ {
            x: 50,
            y: 0
        }, {
            x: 89.1,
            y: 18.8
        }, {
            x: 100,
            y: 61.1
        }, {
            x: 71.7,
            y: 100
        }, {
            x: 28.3,
            y: 100
        }, {
            x: 0,
            y: 61.1
        }, {
            x: 10.9,
            y: 18.8
        } ],
        "8polygon": [ {
            x: 100,
            y: 69.1
        }, {
            x: 69.1,
            y: 100
        }, {
            x: 30.9,
            y: 100
        }, {
            x: 0,
            y: 69.1
        }, {
            x: 0,
            y: 30.9
        }, {
            x: 30.9,
            y: 0
        }, {
            x: 69.1,
            y: 0
        }, {
            x: 100,
            y: 30.9
        } ],
        "9polygon": [ {
            x: 50,
            y: 0
        }, {
            x: 82.1,
            y: 11.7
        }, {
            x: 100,
            y: 41.3
        }, {
            x: 93.3,
            y: 75
        }, {
            x: 67.1,
            y: 100
        }, {
            x: 32.9,
            y: 100
        }, {
            x: 6.7,
            y: 75
        }, {
            x: 0,
            y: 41.3
        }, {
            x: 17.9,
            y: 11.7
        } ],
        "10polygon": [ {
            x: 100,
            y: 50
        }, {
            x: 90.5,
            y: 79.4
        }, {
            x: 65.5,
            y: 100
        }, {
            x: 34.5,
            y: 100
        }, {
            x: 9.5,
            y: 79.4
        }, {
            x: 0,
            y: 50
        }, {
            x: 9.5,
            y: 20.6
        }, {
            x: 34.5,
            y: 0
        }, {
            x: 65.5,
            y: 0
        }, {
            x: 90.5,
            y: 20.6
        } ],
        trapezium: [ {
            x: 25,
            y: 0
        }, {
            x: 75,
            y: 0
        }, {
            x: 100,
            y: 100
        }, {
            x: 0,
            y: 100
        } ]
    }
});

PluginManager.registerPlugin("shape", ShapePlugin);

var AudioPlugin = Plugin.extend({
    _type: "audio",
    _isContainer: false,
    _id: undefined,
    _state: "stop",
    _render: false,
    initPlugin: function(data) {
        this._id = data.asset;
    },
    play: function(action) {
        AudioManager.play(action);
    },
    togglePlay: function(action) {
        AudioManager.togglePlay(action);
    },
    pause: function(action) {
        AudioManager.pause(action);
    },
    stop: function(action) {
        if (action.sound === true) {
            AudioManager.stopAll(action);
        } else {
            AudioManager.stop(action);
        }
    },
    stopAll: function(action) {
        AudioManager.stopAll(action);
    }
});

PluginManager.registerPlugin("audio", AudioPlugin);

var ContainerPlugin = Plugin.extend({
    _type: "g",
    _isContainer: true,
    _render: true,
    initPlugin: function(data) {
        this._self = new createjs.Container();
        var dims = this.relativeDims();
        this._self.x = dims.x;
        this._self.y = dims.y;
        if (data.hitArea) {
            var hit = new createjs.Shape();
            hit.graphics.beginFill("#000").r(0, 0, dims.w, dims.h);
            this._self.hitArea = hit;
        }
        if (data.rotate) {
            this.rotation(data);
        }
        this.invokeChildren(data, this, this._stage, this._theme);
    },
    refresh: function() {
        if (_.isArray(this._childIds)) {
            for (var i = 0; i < this._childIds.length; i++) {
                var childPlugin = PluginManager.getPluginObject(this._childIds[i]);
                if (childPlugin) {
                    childPlugin.refresh();
                }
            }
        }
    }
});

PluginManager.registerPlugin("g", ContainerPlugin);

var DivPlugin = HTMLPlugin.extend({
    _type: "div",
    initPlugin: function(data) {
        this._input = undefined;
        var dims = this.relativeDims();
        var div = document.getElementById(data.id);
        if (div) {
            jQuery("#" + data.id).remove();
        }
        div = document.createElement("div");
        if (data.style) div.setAttribute("style", data.style);
        div.id = data.id;
        div.style.width = dims.w + "px";
        div.style.height = dims.h + "px";
        div.style.position = "absolute";
        var instance = this;
        var parentDiv = document.getElementById(Renderer.divIds.gameArea);
        parentDiv.insertBefore(div, parentDiv.childNodes[0]);
        var textStr = "";
        if (data.$t || data.__text) {
            textStr = data.$t || data.__text;
        } else if (data.model) {
            textStr = this._stage.getModelValue(data.model) || "";
        } else if (data.param) {
            textStr = this.getParam(data.param.trim()) || "";
        }
        var innerHtml = data.__cdata || textStr;
        jQuery("#" + data.id).append(data.__cdata);
        this._div = div;
        this._self = new createjs.DOMElement(div);
        this._self.x = dims.x;
        this._self.y = dims.y;
        this.registerEvents(data.id);
    },
    registerEvents: function(id) {
        var instance = this;
        jQuery("#" + id).children().each(function() {
            var data = jQuery(this).data();
            if (data && data.event) {
                jQuery(this).click(function(event) {
                    event.preventDefault();
                    instance._triggerEvent(data.event);
                    console.info("Triggered event ", data.event);
                });
            }
        });
    },
    _triggerEvent: function(event) {
        var plugin = PluginManager.getPluginObject(Renderer.theme._currentStage);
        event = new createjs.Event(event);
        if (plugin) plugin.dispatchEvent(event);
    }
});

PluginManager.registerPlugin("div", DivPlugin);

var EmbedPlugin = Plugin.extend({
    _type: "embed",
    _isContainer: false,
    _render: true,
    initPlugin: function(data) {
        var instance = this;
        if (data.template || data["template-name"]) {
            var templateId = data["template-name"] ? data["template-name"] : this._stage.getTemplate(data.template);
            var template = this._theme._templateMap[templateId];
            if (template) {
                for (var k in data) {
                    if (k === "template" || k === "template-name") continue;
                    if (k.substring(0, 4) == "var-") {
                        this._stage._templateVars[k.substring(4)] = data[k];
                    } else if (k.substring(0, 3) == "ev-") {
                        var expr = this.replaceExpressions(data[k]);
                        this._stage._templateVars[k.substring(3)] = expr;
                    } else {
                        this._stage._templateVars[k] = data[k];
                    }
                }
                this._self = new createjs.Container();
                data.w = data.w || 100;
                data.h = data.h || 100;
                var dims = this.relativeDims();
                this._self.x = dims.x;
                this._self.y = dims.y;
                this.invokeChildren(template, this, this._stage, this._theme);
            }
        }
    },
    refresh: function() {
        if (_.isArray(this._childIds)) {
            for (var i = 0; i < this._childIds.length; i++) {
                var childPlugin = PluginManager.getPluginObject(this._childIds[i]);
                if (childPlugin) {
                    childPlugin.refresh();
                }
            }
        }
    },
    replaceExpressions: function(model) {
        var arr = [];
        var idx = 0;
        var nextIdx = model.indexOf("${", idx);
        var endIdx = model.indexOf("}", idx + 1);
        while (nextIdx != -1 && endIdx != -1) {
            var expr = model.substring(nextIdx, endIdx + 1);
            arr.push(expr);
            idx = endIdx;
            nextIdx = model.indexOf("${", idx);
            endIdx = model.indexOf("}", idx + 1);
        }
        if (arr.length > 0) {
            for (var i = 0; i < arr.length; i++) {
                var val = this.evaluateExpr(arr[i]);
                model = model.replace(arr[i], val);
            }
        }
        return model;
    }
});

PluginManager.registerPlugin("embed", EmbedPlugin);

var HotspotPlugin = ShapePlugin.extend({
    _type: "hotspot",
    _isContainer: false,
    _render: true,
    initPlugin: function(data) {
        data.fill = undefined;
        data.hitArea = true;
        this._super(data);
    }
});

PluginManager.registerPlugin("hotspot", HotspotPlugin);

var ImagePlugin = Plugin.extend({
    _type: "image",
    _isContainer: false,
    _render: true,
    initPlugin: function(data) {
        var instance = this;
        var asset = "";
        if (data.asset) {
            if (data.asset === "validate" || data.asset === "next" || data.asset === "previous") {
                data.visible = false;
            }
            asset = data.asset;
        } else if (data.model) {
            asset = this._stage.getModelValue(data.model);
        } else if (data.param) {
            asset = this.getParam(data.param);
        }
        if (_.isEmpty(asset)) {
            this._render = false;
            console.warn("ImagePlugin: Asset not found", data);
        } else {
            var assetSrc = this._theme.getAsset(asset);
            var img;
            if (_.isString(assetSrc)) {
                img = new Image();
                img.crossOrigin = "Anonymous";
                img.src = assetSrc;
            } else {
                img = assetSrc;
            }
            var s = new createjs.Bitmap(img);
            this._self = s;
            var dims = this.relativeDims();
            if (_.isString(assetSrc)) {
                this._self.visible = false;
                AssetManager.strategy.loadAsset(this._stage._data.id, asset, assetSrc, function() {
                    Renderer.update = true;
                    setTimeout(function() {
                        var sb = s.getBounds();
                        if (sb) {
                            instance.setScale();
                        }
                        dims = instance.alignDims();
                        s.x = dims.x;
                        s.y = dims.y;
                        instance._self.visible = !_.isUndefined(instance._data.visible) ? instance._data.visible : true;
                        Renderer.update = true;
                    }, 100);
                });
            } else {
                var sb = s.getBounds();
                if (sb) {
                    this.setScale();
                }
            }
            dims = this.alignDims();
            s.x = dims.x;
            s.y = dims.y;
            Renderer.update = true;
        }
    },
    alignDims: function() {
        var parentDims = this._parent.dimensions();
        var dims = this._dimensions;
        var align = this._data.align ? this._data.align.toLowerCase() : "";
        var valign = this._data.valign ? this._data.valign.toLowerCase() : "";
        if (align == "left") dims.x = 0; else if (align == "right") dims.x = parentDims.w - dims.w; else if (align == "center") dims.x = (parentDims.w - dims.w) / 2;
        if (valign == "top") dims.y = 0; else if (valign == "bottom") dims.y = parentDims.h - dims.h; else if (valign == "middle") dims.y = (parentDims.h - dims.h) / 2;
        return this._dimensions;
    },
    refresh: function() {
        var asset = "";
        if (this._data.model) {
            asset = this._stage.getModelValue(this._data.model);
        } else if (this._data.param) {
            asset = this.getParam(this._data.param);
        } else {
            asset = this._data.asset;
        }
        if (asset && this._theme && this._self) {
            var image = this._theme.getAsset(asset);
            this._self.image = image;
            Renderer.update = true;
        }
    }
});

PluginManager.registerPlugin("image", ImagePlugin);

var InputPlugin = HTMLPlugin.extend({
    _type: "input",
    _input: undefined,
    initPlugin: function(data) {
        this._input = undefined;
        var controller = this._stage._stageController;
        var identifier = controller.getModelValue("identifier");
        if (!_.isUndefined(controller)) {
            plugindata = this.getState(controller._model[controller._index].type);
            if (!_.isUndefined(plugindata)) {
                controller._model[controller._index].model = _.isEmpty(plugindata) ? controller._model[controller._index].model : plugindata;
            }
        } else {
            console.warn("there is no FTB item");
        }
        var fontsize = data.fontsize || "1.6em";
        var fontweight = data.weight || "normal";
        var color = data.color || "#000000";
        var background = data.fill || "white";
        var font = data.font || "Arial";
        var border = data.stroke || "#000000";
        data.stroke = "";
        var dims = this.relativeDims();
        var input = document.getElementById(data.id);
        if (input) {
            jQuery("#" + data.id).remove();
        }
        input = document.createElement("input");
        input.id = data.id;
        input.type = data.type;
        input.style.top = "-1000px";
        input.style.width = dims.w + "px";
        input.style.height = dims.h + "px";
        input.style.minWidth = dims.w + "px";
        input.style.minHeight = dims.h + "px";
        input.style.setProperty("font-size", fontsize, "important");
        input.style.setProperty("font-weight", fontweight, "important");
        input.style.setProperty("font-family", font, "important");
        input.style.setProperty("color", color, "important");
        input.style.setProperty("background-color", background, "important");
        input.style.setProperty("border-color", border, "important");
        input.className = data.class;
        input.style.display = "none";
        var instance = this;
        var val;
        if (data.model) {
            var model = data.model;
            val = this._stage.getModelValue(model);
        } else if (data.param) {
            val = this._stage.params[data.param.trim()];
        }
        input.value = val || "";
        var div = document.getElementById("gameArea");
        div.insertBefore(input, div.childNodes[0]);
        this._input = input;
        this._self = new createjs.DOMElement(input);
        this._self.x = dims.x;
        this._self.y = dims.y + 1e3;
        this._theme.inputs.push(data.id);
        this._stage._inputs.push(this);
        var instance = this;
        $("#" + data.id).on("change", function() {
            instance.updateState(true);
        });
        $("#" + data.id).on("click", function(event) {
            var telemetryEdata = {
                type: event.type,
                x: event.pageX,
                y: event.pageY,
                itemId: identifier,
                optionTag: "FTB"
            };
            EventManager.processAppTelemetry({}, "TOUCH", instance, telemetryEdata);
        });
        instance.updateState(false);
    },
    setModelValue: function() {
        if (this._data.model) {
            var instance = this;
            var model = this._data.model;
            this._stage.setModelValue(model, this._input.value);
        }
    },
    updateState: function(isStateChanged) {
        this.setModelValue();
        var controller = this._stage._stageController;
        if (!_.isUndefined(controller)) {
            var cModel = controller._model[controller._index];
            this.setState(cModel.type, cModel.model, isStateChanged);
        } else {
            console.warn("There is no ctrl in this stage");
            this.setState(this._data.id, this._input.value, isStateChanged);
        }
    }
});

PluginManager.registerPlugin("input", InputPlugin);

var MCQPlugin = Plugin.extend({
    _type: "mcq",
    _isContainer: true,
    _render: true,
    _multi_select: false,
    _options: [],
    _controller: undefined,
    _shadow: "#0470D8",
    _blur: 30,
    _offsetX: 0,
    _offsetY: 0,
    _highlight: "#E89241",
    initPlugin: function(data) {
        this._multi_select = false;
        this._options = [];
        this._shadow = "#0470D8";
        this._blur = 30;
        this._offsetX = 0;
        this._offsetY = 0;
        var model = data.model;
        if (model) {
            var controller = this._stage.getController(model);
            var plugindata = this.getState(this._type);
            if (!_.isUndefined(plugindata)) {
                controller._model[controller._index].options = _.isEmpty(plugindata) ? controller._model[controller._index].options : plugindata;
            }
            if (controller) {
                this.updateState(controller, false);
                this._controller = controller;
                this._multi_select = data.multi_select;
                if (typeof this._multi_select == "undefined" || this._multi_select == null) {
                    this._multi_select = false;
                }
                this._data.x = this._parent._data.x;
                this._data.y = this._parent._data.y;
                this._data.w = this._parent._data.w;
                this._data.h = this._parent._data.h;
                this._self = new createjs.Container();
                var dims = this.relativeDims();
                this._self.x = dims.x;
                this._self.y = dims.y;
                if (data.shadow) {
                    this._shadow = data.shadow;
                    data.shadow = undefined;
                }
                if (data.highlight) {
                    this._highlight = data.highlight;
                }
                if (_.isFinite(data.blur)) {
                    this._blur = data.blur;
                }
                if (_.isFinite(data.offsetX)) {
                    this._offsetX = data.offsetX;
                }
                if (_.isFinite(data.offsetY)) {
                    this._offsetY = data.offsetY;
                }
                this._multi_select = this.isMultiSelect();
                this.invokeChildren(data, this, this._stage, this._theme);
            }
        }
    },
    isMultiSelect: function() {
        var ansLength = 0;
        var options = this._controller ? this._controller.getModelValue("options") : undefined;
        if (options) {
            ansLength = _.filter(options, function(option) {
                return option.answer == true;
            }).length;
        }
        return ansLength > 1 ? true : false;
    },
    selectOption: function(option) {
        var controller = this._controller;
        if (!this._multi_select) {
            this._options.forEach(function(o) {
                if (o._index != option._index && o.hasShadow()) {
                    o.removeShadow();
                    controller.setModelValue(o._model, false, "selected");
                }
            });
        }
        var val = undefined;
        if (option) {
            val = option.toggleShadow();
            controller.setModelValue(option._model, val, "selected");
        }
        this.updateState(controller, true);
        Renderer.update = true;
        return val;
    },
    updateState: function(controller, isStateChanged) {
        if (!_.isUndefined(controller._model)) {
            var model = controller._model[controller._index];
            this.setState(model.type, model.options, isStateChanged);
        }
    }
});

PluginManager.registerPlugin("mcq", MCQPlugin);

var MTFPlugin = Plugin.extend({
    _type: "mtf",
    _isContainer: true,
    _render: true,
    _lhs_options: [],
    _rhs_options: [],
    _force: false,
    _controller: undefined,
    initPlugin: function(data) {
        this._lhs_options = [];
        this._rhs_options = [];
        this._force = false;
        var model = data.model;
        if (model) {
            var controller = this._stage.getController(model);
            var plugindata = this.getState(this._type);
            if (!_.isUndefined(plugindata)) {
                controller._model[controller._index].rhs_options = _.isEmpty(plugindata) ? controller._model[controller._index].rhs_options : plugindata;
            }
            if (controller) {
                this.updateState(controller, false);
                this._controller = controller;
                this._force = data.force;
                if (typeof this._force == "undefined" || this._force == null) {
                    this._force = false;
                }
                this._data.x = this._parent._data.x;
                this._data.y = this._parent._data.y;
                this._data.w = this._parent._data.w;
                this._data.h = this._parent._data.h;
                this._self = new createjs.Container();
                var dims = this.relativeDims();
                this._self.x = dims.x;
                this._self.y = dims.y;
                this.invokeChildren(data, this, this._stage, this._theme);
            }
        }
    },
    getLhsOption: function(index) {
        var option;
        this._lhs_options.forEach(function(opt) {
            if (opt._index == index) {
                option = opt;
            }
        });
        return option;
    },
    setAnswer: function(rhsOption, lhsIndex) {
        this._controller.setModelValue(rhsOption._model, lhsIndex, "selected");
    },
    setAnswerMapping: function(rhsOption, lhsOption) {
        if (!_.isUndefined(lhsOption)) {
            rhsOption._value.mapped = lhsOption._value.resvalue;
            this._controller.setModelValue(rhsOption._model, lhsOption._index, "selected");
        } else {
            delete rhsOption._value.mapped;
            this._controller.setModelValue(rhsOption._model, undefined, "selected");
        }
        this.updateState(this._controller, true);
    },
    removeAnswer: function(rhsOption, lhsIndex) {
        this._controller.setModelValue(rhsOption._model, lhsIndex, "");
    },
    updateState: function(controller, isStateChanged) {
        if (!_.isUndefined(controller._model)) {
            var model = controller._model[controller._index];
            this.setState(model.type, model.rhs_options, isStateChanged);
        }
    }
});

PluginManager.registerPlugin("mtf", MTFPlugin);

var OptionPlugin = Plugin.extend({
    _type: "option",
    _isContainer: false,
    _render: false,
    _index: -1,
    _model: undefined,
    _value: undefined,
    _answer: undefined,
    _multiple: false,
    _mapedTo: undefined,
    _uniqueId: undefined,
    _modelValue: undefined,
    initPlugin: function(data) {
        this._model = undefined;
        this._value = undefined;
        this._answer = undefined;
        this._index = -1;
        this._uniqueId = _.uniqueId("opt_");
        var model = data.option;
        var value = undefined;
        if (data.multiple) this._multiple = data.multiple;
        if (this._parent._controller && model) {
            this._model = model;
            var controller = this._parent._controller;
            value = controller.getModelValue(model);
            this._index = parseInt(model.substring(model.indexOf("[") + 1, model.length - 1));
            var varName = this._data["var"] ? this._data["var"] : "option";
            this._stage._templateVars[varName] = this._parent._data.model + "." + model;
            this._modelValue = this._stage.getModelValue(this._parent._data.model + "." + model);
        }
        if (value && _.isFinite(this._index) && this._index > -1) {
            this._self = new createjs.Container();
            var dims = this.relativeDims();
            this._self.x = dims.x;
            this._self.y = dims.y;
            this._self.origX = dims.x;
            this._self.origY = dims.y;
            this._self.width = dims.w;
            this._self.height = dims.h;
            var hit = new createjs.Shape();
            hit.graphics.beginFill("#000").r(0, 0, dims.w, dims.h);
            this._self.hitArea = hit;
            this._value = value.value;
            this.setOptionIndex(data);
            this.initShadow(data);
            var innerECML = this.getInnerECML();
            if (!_.isEmpty(innerECML)) {
                this.renderInnerECML();
            } else if (value.value.type == "image") {
                this.renderImage(value.value);
            } else if (value.value.type == "text") {
                this.renderText(value.value);
            }
            if (this._parent._type == "mcq") {
                this.renderMCQOption();
            } else if (this._parent._type == "mtf") {
                this.renderMTFOption(value);
            }
            this.resolveModelValue(this._data);
            this._render = true;
        }
    },
    renderMCQOption: function() {
        var controller = this._parent._controller;
        var itemId = controller.getModelValue("identifier");
        this._parent._options.push(this);
        this._self.cursor = "pointer";
        var instance = this;
        if (this._modelValue.selected === true) {
            this.addShadow();
        }
        this._self.on("click", function(event) {
            var eventData = {};
            var val = instance._parent.selectOption(instance);
            OverlayManager.handleSubmit();
            var data = {
                type: event.type,
                x: event.stageX,
                y: event.stageY,
                choice_id: instance._value.resindex,
                itemId: itemId,
                res: [ {
                    option: instance._value.resvalue
                } ],
                state: val ? "SELECTED" : "UNSELECTED",
                optionTag: "MCQ"
            };
            EventBus.dispatch("optionSelected", instance._value);
            EventManager.processAppTelemetry({}, "CHOOSE", instance, data);
        });
    },
    renderMTFOption: function(value) {
        var enableDrag = false;
        var dragPos = {};
        var dragItem = {};
        var controller = this._parent._controller;
        var instance = this;
        var itemId = controller.getModelValue("identifier");
        if (_.isFinite(value.index)) {
            this._index = value.index;
            this._parent._lhs_options.push(this);
        } else {
            this._parent._rhs_options.push(this);
            enableDrag = true;
        }
        if (value.selected != undefined) {
            var snapTo;
            snapTo = instance._parent._lhs_options;
            var plugin = snapTo[value.selected];
            var dims = plugin._dimensions;
            if (!_.isUndefined(plugin._data.snapX)) {
                this._self.x = dims.x + dims.w * plugin._data.snapX / 100;
            }
            if (!_.isUndefined(plugin._data.snapY)) {
                this._self.y = dims.y + dims.h * (plugin._data.snapY / 100);
            }
        }
        if (enableDrag) {
            var instance = this;
            var asset = this._self;
            asset.cursor = "pointer";
            asset.on("mousedown", function(evt) {
                this.parent.addChild(this);
                this.offset = {
                    x: this.x - evt.stageX,
                    y: this.y - evt.stageY
                };
                dragItem = instance._value.resvalue;
                dragPos = {
                    x: evt.stageX,
                    y: evt.stageY
                };
                var data = {
                    type: evt.type,
                    x: evt.stageX,
                    y: evt.stageY,
                    drag_id: instance._value.resvalue,
                    itemId: itemId
                };
                EventBus.dispatch("optionDrag", instance._value);
                EventManager.processAppTelemetry({}, "DRAG", instance, data);
            });
            asset.on("pressmove", function(evt) {
                this.x = evt.stageX + this.offset.x;
                this.y = evt.stageY + this.offset.y;
                instance.addShadow();
                Renderer.update = true;
            });
            asset.on("pressup", function(evt) {
                var snapTo;
                if (instance._parent._force === true) {
                    snapTo = instance._parent.getLhsOption(value.answer);
                } else {
                    snapTo = instance._parent._lhs_options;
                }
                var plugin;
                var dims;
                var snapSuccess = false;
                if (_.isArray(snapTo)) {
                    for (var i = 0; i < snapTo.length; i++) {
                        if (snapSuccess) {
                            break;
                        } else {
                            plugin = snapTo[i];
                            dims = plugin._dimensions;
                            var xFactor = parseFloat(this.width * (50 / 100));
                            var yFactor = parseFloat(this.height * (50 / 100));
                            var x = dims.x - xFactor, y = dims.y - yFactor, maxX = dims.x + dims.w + xFactor, maxY = dims.y + dims.h + yFactor;
                            if (this.x >= x && this.x + this.width <= maxX) {
                                if (this.y >= y && this.y + this.height <= maxY) {
                                    this._mapedTo = snapTo[i];
                                    snapSuccess = true;
                                }
                            }
                        }
                    }
                } else if (snapTo) {
                    plugin = snapTo;
                    dims = plugin._dimensions;
                    var xFactor = parseFloat(this.width * (50 / 100));
                    var yFactor = parseFloat(this.height * (50 / 100));
                    var x = dims.x - xFactor, y = dims.y - yFactor, maxX = dims.x + dims.w + xFactor, maxY = dims.y + dims.h + yFactor;
                    if (this.x >= x && this.x + this.width <= maxX) {
                        if (this.y >= y && this.y + this.height <= maxY) {
                            snapSuccess = true;
                        }
                    }
                }
                var drop_id = snapSuccess ? plugin._id : "";
                var drop_idx = snapSuccess ? plugin._index : "";
                var drop_rsv = snapSuccess ? plugin._value.resvalue : "";
                var drag_rsv = instance._value.resvalue;
                if (!snapSuccess) {
                    this.x = this.origX;
                    this.y = this.origY;
                    if (_.isArray(snapTo)) {
                        for (var i = 0; i < snapTo.length; i++) {
                            var lhsQues = snapTo[i];
                            if (lhsQues._answer) {
                                if (lhsQues._answer._uniqueId == instance._uniqueId) {
                                    lhsQues._answer = undefined;
                                    instance._parent.setAnswerMapping(instance, undefined);
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    var flag = true;
                    if (plugin._multiple) flag = false;
                    if (plugin._answer && flag) {
                        var existing = plugin._answer;
                        existing._parent.setAnswerMapping(existing, undefined);
                        existing._self.x = existing._self.origX;
                        existing._self.y = existing._self.origY;
                    }
                    if (!_.isUndefined(plugin._data.snapX)) {
                        this.x = dims.x + dims.w * plugin._data.snapX / 100;
                    }
                    if (!_.isUndefined(plugin._data.snapY)) {
                        this.y = dims.y + dims.h * (plugin._data.snapY / 100);
                    }
                    instance._parent.setAnswerMapping(instance, plugin);
                    if (_.isArray(snapTo)) {
                        for (var i = 0; i < snapTo.length; i++) {
                            var rhsOption = snapTo[i];
                            if (rhsOption._answer == instance) rhsOption._answer = undefined;
                        }
                    } else if (snapTo) {
                        if (snapTo._answer == instance) snapTo._answer = undefined;
                    }
                    plugin._answer = instance;
                }
                OverlayManager.handleSubmit();
                if (!("undefined" != typeof drop_idx && "" !== drop_idx)) {
                    instance._parent.setAnswerMapping(instance, undefined);
                }
                instance.removeShadow();
                var data = {
                    type: evt.type,
                    x: evt.stageX,
                    y: evt.stageY,
                    choice_id: instance._value.resindex,
                    itemId: itemId,
                    drop_id: drop_id,
                    drop_idx: drop_idx,
                    pos: [ {
                        x: evt.stageX,
                        y: evt.stageY
                    }, dragPos ],
                    res: [ {
                        rhs: drag_rsv
                    }, {
                        lhs: drop_rsv
                    } ],
                    state: "undefined" != typeof drop_idx && "" !== drop_idx ? "SELECTED" : "UNSELECTED",
                    optionTag: "MTF"
                };
                EventBus.dispatch("optionDrop", instance._value);
                EventManager.processAppTelemetry({}, "DROP", instance, data);
                Renderer.update = true;
            });
        }
    },
    renderImage: function(value) {
        var data = {};
        data.asset = value.asset;
        var padx = this._data.padX || 0;
        var pady = this._data.padY || 0;
        data.x = padx;
        data.y = pady;
        data.w = 100 - 2 * padx;
        data.h = 100 - 2 * pady;
        if (value.count) {
            data.count = value.count;
            data.type = "gridLayout";
            PluginManager.invoke("placeholder", data, this, this._stage, this._theme);
        } else {
            PluginManager.invoke("image", data, this, this._stage, this._theme);
        }
        this._data.asset = value.asset;
    },
    renderText: function(data) {
        data.$t = data.asset;
        var padx = this._data.padX || 0;
        var pady = this._data.padY || 0;
        data.x = padx;
        data.y = pady;
        data.w = 100 - 2 * padx;
        data.h = 100 - 2 * pady;
        data.fontsize = data.fontsize ? data.fontsize : 200;
        var align = this._data.align ? this._data.align.toLowerCase() : "center";
        var valign = this._data.valign ? this._data.valign.toLowerCase() : "middle";
        data.align = align;
        data.valign = valign;
        PluginManager.invoke("text", data, this, this._stage, this._theme);
        this._data.asset = data.asset;
    },
    initShadow: function(data) {
        var highlightColor = this._data.highlight || "#E89241";
        var shadowColor = this._data.shadowColor || "#cccccc";
        var shadowData = {
            x: 0,
            y: 0,
            w: 100,
            h: 100,
            type: "roundrect",
            fill: highlightColor,
            visible: false,
            opacity: this._data.opacity || 1
        };
        this._self.shadow = PluginManager.invoke("shape", shadowData, this, this._stage, this._theme);
        var offsetX = this._data.offsetX || 0;
        var offsetY = this._data.offsetY || 0;
        var blur = this._data.blur || 2;
        this._self.shadow._self.shadow = new createjs.Shadow(shadowColor, offsetX, offsetY, blur);
    },
    setOptionIndex: function(data) {
        data = JSON.stringify(data);
        data = data.replace(new RegExp("\\$current", "g"), this._index);
        data = JSON.parse(data);
        this._data = data;
    },
    renderInnerECML: function() {
        var innerECML = this.getInnerECML();
        if (!_.isEmpty(innerECML)) {
            var data = {};
            var padx = this._data.padX || 0;
            var pady = this._data.padY || 0;
            data.x = padx;
            data.y = pady;
            data.w = 100 - 2 * padx;
            data.h = 100 - 2 * pady;
            Object.assign(data, innerECML);
            PluginManager.invoke("g", data, this, this._stage, this._theme);
        }
    },
    resolveModelValue: function(data) {
        var instance = this;
        var updateAction = function(action) {
            if (action.asset_model) {
                var model = action.asset_model;
                var val = instance._stage.getModelValue(model);
                action.asset = val;
                delete action.asset_model;
            }
        };
        var updateEvent = function(evt) {
            if (_.isArray(evt.action)) {
                evt.action.forEach(function(action) {
                    updateAction(action);
                });
            } else if (evt.action) {
                updateAction(evt.action);
            }
        };
        var events = undefined;
        if (data.events) {
            if (_.isArray(data.events)) {
                events = [];
                data.events.forEach(function(e) {
                    events.push.apply(events, e.event);
                });
            } else {
                events = data.events.event;
            }
        } else {
            events = data.event;
        }
        if (_.isArray(events)) {
            events.forEach(function(e) {
                updateEvent(e);
            });
        } else if (events) {
            updateEvent(events);
        }
    }
});

PluginManager.registerPlugin("option", OptionPlugin);

var OptionsPlugin = Plugin.extend({
    _type: "options",
    _isContainer: false,
    _render: false,
    initPlugin: function(data) {
        var model = data.options;
        var value = undefined;
        if (this._parent._controller && model) {
            value = this._parent._controller.getModelValue(model);
        }
        var layout = data.layout;
        if (value && _.isArray(value) && value.length > 0) {
            if (layout === "table" && (_.isFinite(data.cols) || _.isFinite(data.rows))) {
                this.renderTableLayout(value);
            }
        }
    },
    renderTableLayout: function(value) {
        var cols = undefined;
        var rows = undefined;
        var count = value.length;
        if (this._data.cols) {
            cols = Math.min(count, this._data.cols);
            rows = Math.ceil(count / cols);
        } else if (this._data.rows) {
            rows = Math.min(count, this._data.rows);
            cols = Math.ceil(count / rows);
        } else {
            rows = 1;
            cols = Math.min(count, this._data.cols);
        }
        var instance = this;
        var marginX = 0;
        if (_.isFinite(this._data.marginX)) {
            marginX = this._data.marginX;
        }
        var marginY = 0;
        if (_.isFinite(this._data.marginY)) {
            marginY = this._data.marginY;
        }
        var padX = this._data.padX || 0;
        var padY = this._data.padY || 0;
        var cw = (this._data.w - (cols - 1) * marginX) / cols;
        var ch = (this._data.h - (rows - 1) * marginY) / rows;
        var index = 0;
        for (var r = 0; r < rows; r++) {
            for (var c = 0; c < cols; c++) {
                if (c * r < count) {
                    var data = {};
                    data.x = instance._data.x + c * (cw + marginX);
                    data.y = instance._data.y + r * (ch + marginY);
                    data.w = cw;
                    data.h = ch;
                    data.padX = padX;
                    data.padY = padY;
                    data.snapX = instance._data.snapX;
                    data.snapY = instance._data.snapY;
                    data.stroke = instance._data.stroke;
                    data["stroke-width"] = instance._data["stroke-width"];
                    data.events = instance._data.events;
                    data.event = instance._data.event;
                    if (this._parent._shadow) {
                        data.shadowColor = this._parent._shadow;
                    }
                    if (this._parent._highlight) {
                        data.highlight = this._parent._highlight;
                    }
                    if (_.isFinite(this._parent._blur)) {
                        data.blur = this._parent._blur;
                    }
                    if (_.isFinite(this._parent._offsetX)) {
                        data.offsetX = this._parent._offsetX;
                    }
                    if (_.isFinite(this._parent._offsetY)) {
                        data.offsetY = this._parent.offsetY;
                    }
                    if (this._data.multiple) data.multiple = true;
                    if (this._data.opacity) data.opacity = this._data.opacity;
                    data.option = instance._data.options + "[" + index + "]";
                    var innerECML = this.getInnerECML();
                    if (!_.isEmpty(innerECML)) {
                        if (typeof Object.assign != "function") {
                            objectAssign();
                        }
                        Object.assign(data, innerECML);
                    }
                    index = index + 1;
                    PluginManager.invoke("option", data, instance._parent, instance._stage, instance._theme);
                }
            }
        }
    }
});

PluginManager.registerPlugin("options", OptionsPlugin);

var PlaceHolderPlugin = Plugin.extend({
    _type: "placeholder",
    _isContainer: true,
    _render: true,
    initPlugin: function(data) {
        this._self = new createjs.Container();
        var dims = this.relativeDims();
        this._self.x = dims.x;
        this._self.y = dims.y;
        var instance = this;
        this.renderPlaceHolder(instance);
    },
    renderPlaceHolder: function(instance) {
        var data = instance._data;
        if (data.model) {
            instance.param = instance._stage.getModelValue(data.model);
        } else if (data.param) {
            instance.param = instance._stage.params[data.param.trim()];
        } else {
            var type = data.type;
            if (type === undefined) {
                if (data["param-type"]) type = instance.evaluateExpr(data["param-type"].trim()); else if (data["model-type"]) type = instance._stage.getModelValue(data["model-type"].trim());
            }
            var count = data.count;
            if (count === undefined) {
                if (data["param-count"]) count = instance.evaluateExpr(data["param-count"].trim()); else if (data["model-count"]) count = instance._stage.getModelValue(data["model-count"].trim());
            }
            if (count === undefined || count === "") count = 1;
            var asset = data.asset;
            if (asset === undefined) {
                if (data["param-asset"]) asset = instance.evaluateExpr(data["param-asset"].trim()); else if (data["model-asset"]) asset = instance._stage.getModelValue(data["model-asset"].trim());
            }
            instance.param = {
                type: type,
                asset: asset,
                count: count
            };
        }
        if (instance.param) {
            if (instance.param.asset) {
                if (instance.param.type == "gridLayout") {
                    instance.renderGridLayout(instance, instance, data);
                } else if (instance.param.type == "image") {
                    instance.renderImage(instance);
                } else if (instance.param.type == "text") {
                    instance.renderText(instance);
                }
            }
        }
    },
    renderText: function(instance) {
        var param = instance.param;
        var data = instance._data;
        data.$t = param.asset;
        PluginManager.invoke("text", data, instance._parent, instance._stage, instance._theme);
    },
    renderImage: function(instance) {
        var param = instance.param;
        var data = instance._data;
        data.asset = param.asset;
        PluginManager.invoke("image", data, instance._parent, instance._stage, instance._theme);
    },
    getAssetBound: function(img, pad) {
        var imgBounds = img.getBounds();
        var imgW = imgBounds.width;
        var imgH = imgBounds.height;
        img.x = parseFloat(pad / 2);
        img.y = parseFloat(pad / 2);
        var imgCont = new createjs.Container();
        imgCont.addChild(img);
        imgCont.cache(0, 0, imgW + pad, imgH + pad);
        return imgCont;
    },
    computePixel: function(area, repeat) {
        return Math.floor(Math.sqrt(parseFloat(area / repeat)));
    },
    renderGridLayout: function(parent, instance, data) {
        var assetId = instance.param.asset;
        var assetSrc = instance._theme.getAsset(assetId);
        var img = new createjs.Bitmap(assetSrc);
        var getImage = function(cb) {
            if (_.isUndefined(assetSrc)) {
                console.error('"' + assetId + '" Asset not found. Please check index.ecml.');
                return;
            }
            AssetManager.strategy.loadAsset(instance._stage._data.id, assetId, assetSrc, function() {
                assetSrc = instance._theme.getAsset(assetId);
                img = new createjs.Bitmap(assetSrc);
                if (!_.isNull(img.getBounds())) {
                    cb();
                } else {
                    console.warn("Unable to find the Bounds value for " + assetId + ",  Source - " + assetSrc);
                }
            });
        };
        var enableDrag = function(asset, snapTo) {
            asset.cursor = "pointer";
            asset.on("mousedown", function(evt) {
                this.parent.addChild(this);
                this.offset = {
                    x: this.x - evt.stageX,
                    y: this.y - evt.stageY
                };
            });
            asset.on("pressmove", function(evt) {
                this.x = evt.stageX + this.offset.x;
                this.y = evt.stageY + this.offset.y;
                Renderer.update = true;
            });
            if (snapTo) {
                asset.on("pressup", function(evt) {
                    var plugin = PluginManager.getPluginObject(data.snapTo);
                    var dims = plugin._dimensions;
                    var x = dims.x, y = dims.y, maxX = dims.x + dims.w, maxY = dims.y + dims.h;
                    var snapSuccess = false;
                    if (this.x >= x && this.x <= maxX) {
                        if (this.y >= y && this.y <= maxY) {
                            snapSuccess = true;
                        }
                    }
                    if (!snapSuccess) {
                        this.x = this.origX;
                        this.y = this.origY;
                    }
                });
            }
        };
        var renderGridImages = function() {
            var x = 0, y = 0, area = instance.dimensions().w * instance.dimensions().h, pad = instance.dimensions().pad || 0, n = instance.param.count, rectHeight = instance.dimensions().h, rectWidth = instance.dimensions().w;
            var imgCountRow = Math.ceil(Math.sqrt(n * rectHeight / rectWidth));
            if (Math.floor(imgCountRow * rectWidth / rectHeight) * imgCountRow < n) var pixelPerImgX = rectWidth / Math.ceil(imgCountRow * rectWidth / rectHeight); else pixelPerImgX = rectHeight / imgCountRow;
            var imgCountCol = Math.ceil(Math.sqrt(n * rectWidth / rectHeight));
            if (Math.floor(imgCountCol * rectHeight / rectWidth) * imgCountCol < n) var pixelPerImgY = rectHeight / Math.ceil(rectHeight * imgCountCol / rectWidth); else pixelPerImgY = rectWidth / imgCountCol;
            var pixelPerImg = pixelPerImgX > pixelPerImgY ? pixelPerImgX : pixelPerImgY;
            var param = instance.param;
            var paddedImg = instance.getAssetBound(img, pad);
            var assetBounds = paddedImg.getBounds();
            var assetW = assetBounds.width, assetH = assetBounds.height;
            paddedImg.scaleY = parseFloat(pixelPerImg / assetH);
            paddedImg.scaleX = parseFloat(pixelPerImg / assetW);
            paddedImg.x = x + pad;
            paddedImg.y = y + pad;
            var instanceBoundary = 0 + instance.dimensions().w;
            for (var i = 0; i < param.count; i++) {
                var clonedAsset = paddedImg.clone(true);
                if (x + pixelPerImg > instanceBoundary) {
                    x = 0;
                    y += pixelPerImg + pad;
                }
                clonedAsset.x = x + pad;
                clonedAsset.y = y + pad;
                clonedAsset.origX = x + pad;
                clonedAsset.origY = y + pad;
                x += pixelPerImg;
                if (instance._data.enabledrag) {
                    enableDrag(clonedAsset, data.snapTo);
                }
                Renderer.update = true;
                parent.addChild(clonedAsset);
            }
        };
        if (_.isNull(img.getBounds())) {
            getImage(renderGridImages);
        } else {
            renderGridImages();
        }
    },
    refresh: function() {
        this._self.removeAllChildren();
        this._currIndex = 0;
        this.renderPlaceHolder(this);
        Renderer.update = true;
    }
});

PluginManager.registerPlugin("placeholder", PlaceHolderPlugin);

var SetPlugin = Plugin.extend({
    _type: "set",
    _isContainer: false,
    _modelName: undefined,
    _model: undefined,
    _index: 0,
    _render: false,
    initPlugin: function(data) {
        this._modelName = undefined;
        this._model = undefined;
        this._index = 0;
        var value = data.value;
        if (data["ev-value"]) {
            this._modelName = data.param;
            this._model = this.evaluateExpr(data["ev-value"]);
            if (_.isArray(this._model)) {
                value = this._model[0];
            } else {
                value = this._model;
            }
        } else if (data["model"]) {
            if (this._stage) {
                value = this._stage.getModelValue(data["model"]);
            }
        } else if (data["ev-model"]) {
            if (this._stage) {
                var model = this.replaceExpressions(data["ev-model"]);
                this._modelName = data.param;
                this._model = this._stage.getModelValue(model);
                if (_.isArray(this._model)) {
                    value = this._model[0];
                } else {
                    value = this._model;
                }
            }
        }
        this.setParam(data.param, value, undefined, data.scope);
    },
    replaceExpressions: function(model) {
        var arr = [];
        var idx = 0;
        var nextIdx = model.indexOf("${", idx);
        var endIdx = model.indexOf("}", idx + 1);
        while (nextIdx != -1 && endIdx != -1) {
            var expr = model.substring(nextIdx, endIdx + 1);
            arr.push(expr);
            idx = endIdx;
            nextIdx = model.indexOf("${", idx);
            endIdx = model.indexOf("}", idx + 1);
        }
        if (arr.length > 0) {
            for (var i = 0; i < arr.length; i++) {
                var val = this.evaluateExpr(arr[i]);
                model = model.replace(arr[i], val);
            }
        }
        return model;
    },
    setParamValue: function(action) {
        var scope = action.scope;
        var param = action.param;
        var paramIdx = action["param-index"];
        var paramKey = action["param-key"];
        var paramExpr = action["ev-value"];
        var paramModel = action["ev-model"];
        var val;
        if (paramIdx) {
            if (paramIdx == "previous") {
                if (_.isArray(this._model) && this._model.length > 0) {
                    if (this._index > 0) {
                        this._index = this._index - 1;
                    } else {
                        this._index = this._model.length - 1;
                    }
                    val = this._model[this._index];
                } else {
                    val = this._model;
                }
            } else {
                if (_.isArray(this._model)) {
                    if (this._index < this._model.length - 1) {
                        this._index = this._index + 1;
                    } else {
                        this._index = 0;
                    }
                    val = this._model[this._index];
                } else {
                    val = this._model;
                }
            }
        } else if (paramKey) {
            if (_.isObject(this._model) && this.model[paramKey]) {
                val = this.model[paramKey];
            } else {
                val = "";
            }
        } else if (paramExpr) {
            this._model = this.evaluateExpr(paramExpr);
            if (_.isArray(this._model)) {
                val = this._model[0];
            } else {
                val = this._model;
            }
        } else if (paramModel) {
            if (this._stage) {
                var model = this.replaceExpressions(paramModel);
                this._model = this._stage.getModelValue(model);
                if (_.isArray(this._model)) {
                    val = this._model[0];
                } else {
                    val = this._model;
                }
            }
        } else {
            val = action["param-value"];
        }
        var max = undefined;
        if (action["param-max"]) {
            max = this.evaluateExpr(action["param-max"]);
            if (val >= max) val = action["param-incr"] = 0;
        }
        this.setParam(param, val, action["param-incr"], scope, max);
    },
    setParam: function(param, value, incr, scope, max) {
        if (scope && scope.toLowerCase() == "app") {
            GlobalContext.setParam(param, value, incr, max);
        } else if (scope && scope.toLowerCase() == "stage") {
            this._stage.setParam(param, value, incr, max);
        } else if (scope && scope.toLowerCase() == "parent") {
            this._parent.setPluginParam(param, value, incr, max);
        } else {
            this._theme ? this._theme.setParam(param, value, incr, max) : undefined;
        }
    },
    getParam: function(param) {
        var value = GlobalContext.getParam(param);
        if (!value && !_.isUndefined(this._theme)) value = this._theme.getParam(param);
        if (!value) value = this._stage.getParam(param);
        if (!value && !_.isUndefined(this._theme)) value = this._parent.getPluginParam(param);
        return value;
    }
});

PluginManager.registerPlugin("set", SetPlugin);

var SpritePlugin = Plugin.extend({
    _type: "sprite",
    _isContainer: false,
    _render: true,
    initPlugin: function(data) {
        var dims = this.relativeDims();
        var spriteJSON = this._theme.getAsset(data.asset);
        var spriteImage = this._theme.getAsset(data.asset + "_image");
        if (spriteJSON && spriteImage) {
            spriteJSON.images.push(spriteImage);
            var spritesheet = new createjs.SpriteSheet(spriteJSON);
            var grant = new createjs.Sprite(spritesheet);
            if (data.start) {
                grant.gotoAndPlay(data.start);
            }
            grant.x = dims.x;
            grant.y = dims.y;
            this._self = grant;
            this._self.scaleX = dims.w / spriteJSON.frames.width;
            this._self.scaleY = dims.h / spriteJSON.frames.height;
            grant.addEventListener("change", function() {
                Renderer.update = true;
            });
        } else {
            console.error("Sprite sheet definition or image not found.");
        }
    },
    play: function(action) {
        if (!this._self.visible) this._self.visible = true;
        this._self.gotoAndPlay(action.animation);
    },
    togglePlay: function(action) {
        if (this._self.paused) {
            this._self.gotoAndPlay(action.animation);
        } else {
            this._self.paused = true;
        }
    },
    pause: function() {
        this._self.paused = true;
    },
    stop: function() {
        this._self.stop();
    }
});

PluginManager.registerPlugin("sprite", SpritePlugin);

var StagePlugin = Plugin.extend({
    _type: "stage",
    _isContainer: true,
    _render: true,
    params: {},
    _stageParams: {},
    _stageController: undefined,
    _stageControllerName: undefined,
    _templateVars: {},
    _controllerMap: {},
    _inputs: [],
    _startDrag: undefined,
    _doDrag: undefined,
    _stageInstanceId: undefined,
    _currentState: {},
    isStageStateChanged: undefined,
    maxTimeToLoad: 5e3,
    timeInstance: {},
    initPlugin: function(data) {
        var instance = this;
        this.destroyTimeInstance(data);
        this._inputs = [];
        this.params = {};
        this._self = new creatine.Scene();
        var dims = this.relativeDims();
        this._self.x = dims.x;
        this._self.y = dims.y;
        this._stageInstanceId = this._theme._currentStage + "__" + Math.random().toString(36).substr(2, 9);
        if (data.iterate && data.var) {
            var controllerName = data.var.trim();
            var stageController = this._theme._controllerMap[data.iterate.trim()];
            if (stageController) {
                this._stageControllerName = controllerName;
                this._stageController = stageController;
                this._stageController.next();
            }
        }
        for (k in data) {
            if (k === "param") {
                if (_.isArray(data[k])) {
                    var instance = this;
                    data[k].forEach(function(param) {
                        instance.setParamValue(param);
                    });
                } else {
                    this.setParamValue(data[k]);
                }
            } else if (k === "controller") {
                if (_.isArray(data[k])) {
                    data[k].forEach(function(p) {
                        this.addController(p);
                    });
                } else {
                    this.addController(data[k]);
                }
            }
        }
        this._startDrag = this.startDrag.bind(this);
        this._doDrag = this.doDrag.bind(this);
        window.addEventListener("native.keyboardshow", this.keyboardShowHandler.bind(this), true);
        window.addEventListener("native.keyboardhide", this.keyboardHideHandler.bind(this), true);
        var stageKey = this.getStagestateKey();
        if (typeof this._theme.getParam === "function") {
            this._currentState = this._theme.getParam(stageKey);
            if (_.isUndefined(this._currentState)) {
                this.setParam(this._type, {
                    id: Renderer.theme._currentStage,
                    stateId: stageKey
                });
            }
        }
        var isStageLoaded;
        if (!_.isUndefined(AssetManager.strategy)) {
            isStageLoaded = AssetManager.strategy.isStageAssetsLoaded(data.id);
        }
        if (isStageLoaded == false) {
            var timeInst;
            EventBus.addEventListener(data.id + "_assetsLoaded", instance.invokeRenderElements, this);
            timeInst = setTimeout(function() {
                isStageLoaded = AssetManager.strategy.isStageAssetsLoaded(data.id);
                if (!isStageLoaded && instance._theme._currentStage == data.id) {
                    instance.showHideLoader("block");
                    timeInst = setTimeout(function() {
                        if (jQuery("#loaderArea").css("display") == "block" && instance._theme._currentStage == instance._data.id) {
                            instance.invokeRenderElements();
                        }
                    }, instance.maxTimeToLoad);
                    instance.timeInstance[data.id] = timeInst;
                }
            }, 500);
            this.timeInstance[data.id] = timeInst;
            return;
        }
        this.invokeChildren(data, this, this, this._theme);
    },
    destroyTimeInstance: function(data) {
        if (Renderer.theme && Renderer.theme.getStagesToPreLoad) {
            var stages = Renderer.theme.getStagesToPreLoad(data);
            if (!_.isUndefined(stages.next) && this.timeInstance[stages.next]) {
                clearTimeout(this.timeInstance[stages.next]);
                delete this.timeInstance[stages.next];
            }
            if (!_.isUndefined(stages.prev) && this.timeInstance[stages.prev]) {
                clearTimeout(this.timeInstance[stages.prev]);
                delete this.timeInstance[stages.prev];
            }
        }
    },
    invokeRenderElements: function() {
        this.invokeChildren(this._data, this, this, this._theme);
        Renderer.update = true;
        this.showHideLoader("none");
        if (!_.isUndefined(Renderer.theme) && !_.isUndefined(Renderer.theme._currentScene)) {
            Renderer.theme._currentScene.dispatchEvent("enter");
        }
        EventBus.removeEventListener(this._data.id + "_assetsLoaded", this.invokeRenderElements, this);
    },
    keyboardShowHandler: function(e) {
        this._self.y = -e.keyboardHeight;
        if (!this._self.hitArea) {
            var hit = new createjs.Shape();
            hit.graphics.beginFill("#000").drawRect(0, 0, this._self.width, this._self.height);
            this._self.hitArea = hit;
            console.info("HitArea added to the stage.");
        }
        Renderer.update = true;
        this.keyboardH = e.keyboardHeight;
        this._self.addEventListener("mousedown", this._startDrag);
        this.offset = new createjs.Point();
    },
    startDrag: function() {
        this.offset.x = Renderer.theme._self.mouseX - this._self.x;
        this.offset.y = Renderer.theme._self.mouseY - this._self.y;
        this._self.addEventListener("pressmove", this._doDrag);
    },
    doDrag: function(event) {
        if (this._self.y >= this.keyboardH || this._self.y >= -this.keyboardH) {
            this._self.y = event.stageY - this.offset.y;
            if (this._self.y < -this.keyboardH) this._self.y = -this.keyboardH + 1;
            if (this._self.y > 0) this._self.y = 0;
            Renderer.update = true;
        }
    },
    keyboardHideHandler: function(e) {
        this._self.y = 0;
        this._self.removeEventListener("mousedown", this._startDrag);
        this._self.removeEventListener("pressmove", this._doDrag);
        Renderer.update = true;
    },
    setParamValue: function(p) {
        if (p.value) {
            this.params[p.name] = p.value;
        } else if (p.model) {
            this.params[p.name] = this.getModelValue(p.model);
        }
    },
    addController: function(p) {
        var add = true;
        if (p["ev-if"]) {
            var expr = p["ev-if"].trim();
            if (!(expr.substring(0, 2) == "${")) expr = "${" + expr;
            if (!(expr.substring(expr.length - 1, expr.length) == "}")) expr = expr + "}";
            add = this.evaluateExpr(expr);
        }
        if (add) {
            var controller = ControllerManager.get(p, this._theme.baseDir);
            if (controller) {
                this._controllerMap[p.name] = controller;
            }
        }
    },
    getController: function(name) {
        var c;
        if (this._templateVars[name]) {
            name = this._templateVars[name];
        }
        if (this._stageControllerName === name) {
            c = this._stageController;
        } else if (this._controllerMap[name]) {
            c = this._controllerMap[name];
        } else if (this._theme._controllerMap[name]) {
            c = this._theme._controllerMap[name];
        }
        return c;
    },
    getTemplate: function(controller) {
        var c = this.getController(controller);
        var t;
        if (c) {
            t = c.getTemplate();
        }
        return t;
    },
    getModelValue: function(param) {
        var val;
        if (param) {
            var tokens = param.split(".");
            if (tokens.length >= 2) {
                var name = tokens[0].trim();
                var idx = param.indexOf(".");
                var paramName = param.substring(idx + 1);
                if (this._templateVars[name]) {
                    name = this._templateVars[name];
                    if (name.indexOf(".") > 0) {
                        paramName = name.substring(name.indexOf(".") + 1) + "." + paramName;
                        name = name.substring(0, name.indexOf("."));
                    }
                }
                var controller = this.getController(name);
                if (controller) {
                    val = controller.getModelValue(paramName);
                }
            } else {
                var controller = this.getController(param);
                if (controller) {
                    val = controller.getModelValue();
                }
            }
        }
        return val;
    },
    setModelValue: function(param, val) {
        if (param) {
            var tokens = param.split(".");
            if (tokens.length >= 2) {
                var name = tokens[0].trim();
                var idx = param.indexOf(".");
                var paramName = param.substring(idx + 1);
                var controller = this.getController(name);
                if (controller) {
                    val = controller.setModelValue(paramName, val);
                }
            }
        }
    },
    isStageStateChanged: function(isChanged) {
        this._isStageStateChanged = isChanged;
        if (isChanged) {
            this._currentState["isEvaluated"] = false;
        }
    },
    evaluate: function(action) {
        var isEvaluated = _.isUndefined(this._currentState) ? false : this._currentState.isEvaluated;
        if (!(this._isStageStateChanged === false && isEvaluated)) {
            var valid = false;
            var showImmediateFeedback = true;
            if (this._stageController) {
                if (!_.isUndefined(this._stageController._data.showImmediateFeedback)) {
                    showImmediateFeedback = this._stageController._data.showImmediateFeedback;
                }
                this._inputs.forEach(function(input) {
                    input.setModelValue();
                });
                var result = this._stageController.evalItem();
                if (result) {
                    valid = result.pass;
                }
                this._currentState["isEvaluated"] = true;
                EventBus.dispatch("evaluated", result);
                this.isStageStateChanged(false);
                if (showImmediateFeedback) {
                    if (valid == true) {
                        var showOverlayGoodJobFd = OverlayManager.showFeeback(valid);
                        if (!showOverlayGoodJobFd) {
                            this.dispatchEvent(action.success);
                        }
                    } else {
                        var showOverlayTryAgainFd = OverlayManager.showFeeback(valid);
                        if (!showOverlayTryAgainFd) {
                            this.dispatchEvent(action.failure);
                        }
                    }
                    return;
                }
            }
        }
        OverlayManager.skipAndNavigateNext();
    },
    reload: function(action) {
        if (this._stageController) {
            this._stageController.decrIndex(1);
        }
        this._theme.replaceStage(this._data.id, action);
    },
    getStagestateKey: function() {
        if (!_.isUndefined(this._stageController)) {
            return Renderer.theme._currentStage + "_" + this._stageController._id + "_" + this._stageController._index;
        } else {
            return Renderer.theme._currentStage;
        }
    },
    setParam: function(param, value, incr, max) {
        var instance = this;
        var fval = instance.params[param];
        if (incr) {
            if (!fval) fval = 0;
            fval = fval + incr;
        } else {
            fval = value;
        }
        if (0 > fval) fval = 0;
        if ("undefined" != typeof max && fval >= max) fval = 0;
        instance.params[param] = fval;
        if (this.stateConfig) {
            instance._currentState = $.extend({}, instance._currentState, instance.params);
            instance._currentState = JSON.parse(JSON.stringify(instance._currentState));
        }
    },
    stateConfig: function() {
        if (!_.isUndefined(this._stageController)) {
            if (this._stageController._data.saveState == undefined || this._stageController._data.saveState == true) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    },
    getParam: function(param) {
        var instance = this;
        var params = instance.params;
        var expr = "params." + param;
        return eval(expr);
    },
    isItemScene: function() {
        var stageCtrl = this._stageController;
        if (!_.isUndefined(stageCtrl) && !_.isUndefined(stageCtrl._model) && "items" == stageCtrl._type) {
            return true;
        } else {
            return false;
        }
    },
    isReadyToEvaluate: function() {
        var enableEval = false;
        var stageCtrl = this._stageController;
        if (!_.isUndefined(stageCtrl) && "items" == stageCtrl._type && !_.isUndefined(stageCtrl._model)) {
            var modelItem = stageCtrl._model[stageCtrl._index];
            if (modelItem && modelItem.type.toLowerCase() == "ftb") {
                enableEval = true;
            } else {
                if (!_.isUndefined(this._currentState) && !_.isUndefined(this._currentState.isEvaluated)) {
                    enableEval = !this._currentState.isEvaluated;
                }
            }
        }
        return enableEval;
    },
    showHideLoader: function(val) {
        var elem = document.getElementById("loaderArea");
        if (!_.isNull(elem)) {
            elem.style.display = val;
        }
    }
});

PluginManager.registerPlugin("stage", StagePlugin);

var SummaryPlugin = Plugin.extend({
    _type: "summary",
    _isContainer: false,
    _render: false,
    initPlugin: function(data) {
        if (data.controller) {
            var controller = data.controller;
            var message;
            if (this._theme._controllerMap[controller]) {
                message = this._theme._controllerMap[controller].feedback();
            } else if (this._stage._stageControllerName === controller) {
                message = this._stage._stageController.feedback();
            } else if (this._stage._controllerMap[controller]) {
                message = this._stage._controllerMap[controller].feedback();
            }
            if (message && message.type == "text") {
                this.renderTextSummary(message.asset, data);
            }
        }
    },
    renderTextSummary: function(text, data) {
        data.$t = text;
        PluginManager.invoke("text", data, this._parent, this._stage, this._theme);
    }
});

PluginManager.registerPlugin("summary", SummaryPlugin);

var TextPlugin = Plugin.extend({
    _type: "text",
    _isContainer: false,
    _render: true,
    lineHeightMagicNumber: 1.13,
    initPlugin: function(data) {
        var instance = this;
        var fontsize = data.fontsize || 20;
        var dims = this.relativeDims();
        var lineHeight = data.lineHeight ? data.lineHeight : 0;
        var outline = data.outline ? data.outline : 0;
        if (_.isFinite(fontsize)) {
            if (data.w) {
                var exp = parseFloat(PluginManager.defaultResWidth * data.w / 100);
                var cw = this._parent.dimensions().w;
                var width = parseFloat(cw * data.w / 100);
                var scale = parseFloat(width / exp);
                fontsize = parseFloat(fontsize * scale);
                fontsize = fontsize + "px";
            }
        }
        var font = fontsize + " " + data.font;
        if (data.weight) {
            font = data.weight + " " + font;
        }
        var textStr = "";
        if (data.$t || data.__text) {
            textStr = data.$t || data.__text;
        } else if (data.model) {
            textStr = this._stage.getModelValue(data.model) || "";
        } else if (data.param) {
            textStr = this.getParam(data.param.trim()) || "";
        }
        var text = new createjs.Text(textStr, font, data.color || "#000000");
        text.lineWidth = dims.w;
        text.x = dims.x;
        text.y = dims.y;
        text.lineHeight = lineHeight * text.getMeasuredLineHeight();
        text.outline = outline;
        var align = data.align ? data.align.toLowerCase() : "left";
        var valign = data.valign ? data.valign.toLowerCase() : "top";
        if (align == "left") {
            text.x = dims.x;
        } else if (align == "right") {
            text.regX = -dims.w;
        } else if (align == "center") {
            text.x = dims.x;
            text.regX = -dims.w / 2;
        }
        if (valign == "top") {
            text.y = dims.y;
            text.textBaseline = "hanging";
        } else if (valign == "bottom") {
            text.y = dims.y + dims.h - text.getMeasuredHeight();
            text.textBaseline = "hanging";
        } else if (valign == "middle") {
            text.y = dims.y + dims.h / 2 - text.getMeasuredHeight() / 2;
            if (data.textBaseline) {
                text.textBaseline = "top";
            } else {
                text.textBaseline = "hanging";
            }
        }
        if (data.textBaseline) {
            text.textBaseline = data.textBaseline;
        }
        if (data.version === "V2") {
            text.y = text.y + data.offsetY * parseFloat(fontsize);
            lineHeight = this.lineHeightMagicNumber * data.lineHeight * parseFloat(fontsize);
            text.lineHeight = lineHeight;
        }
        text.textAlign = align;
        text.valign = valign;
        this._self = text;
    },
    refresh: function() {
        var instance = this;
        var textStr = "";
        if (instance._data.$t || instance._data.__text) {
            textStr = instance._data.$t || instance._data.__text;
        } else if (instance._data.model) {
            textStr = this._stage.getModelValue(instance._data.model) || "";
        } else if (instance._data.param) {
            textStr = this.getParam(instance._data.param.trim()) || "";
        }
        if (textStr && textStr != "") {
            this._self.text = textStr;
            Renderer.update = true;
        }
    }
});

PluginManager.registerPlugin("text", TextPlugin);

var ThemePlugin = Plugin.extend({
    _type: "theme",
    _render: false,
    update: false,
    baseDir: "",
    loader: undefined,
    _director: false,
    _currentScene: undefined,
    _currentStage: undefined,
    _previousStage: undefined,
    _canvasId: undefined,
    inputs: [],
    htmlElements: [],
    _animationEffect: {
        effect: "moveOut"
    },
    _themeData: undefined,
    _controllerMap: {},
    _isContainer: false,
    _templateMap: {},
    _contentParams: {},
    _isSceneChanging: false,
    _saveState: true,
    _basePath: undefined,
    initPlugin: function(data) {
        this.addLoaderElement();
        this._controllerMap = {};
        this._canvasId = data.canvasId;
        this._self = new createjs.Stage(data.canvasId);
        this._director = new creatine.Director(this._self);
        this._dimensions = {
            x: 0,
            y: 0,
            w: this._self.canvas.width,
            h: this._self.canvas.height
        };
        createjs.Touch.enable(this._self);
        this._self.enableMouseOver(10);
        this._self.mouseMoveOutside = true;
        this._contentParams = {};
        if (!_.isUndefined(data.saveState)) {
            this._saveState = data.saveState;
        }
    },
    mousePoint: function() {
        return {
            x: this._self.mouseX,
            y: this._self.mouseY
        };
    },
    updateCanvas: function(w, h) {
        this._self.canvas.width = w;
        this._self.canvas.height = h;
        this._dimensions = {
            x: 0,
            y: 0,
            w: this._self.canvas.width,
            h: this._self.canvas.height
        };
    },
    start: function(basePath) {
        try {
            var instance = this;
            instance._basePath = basePath;
            RecorderManager.init();
            if (_.isArray(this._data.stage)) {
                var startStage = _.find(this._data.stage, function(stage) {
                    return stage.id == instance._data.startStage;
                });
            } else {
                if (this._data.stage.id == instance._data.startStage) {
                    var startStage = this._data.stage.id;
                }
            }
            if (_.isUndefined(startStage)) {
                var firstStage = _.find(this._data.stage, function(stage) {
                    if (stage.param && _.isUndefined(firstStage)) return stage;
                });
                if (_.isUndefined(firstStage)) {
                    checkStage("showAlert");
                } else {
                    if (_.isUndefined(this._data.startStage)) {
                        console.warn("No start stage is defined, loading first stage");
                    } else {
                        console.warn("Startstage is not available, loading first stage");
                    }
                    this._data.startStage = firstStage.id;
                }
            }
            AssetManager.init(this._data, basePath);
            AssetManager.initStage(this._data.startStage, null, null, function() {
                instance.render();
            });
        } catch (e) {
            showToaster("error", "Content fails to start");
            EkstepRendererAPI.logErrorEvent(e, {
                severity: "fatal",
                type: "content",
                action: "play"
            });
            console.warn("Theme start is failed due to", e);
        }
    },
    render: function() {
        var instance = this;
        ControllerManager.reset();
        OverlayManager.reset();
        if (this._data.controller) {
            if (_.isArray(this._data.controller)) {
                this._data.controller.forEach(function(p) {
                    instance.addController(p);
                });
            } else {
                instance.addController(this._data.controller);
            }
        }
        if (this._data.template) {
            if (_.isArray(this._data.template)) {
                this._data.template.forEach(function(t) {
                    instance._templateMap[t.id] = t;
                });
            } else {
                instance._templateMap[this._data.template.id] = this._data.template;
            }
        }
        if (!_.isArray(this._data.stage)) this._data.stage = [ this._data.stage ];
        if (this._data.stage) {
            this._data.stage.forEach(function(s) {
                instance.initStageControllers(s);
            });
            this.invokeStage(this._data.startStage);
        }
        this.update();
        console.log("ECML RENDERER - Content rendering started");
        EkstepRendererAPI.dispatchEvent("renderer:content:start");
    },
    addController: function(p) {
        var controller = ControllerManager.get(p, this.baseDir);
        if (controller) {
            this._controllerMap[p.name] = controller;
        }
    },
    initStageControllers: function(stage) {
        if (stage.controller) {
            if (_.isArray(stage.controller)) {
                stage.controller.forEach(function(p) {
                    ControllerManager.get(p, this.baseDir);
                });
            } else {
                ControllerManager.get(stage.controller, this.baseDir);
            }
        }
    },
    reRender: function() {
        var controller;
        for (k in this._controllerMap) {
            controller = this._controllerMap[k];
            controller.reset();
        }
        this._contentParams = {};
        this._self.clear();
        this._self.removeAllChildren();
        this.render();
    },
    update: function() {
        this._self.update();
    },
    tick: function() {
        this._self.tick();
    },
    restart: function() {
        var gameId = TelemetryService.getGameId();
        var version = TelemetryService.getGameVer();
        var instance = this;
        var telemetryEndData = {};
        telemetryEndData.stageid = getCurrentStageId();
        telemetryEndData.progress = logContentProgress();
        TelemetryService.end(telemetryEndData);
        AssetManager.initStage(this._data.startStage, null, null, function() {
            if (gameId && version) {
                TelemetryService.start(gameId, version);
            }
            instance.render();
        });
    },
    getAsset: function(aid) {
        return AssetManager.getAsset(this._currentStage, aid);
    },
    getMedia: function(aid) {
        return _.find(this._data.manifest.media, function(item) {
            return item.id == aid;
        });
    },
    addChild: function(child, childPlugin) {
        var instance = this;
        child.on("sceneenter", function() {
            instance.enableInputs();
            instance._isSceneChanging = false;
            instance.preloadStages();
            childPlugin.uncache();
            if (!_.isUndefined(Renderer.theme._previousStage) && Renderer.theme._previousStage != Renderer.theme._currentStage) {
                TelemetryService.navigate(Renderer.theme._previousStage, Renderer.theme._currentStage);
            }
            OverlayManager.init();
            Renderer.update = true;
        });
        var nextIdx = this._currIndex++;
        if (this._currentScene) {
            this._currentScene.dispatchEvent("exit");
            this._currentScene = childPlugin;
            this._director.replace(child, this.getTransitionEffect(this._animationEffect));
        } else {
            this._currentScene = childPlugin;
            this._director.replace(child);
        }
        document.fonts.ready.then(function() {
            Renderer.update = true;
        });
        childPlugin.setIndex(nextIdx);
    },
    replaceStage: function(stageId, effect) {
        AudioManager.stopAll();
        RecorderManager.stopRecording();
        this.disableInputs();
        this.inputs = [];
        this.removeHtmlElements();
        this.htmlElements = [];
        this._animationEffect = effect;
        TimerManager.destroy();
        if (!_.isUndefined(this._currentScene)) {
            EventBus.removeEventListener(this._currentScene._id + "_assetsLoaded", this._currentScene.invokeRenderElements, this);
        }
        stageId ? this.invokeStage(stageId) : OverlayManager.moveToEndPage();
    },
    invokeStage: function(stageId) {
        var stage = _.clone(_.findWhere(this._data.stage, {
            id: stageId
        }));
        if (stage && stage.extends) {
            baseStage = _.findWhere(this._data.stage, {
                id: stage.extends
            });
            stage = this.mergeStages(stage, baseStage);
        }
        this._previousStage = this._currentStage;
        this._currentStage = stageId;
        PluginManager.invoke("stage", stage, this, null, this);
    },
    preloadStages: function() {
        var stagesToLoad = this.getStagesToPreLoad(this._currentScene._data);
        var instance = this;
        AssetManager.initStage(stagesToLoad.stage, stagesToLoad.next, stagesToLoad.prev, function() {
            instance._currentScene.dispatchEvent("enter");
        });
    },
    mergeStages: function(stage1, stage2) {
        for (k in stage2) {
            if (k === "id") continue;
            var attr = stage2[k];
            if (stage1[k]) {
                if (!_.isArray(stage1[k])) {
                    stage1[k] = [ stage1[k] ];
                }
                if (_.isArray(attr)) {
                    stage1[k].push.apply(stage1[k], attr);
                } else {
                    stage1[k].push(attr);
                }
            } else {
                stage1[k] = attr;
            }
        }
        return stage1;
    },
    isStageChanging: function() {
        return this._isSceneChanging;
    },
    transitionTo: function(action) {
        if (this._isSceneChanging) {
            return;
        }
        var stage = this._currentScene;
        this.setParam(stage.getStagestateKey(), stage._currentState);
        RecorderManager.stopRecording();
        AudioManager.stopAll();
        TimerManager.stopAll(this._currentStage);
        if (!action.transitionType) action.transitionType = action.param;
        if (action.transitionType === "skip") {
            this.jumpToStage(action);
        } else {
            this._isSceneChanging = true;
            if (action.transitionType === "previous") {
                if (stage._stageController && stage._stageController.hasPrevious()) {
                    stage._stageController.decrIndex(2);
                    this.replaceStage(stage._data.id, action);
                } else {
                    if (stage._stageController) {
                        stage._stageController.setIndex(-1);
                        if (action.reset == true) {
                            stage._stageController.reset();
                        }
                    }
                    this.replaceStage(action.value, action);
                }
            } else if (action.transitionType === "next" && stage._stageController && stage._stageController.hasNext()) {
                this.replaceStage(stage._data.id, action);
            } else {
                this.jumpToStage(action);
            }
        }
    },
    jumpToStage: function(action) {
        if (stage._stageController && action.reset) {
            stage._stageController.reset();
        }
        this.replaceStage(action.value, action);
    },
    removeHtmlElements: function() {
        var gameAreaEle = jQuery("#" + Renderer.divIds.gameArea);
        var chilElemtns = gameAreaEle.children();
        jQuery(chilElemtns).each(function() {
            if (this.id !== "overlay" && this.id !== "gameCanvas") {
                jQuery(this).remove();
            }
        });
    },
    disableInputs: function() {
        this.inputs.forEach(function(inputId) {
            var element = document.getElementById(inputId);
            if (!_.isNull(element)) {
                element.style.display = "none";
            }
        });
    },
    enableInputs: function() {
        this.inputs.forEach(function(inputId) {
            var element = document.getElementById(inputId);
            if (!_.isNull(element)) {
                element.style.display = "block";
            }
        });
    },
    getTransitionEffect: function(animation) {
        var d = this.getDirection(animation.direction), e = this.getEase(animation.ease), t = animation.duration;
        animation.effect = animation.effect || "scroll";
        var effect;
        switch (animation.effect.toUpperCase()) {
          case "SCALEIN":
            effect = new creatine.transitions.ScaleIn(e, t);
            break;

          case "SCALEOUT":
            effect = new creatine.transitions.ScaleOut(e, t);
            break;

          case "SCALEINOUT":
            effect = new creatine.transitions.ScaleInOut(e, t);
            break;

          case "MOVEIN":
            effect = new creatine.transitions.MoveIn(d, e, t);
            break;

          case "SCROLL":
            effect = new creatine.transitions.Scroll(d, e, t);
            break;

          case "FADEIN":
            effect = new creatine.transitions.FadeIn(e, t);
            break;

          case "FADEOUT":
            effect = new creatine.transitions.FadeOut(e, t);
            break;

          case "FADEINOUT":
            effect = new creatine.transitions.FadeInOut(e, t);
            break;

          default:
            effect = new creatine.transitions.MoveOut(d, e, t);
        }
        return effect;
    },
    getDirection: function(d) {
        if (d === undefined) {
            return d;
        }
        return eval("creatine." + d.toUpperCase());
    },
    getEase: function(e) {
        if (e === undefined) {
            return e;
        }
        return eval("createjs.Ease." + e);
    },
    getStagesToPreLoad: function(stageData) {
        var params = stageData.param;
        if (!params) params = [];
        if (!_.isArray(params)) params = [ params ];
        var next = _.findWhere(params, {
            name: "next"
        }), prev = _.findWhere(params, {
            name: "previous"
        });
        var nextStageId = undefined, prevStageId = undefined;
        if (next) nextStageId = next.value;
        if (prev) prevStageId = prev.value;
        return {
            stage: stageData.id,
            next: nextStageId,
            prev: prevStageId
        };
    },
    cleanUp: function() {
        createjs.Touch.disable(this._self);
    },
    pause: function() {
        if (this._currentStage) {
            AssetManager.stopStageAudio(this._currentStage);
        }
    },
    resume: function() {},
    setParam: function(param, value, incr, max) {
        var instance = this;
        var fval = instance._contentParams[param];
        if (incr) {
            if ("undefined" == typeof fval) fval = 0;
            fval = fval + incr;
        } else {
            fval = value;
        }
        if (0 > fval) fval = 0;
        if ("undefined" != typeof max && fval >= max) fval = 0;
        instance._contentParams[param] = fval;
    },
    getParam: function(param) {
        var instance = this;
        var params;
        if (instance._saveState) {
            return instance._contentParams[param];
        } else {
            var params = instance._contentParams;
            var expr = "params." + param;
            return eval(expr);
        }
    },
    addLoaderElement: function() {
        var gameArea = document.getElementById(Renderer.divIds.gameArea);
        var loaderArea = document.createElement("div");
        loaderArea.id = "loaderArea";
        var element = '<div class="preloader-wrapper"><div class="spinner-layer"><div class="circle-clipper left"><div class="circle"></div></div>' + '<div class="gap-patch"><div class="circle"></div></div><div class="circle-clipper right"><div class="circle"></div></div></div></div>';
        loaderArea.innerHTML = element;
        gameArea.parentElement.appendChild(loaderArea);
    },
    getStageDataById: function(stageId) {
        var stageData = undefined;
        this._data.stage.forEach(function(element, index) {
            if (element.id === stageId) {
                stageData = element;
            }
        });
        return stageData;
    },
    clearStage: function() {
        this._self.clear();
    }
});

PluginManager.registerPlugin("theme", ThemePlugin);

var TweenPlugin = AnimationPlugin.extend({
    _animateFn: undefined,
    initPlugin: function(data, plugin) {
        var to = data.to;
        var loop = data.loop;
        if (!_.isArray(to)) {
            to = [ to ];
        }
        var loopStr = "";
        if (loop) {
            loopStr = ", loop:true";
        }
        var fn = "(function() {return function(plugin, cb){";
        fn += "createjs.Tween.get(plugin, {override:true " + loopStr + "})";
        to.forEach(function(to) {
            var data = _.isString(to.__cdata) ? JSON.parse(to.__cdata) : to.__cdata;
            var relDims = plugin.getRelativeDims(data);
            data.x = relDims.x;
            data.y = relDims.y;
            data.width = relDims.w;
            data.height = relDims.h;
            data.scaleX = plugin._self.scaleX * data.scaleX;
            data.scaleY = plugin._self.scaleY * data.scaleY;
            fn += ".to(" + JSON.stringify(data) + "," + to.duration + ", createjs.Ease." + to.ease + ")";
        });
        fn += '.call(function() {cb({status: "success"})})';
        fn += '.addEventListener("change", function(event) {Renderer.update = true;';
        if (data.widthChangeEvent) {
            fn += "AnimationManager.widthHandler(event, plugin);";
        }
        fn += "})}})()";
        this._animateFn = fn;
    },
    animate: function(plugin, cb) {
        if (!cb) cb = function(resp) {
            console.info("Tween execution completed.");
        };
        var fn = this._animateFn.replace("COMPLETE_CALLBACK", cb.toString());
        var animationFn = eval(fn);
        animationFn.apply(null, [ plugin._self, cb ]);
    }
});

AnimationManager.registerPlugin("tween", TweenPlugin);

var ScribblePlugin = Plugin.extend({
    _type: "scribble",
    _render: true,
    _isContainer: true,
    _data: undefined,
    _oldPt: undefined,
    _oldMidPt: undefined,
    _startPoint: undefined,
    _endPoint: undefined,
    initPlugin: function(data) {
        this._data = data;
        var color = data.color || "#000";
        var background = data.fill || "#fff";
        var dims = this.relativeDims();
        this._self = new createjs.Container();
        this._self.x = dims.x;
        this._self.y = dims.y;
        this._self.on("mousedown", this.handleMouseDown.bind(this), true);
        createjs.Ticker.setFPS(50);
        data.opacity = data.opacity == "0" ? "0.01" : data.opacity;
        var shapeData = {
            shape: {
                type: "rect",
                x: 0,
                y: 0,
                w: 100,
                h: 100
            }
        };
        if (data.fill) shapeData.shape.fill = data.fill;
        if (data.stroke) shapeData.shape.stroke = data.stroke;
        if (!_.isUndefined(data.opacity)) shapeData.shape.opacity = data.opacity;
        if (data["stroke-width"]) shapeData.shape["stroke-width"] = data["stroke-width"];
        if (data.rotate) shapeData.shape.rotate = data.rotate;
        this.invokeChildren(shapeData, this, this._stage, this._theme);
        this.paintBrush = new createjs.Shape();
        this.paintBrush.x = 0;
        this.paintBrush.y = 0;
        this._self.addChild(this.paintBrush);
    },
    setBounderies: function() {
        if (this._startPoint && this._endPoint) return;
        var dims = this.relativeDims();
        var startPoint = this._self.localToGlobal(0, 0);
        this._startPoint = new createjs.Point(startPoint.x + 5, startPoint.y + 5);
        var x = startPoint.x + dims.w - 5;
        var y = startPoint.y + dims.h - 5;
        this._endPoint = new createjs.Point(x, y);
    },
    handleMouseDown: function(event) {
        this.setBounderies();
        var mousePoint = {
            x: event.stageX,
            y: event.stageY
        };
        mousePoint = this._self.globalToLocal(mousePoint.x, mousePoint.y);
        this._oldPt = new createjs.Point(mousePoint.x, mousePoint.y);
        this._self.on("pressmove", this.handleMouseMove.bind(this), true);
        this._self.on("pressup", this.handleMouseUp.bind(this), true);
    },
    handleMouseMove: function(event) {
        var mousePoint = {
            x: event.stageX,
            y: event.stageY
        };
        var thickness = this.isInt(this._data.thickness) ? this._data.thickness : 3;
        if (mousePoint.x > this._startPoint.x && mousePoint.x < this._endPoint.x && (mousePoint.y > this._startPoint.y && mousePoint.y < this._endPoint.y)) {
            mousePoint = this._self.globalToLocal(mousePoint.x, mousePoint.y);
            this.paintBrush.graphics.setStrokeStyle(thickness, "round").beginStroke(this._data.color || "#000");
            this.paintBrush.graphics.mt(this._oldPt.x, this._oldPt.y).lineTo(mousePoint.x, mousePoint.y);
            this._oldPt = new createjs.Point(mousePoint.x, mousePoint.y);
            Renderer.update = true;
        }
    },
    handleMouseUp: function(event) {
        this._self.off("pressmove", this.handleMouseMove);
        this._self.off("pressup", this.handleMouseUp);
    },
    clear: function(action) {
        this.paintBrush.graphics.clear();
        Renderer.update = true;
    },
    isInt: function(value) {
        var x = parseFloat(value);
        return !isNaN(value) && (x | 0) === x;
    },
    show: function() {
        this._self.visible = this._self.parent.visible = true;
        Renderer.update = true;
    },
    hide: function() {
        this._self.visible = this._self.parent.visible = false;
        Renderer.update = true;
    },
    toggleShow: function() {
        this._self.visible = this._self.parent.visible = !this._self.visible;
        Renderer.update = true;
    },
    drawBorder: function() {}
});

PluginManager.registerPlugin("scribble", ScribblePlugin);

var VideoPlugin = Plugin.extend({
    _type: "video",
    _render: true,
    _data: undefined,
    _instance: undefined,
    _defaultStart: 50,
    _replayIcon: "assets/icons/video_replay.png",
    initPlugin: function(data) {
        this._data = data;
        this._data.muted = AudioManager.muted ? true : false;
        if (this._data) {
            if (_.isUndefined(this._data.autoplay)) this._data.autoplay = true;
            if (_.isUndefined(this._data.controls)) this._data.controls = false;
        }
        _instance = this;
        _instance.loadVideo(data);
    },
    loadVideo: function(data) {
        if (!data.asset) return false;
        var lItem = this.createVideoElement();
        var videoEle = this.getVideo();
        videoEle.load();
        this.registerEvents();
        this._self = new createjs.Bitmap(lItem);
        if (data.autoplay == true) {
            this.play();
        }
    },
    registerEvents: function() {
        var videoEle = this.getVideo();
        jQuery(videoEle).bind("play", this.handleTelemetryLog);
        jQuery(videoEle).bind("pause", this.handleTelemetryLog);
        jQuery(videoEle).bind("error", this.logConsole);
        jQuery(videoEle).bind("abort", this.logConsole);
        jQuery(videoEle).bind("loadeddata", this.onLoadData);
        jQuery(videoEle).bind("ended", this.showReplay);
        EkstepRendererAPI.addEventListener("renderer:overlay:mute", this.muteAll, this);
        EkstepRendererAPI.addEventListener("renderer:overlay:unmute", this.unmuteAll, this);
    },
    handleTelemetryLog: function(event) {
        var action = {}, videoEle = event.target;
        action.asset = videoEle.id;
        action.stageId = Renderer.theme._currentStage;
        if (event.type === "pause") {
            event.type = videoEle.currentTime > 0 ? "pause" : "stop";
            if (!videoEle.ended) {
                _instance.sendTelemeteryData(action, event.type);
            }
        }
        if (event.type === "play") {
            if (!videoEle.autoplay) {
                _instance.sendTelemeteryData(action, event.type);
            }
            videoEle.autoplay = undefined;
        }
    },
    onLoadData: function() {
        if (_instance.autoplay == true) {
            _instance.play();
        }
    },
    logConsole: function(e) {
        console.warn("This video has", e);
    },
    sendTelemeteryData: function(action, subType) {
        if (action) EventManager.processAppTelemetry(action, "OTHER", this._instance, {
            subtype: subType.toUpperCase()
        });
    },
    play: function(action) {
        var videoEle = this.getVideo(action);
        videoEle.paused && videoEle.readyState > 2 ? this.start(videoEle) : console.warn("Video is not ready to play", videoEle.readyState);
    },
    pause: function(action) {
        var videoEle = this.getVideo(action);
        !_.isUndefined(videoEle) ? videoEle.pause() : console.info("video pause failed");
    },
    stop: function(action) {
        var videoEle = this.getVideo(action);
        videoEle.pause();
        videoEle.currentTime = 0;
    },
    replay: function() {
        var videoEle = this.getVideo();
        videoEle.currentTime = 0;
        this.play();
    },
    start: function(videoEle) {
        var delay = _.isUndefined(this._data.delay) ? this._defaultStart : this._data.delay;
        this._data.delay = this._defaultStart;
        setTimeout(function() {
            videoEle.play();
        }, delay);
    },
    getVideo: function(action) {
        if (!_.isUndefined(action)) {
            return document.getElementById(action.asset);
        } else {
            return document.getElementById(this._data.asset);
        }
    },
    setVideoStyle: function(jqVideoEle) {
        var dims = this.relativeDims();
        jQuery(jqVideoEle).attr("id", this._data.asset).prop({
            autoplay: this._data.autoplay,
            muted: this._data.muted,
            controls: this._data.controls,
            width: dims.w,
            height: dims.h
        }).css({
            position: "absolute",
            left: dims.x + "px",
            top: dims.y + "px",
            display: "block"
        });
    },
    addVideoElement: function(jqVideoEle) {
        this._theme.htmlElements.push(jQuery(jqVideoEle).attr("id"));
        var videoEle = this.getVideo();
        var div = document.getElementById("gameArea");
        div.insertBefore(videoEle, div.childNodes[0]);
    },
    createVideoElement: function() {
        var videoAsset;
        videoAsset = this._theme.getAsset(this._data.asset);
        if (videoAsset instanceof HTMLElement == false) {
            var src = videoAsset;
            videoAsset = document.createElement("video");
            videoAsset.src = src;
        }
        var jqVideoEle = jQuery(videoAsset).insertBefore("#gameArea");
        !_.isUndefined(this._data.type) ? jQuery(jqVideoEle).attr("type", this._data.type) : console.warn("Video type is not defined");
        this.setVideoStyle(jqVideoEle);
        this.addVideoElement(jqVideoEle);
        var videoEle = this.getVideo();
        return new createjs.Bitmap(videoEle);
    },
    showReplay: function(event) {
        try {
            var dims = _instance.getRelativeDims(org.ekstep.pluginframework.pluginManager.pluginInstances[event.target.id]._data);
            var img = document.createElement("img");
            var replay_id = "replay_" + event.target.id;
            jQuery(img).attr({
                src: _instance._replayIcon,
                id: replay_id
            });
            _instance.disableBackground(event.target.id, true);
            if (_.isNull(document.getElementById(replay_id))) {
                jQuery(img).insertAfter("#" + _instance.id);
            }
            !window.screenTop && !window.screenY ? _instance.onFullScreen(event) : _instance.onNormalScreen(event);
            jQuery("#" + replay_id).bind("click", _instance.hideReplay);
        } catch (e) {
            console.warn("video fails to show the poster", e);
        }
    },
    setReplayIconStyle: function(elementId, CustomStyleObj) {
        jQuery("#" + elementId).css(CustomStyleObj);
    },
    hideReplay: function(event) {
        var vidoeId = event.target.id.replace("replay_", "");
        _instance.disableBackground(vidoeId, false);
        document.getElementById(vidoeId).play();
        jQuery("#" + event.target.id).css("display", "none");
    },
    disableBackground: function(id, flag) {
        if (flag) {
            jQuery("#" + id).css({
                opacity: "0.4",
                "pointer-events": "none"
            });
        } else {
            jQuery("#" + id).css({
                opacity: "1",
                "pointer-events": " "
            });
        }
    },
    onFullScreen: function(event) {
        var replay_id = "replay_" + event.target.id;
        var element = document.getElementById(event.target.id);
        var positionInfo = element.getBoundingClientRect();
        _instance.setReplayIconStyle(replay_id, {
            width: "100px",
            height: "100px",
            "z-index": "55555555555",
            position: "absolute",
            top: positionInfo.height / 2,
            left: positionInfo.width / 2,
            display: "block"
        });
    },
    onNormalScreen: function(event) {
        var replay_id = "replay_" + event.target.id;
        var dims = _instance.getRelativeDims(org.ekstep.pluginframework.pluginManager.pluginInstances[event.target.id]._data);
        var top = dims.y + (dims.h / 2 - 40) + "px";
        var left = dims.x + (dims.w / 2 - 30) + "px";
        _instance.setReplayIconStyle(replay_id, {
            width: "50px",
            height: "50px",
            "z-index": "1",
            position: "absolute",
            top: top,
            left: left,
            display: "block"
        });
    },
    muteAll: function() {
        var videoElements = document.querySelectorAll("video");
        if (videoElements.length > 0) {
            _.each(videoElements, function(videoElem) {
                videoElem.muted = true;
            });
        }
    },
    unmuteAll: function() {
        var videoElements = document.querySelectorAll("video");
        if (videoElements.length > 0) {
            _.each(videoElements, function(videoElem) {
                videoElem.muted = false;
            });
        }
    }
});

PluginManager.registerPlugin("video", VideoPlugin);

var GridlayoutPlugin = LayoutPlugin.extend({
    _type: "grid",
    generateLayout: function() {
        var tableProps = this.getTableProperties();
        var instance = this;
        var marginX = 0;
        if (_.isFinite(this._data.marginX)) {
            marginX = this._data.marginX;
        }
        var marginY = 0;
        if (_.isFinite(this._data.marginY)) {
            marginY = this._data.marginY;
        }
        var cw = (100 - (tableProps.cols - 1) * marginX) / tableProps.cols;
        var ch = (100 - (tableProps.rows - 1) * marginY) / tableProps.rows;
        var index = 0;
        for (var r = 0; r < tableProps.rows; r++) {
            for (var c = 0; c < tableProps.cols; c++) {
                if (this._cells.length < this._cellsCount) {
                    var data = {};
                    data.x = c * (cw + marginX);
                    data.y = r * (ch + marginY);
                    data.w = cw;
                    data.h = ch;
                    this._cells.push(data);
                }
            }
        }
    },
    getTableProperties: function() {
        var cols = undefined;
        var rows = undefined;
        var count = this._cellsCount;
        if (this._data.rows && this._data.cols) {
            cols = this._data.cols;
            rows = Math.ceil(count / cols);
        } else {
            if (this._data.rows) rows = this._data.rows;
            if (this._data.cols) cols = this._data.cols;
            if (this._data.rows) cols = Math.ceil(count / rows); else rows = Math.ceil(count / cols);
        }
        return {
            cols: cols,
            rows: rows
        };
    }
});

PluginManager.registerPlugin("grid", GridlayoutPlugin);

var HighlightTextPlugin = HTMLPlugin.extend({
    _type: "htext",
    _wordIds: [],
    _timings: [],
    _isPlaying: false,
    _isPaused: false,
    _wordClass: "gc-ht-word",
    _listener: undefined,
    _audioInstance: undefined,
    _position: {
        previous: 0,
        current: 0,
        pause: 0
    },
    _time: 0,
    initPlugin: function(data) {
        this._cleanupHighlight();
        var font;
        var dims = this.relativeDims();
        if (!data.id) data.id = this._data.id = _.uniqueId("plugin");
        if (!data.highlight) data.highlight = this._data.highlight = "#DDDDDD";
        var div = document.createElement("div");
        div.id = data.id;
        div.style.width = dims.w + "px";
        div.style.height = dims.h + "px";
        div.style.top = "-1000px";
        div.style.position = "relative";
        var fontsize = "1.2em";
        if (data.fontsize) {
            fontsize = data.fontsize;
        }
        if (isFinite(fontsize)) {
            if (data.w) {
                var exp = parseFloat(PluginManager.defaultResWidth * data.w / 100);
                var cw = this._parent.dimensions().w;
                var width = parseFloat(cw * data.w / 100);
                var scale = parseFloat(width / exp);
                fontsize = parseFloat(fontsize * scale);
                fontsize = fontsize + "px";
            }
        }
        var h_offset = data.offsetX ? data.offsetX : 0;
        var v_offset = data.offsetY ? data.offsetY : 0;
        var Blur = data.blur ? data.blur : 1;
        var shadow_color = data.shadow ? data.shadow : "#ccc";
        var shadow = h_offset + "px" + " " + v_offset + "px" + " " + Blur + "px" + " " + shadow_color;
        if (/\d/.test(data.font) == true) {
            font = data.font;
            div.style["font"] = data.font;
        } else {
            font = fontsize + " " + data.font;
            div.style["font-family"] = data.font;
            div.style["font-size"] = fontsize;
        }
        if (data.weight) {
            div.style["font"] = data.weight + " " + font;
        }
        div.style["outline"] = data.outline ? data.outline : 0;
        div.style["line-height"] = data.lineHeight ? data.lineHeight : "1.2em";
        div.style["text-align"] = data.align ? data.align : "left";
        div.style["vertical-align"] = data.valign ? data.valign : "top";
        div.style["color"] = data.color ? data.color : "black";
        div.style["textShadow"] = shadow;
        var parentDiv = document.getElementById(Renderer.divIds.gameArea);
        parentDiv.insertBefore(div, parentDiv.childNodes[0]);
        if (data.timings) {
            this._timings = _.map(data.timings.split(","), function(time) {
                return Number(Number(time).toFixed(0));
            });
        }
        var text = this._getText();
        var htmlText = this._tokenize(text);
        jQuery("#" + data.id).append(htmlText);
        this._div = div;
        this._self = new createjs.DOMElement(div);
        this._self.x = dims.x;
        this._self.y = dims.y + 1e3;
        this._registerEvents(data.id);
    },
    getWordId: function(index) {
        return this._stage._data.id + "-text-" + this._data.id + "-word-" + index;
    },
    play: function(action) {
        var instance = this;
        var audio = action.audio || this._data.audio;
        if (this._timings.length > 0) {
            if (this._isPaused) {
                instance._resume(action);
            } else {
                this._isPlaying = true;
                var prevPosition = 0;
                if (audio) {
                    var soundInstance = this._playAudio(audio);
                    soundInstance.on("complete", function() {
                        instance._cleanupHighlight();
                        if ("undefined" != typeof action.cb) action.cb({
                            status: "success"
                        });
                    });
                    this._listener = function() {
                        if (_.isUndefined(instance._audioInstance) || _.isUndefined(instance._audioInstance.object)) {
                            if (instance._listener) {
                                createjs.Ticker.removeEventListener("tick", instance._listener);
                                return;
                            }
                        }
                        instance._position.current = Number(instance._audioInstance.object.position.toFixed(0));
                        instance._highlight();
                        instance._position.previous = instance._position.current;
                    };
                } else {
                    this._time = Date.now();
                    this._listener = function() {
                        if (!instance._isPaused) {
                            instance._position.current = Date.now() - instance._time + instance._position.pause;
                            instance._highlight();
                            if (instance._position.previous > instance._timings[instance._timings.length - 1] + 500) {
                                instance._cleanupHighlight();
                                if ("undefined" != typeof action.cb) action.cb({
                                    status: "success"
                                });
                            }
                            instance._position.previous = instance._position.current;
                        }
                    };
                }
                createjs.Ticker.addEventListener("tick", instance._listener);
            }
        } else {
            console.info("No timing data to play highlight text:", this._id);
        }
    },
    pause: function(action) {
        if (this._isPlaying) {
            var instance = this;
            var audio = action.audio || this._data.audio;
            if (this._timings.length > 0) {
                instance._isPaused = true;
                if (audio) {
                    AudioManager.pause({
                        asset: audio
                    }, instance._audioInstance);
                } else {
                    instance._position.pause = instance._position.current;
                }
            } else {
                console.info("No timing data:", this._id);
            }
        } else {
            console.info("highlight is not playing to pause:", this._id);
        }
    },
    togglePlay: function(action) {
        if (this._isPlaying && !this._isPaused) {
            this.pause(action);
            if ("undefined" != typeof action.cb) action.cb({
                status: "success"
            });
        } else {
            this.play(action);
        }
    },
    _resume: function(action) {
        var instance = this;
        var audio = action.audio || this._data.audio;
        if (this._timings.length > 0) {
            instance._isPaused = false;
            if (audio) {
                AudioManager.play({
                    asset: audio,
                    stageId: instance._stage._id
                }, instance._audioInstance);
            } else {
                instance._time = Date.now();
            }
        } else {
            console.info("No timing data:", this._id);
        }
    },
    stop: function(action) {
        var instance = this;
        var audio = action.audio || this._data.audio;
        if (this._timings.length > 0) {
            if (audio) {
                AudioManager.stop({
                    asset: audio,
                    stageId: instance._stage._id
                });
            }
            instance._cleanupHighlight();
        } else {
            console.info("No timing data:", this._id);
        }
    },
    _playAudio: function(audio) {
        var instance = this;
        instance._data.audio = audio;
        instance._audioInstance = AudioManager.play({
            asset: audio,
            stageId: this._stage._id
        });
        return instance._audioInstance.object;
    },
    _highlight: function() {
        var instance = this;
        if (instance._position.current && instance._isPlaying) {
            var matches = _.filter(instance._timings, function(time) {
                return time >= instance._position.previous && time < instance._position.current;
            });
            if (matches.length > 0) {
                _.each(matches, function(match) {
                    var index = instance._timings.indexOf(match);
                    var wordId = instance.getWordId(index);
                    instance._removeHighlight();
                    instance._addHighlight(wordId);
                });
            }
        }
    },
    _cleanupHighlight: function() {
        this._isPlaying = false;
        this._removeHighlight();
        if (this._listener) createjs.Ticker.removeEventListener("tick", this._listener);
        if (this._audioInstance) this._audioInstance = undefined;
        this._time = 0;
        this._position = {
            previous: 0,
            current: 0,
            pause: 0
        };
    },
    _removeHighlight: function() {
        jQuery("." + this._wordClass).css({
            "background-color": "none",
            padding: "0px"
        });
    },
    _addHighlight: function(id) {
        jQuery("#" + id).css({
            background: this._data.highlight
        });
    },
    _tokenize: function(text) {
        var htmlText = "";
        Replaced_text = text.replace(/(\r\n|\n|\r)/gm, " </br> ");
        var words = Replaced_text.split(" ");
        this._wordIds = [];
        var index = 0;
        for (i = 0; i < words.length; i++) {
            if (words[i] === "") {
                htmlText += '<span class="gc-ht-word">&nbsp;</span> ';
            } else if (words[i] === "</br>") {
                htmlText += '<span class="gc-ht-word"></br></span> ';
            } else {
                var wordId = this.getWordId(index);
                this._wordIds.push(wordId);
                htmlText += '<span id="' + wordId + '" class="gc-ht-word">' + words[i] + "</span> ";
                index++;
            }
        }
        return htmlText;
    },
    _getText: function() {
        var textStr = "";
        if (this._data.$t || this._data.__text) {
            textStr = this._data.$t || this._data.__text;
        } else if (this._data.model) {
            textStr = this._stage.getModelValue(this._data.model) || "";
        } else if (this._data.param) {
            textStr = this.getParam(this._data.param.trim()) || "";
        }
        return textStr;
    },
    _registerEvents: function(id) {
        var instance = this;
        jQuery("#" + id).children().each(function() {
            var data = jQuery(this).data();
            if (data && data.event) {
                jQuery(this).click(function(event) {
                    event.preventDefault();
                    instance._triggerEvent(data.event);
                    console.info("Triggered event ", data.event);
                });
            }
        });
    },
    _triggerEvent: function(event) {
        var plugin = PluginManager.getPluginObject(Renderer.theme._currentStage);
        event = new createjs.Event(event);
        plugin.dispatchEvent(event);
    }
});

PluginManager.registerPlugin("htext", HighlightTextPlugin);

var android = android ? android : {};

android.recorder = {
    start: function(path) {
        return new Promise(function(resolve, reject) {
            var result = {};
            if (typeof Media != "undefined") {
                var media = new Media(path, function() {
                    console.info("Audio recording successfull.");
                }, function(err) {
                    console.error("Error Audio recording: " + err.code);
                });
                media.startRecord();
                result.media = media;
                result.status = "success";
            } else {
                result.status = "success";
                result.errMessage = "Media is not available.";
                console.info("AndroidRecorder.startRecording called.");
            }
            resolve(result);
        });
    },
    stop: function(instance) {
        return new Promise(function(resolve, reject) {
            var result = {};
            if (typeof Media != "undefined") {
                if (instance && instance.media) {
                    instance.media.stopRecord();
                    instance.media.release();
                    result = {
                        status: "success"
                    };
                } else {
                    result = {
                        status: "ERROR",
                        errMessage: "Error recording not started."
                    };
                }
            } else {
                console.info("AndroidRecorder.stopRecording called.");
                result = {
                    status: "success",
                    errMessage: "Media is not available."
                };
            }
            resolve(result);
        });
    },
    process: function(path, lineIndex) {
        return new Promise(function(resolve, reject) {
            resolve({
                status: "success",
                result: {
                    totalScore: 1
                },
                errMessage: "Process recording for android is not integrated."
            });
        });
    }
};

speech = {
    mediaInstance: undefined,
    recording: false,
    recorder: "undefined" != typeof AppConfig && AppConfig.recorder ? AppConfig.recorder : "android",
    recordingInstances: {},
    _root: undefined,
    getRecorder: function() {
        return "sensibol" == speech.recorder ? sensibol.recorder : android.recorder;
    },
    startRecording: function(path, cb) {
        speech.recording = false;
        speech.getRecorder().start(path).then(function(mediaInstance) {
            speech.mediaInstance = mediaInstance;
            if (speech.mediaInstance && speech.mediaInstance.status == "success") {
                speech.recording = true;
                speech.mediaInstance.filePath = path;
            }
            cb(mediaInstance);
        }).catch(function(err) {
            console.error("Error start recording audio:", err);
            cb({
                status: "error",
                error: err
            });
        });
    },
    stopRecording: function(cb) {
        if (speech.recording && speech.mediaInstance) {
            speech.getRecorder().stop(speech.mediaInstance).then(function(response) {
                if ("success" == response.status) {
                    speech.recording = false;
                    console.info("Audio file saved at ", speech.mediaInstance.filePath);
                    cb(speech.mediaInstance);
                } else {
                    cb(response);
                }
            }).catch(function(err) {
                console.error("Error stop recording audio:", err);
                cb({
                    status: "error",
                    error: err
                });
            });
        } else {
            cb({
                status: "error",
                error: "no recording instance available."
            });
        }
    },
    processRecording: function(lineindex, filePath, cb) {
        filePath = filePath ? filePath : speech.mediaInstance ? speech.mediaInstance.filePath : "";
        if (filePath && lineindex) {
            speech.getRecorder().process(filePath, lineindex).then(function(response) {
                speech.mediaInstance = undefined;
                cb(response);
            }).catch(function(err) {
                console.error("Error processing audio:", err);
                cb({
                    status: "error",
                    error: err
                });
            });
        }
    }
};

//# sourceURL=renderer.min.js